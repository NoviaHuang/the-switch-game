schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createQw(input: CreateQwInput!): qw
  createReadyPageTable(input: CreateReadyPageTableInput!): ReadyPageTable
  createRoompage(input: CreateRoompageInput!): Roompage
  deleteQw(input: DeleteQwInput!): qw
  deleteReadyPageTable(input: DeleteReadyPageTableInput!): ReadyPageTable
  deleteRoompage(input: DeleteRoompageInput!): Roompage
  updateQw(input: UpdateQwInput!): qw
  updateReadyPageTable(input: UpdateReadyPageTableInput!): ReadyPageTable
  updateRoompage(input: UpdateRoompageInput!): Roompage
}

type Query {
  getQw(username: String!): qw
  getReadyPageTable(roomID: Int!): ReadyPageTable
  getRoompage(roomid: Int!): Roompage
  listQws(filter: TableQwFilterInput, limit: Int, nextToken: String): qwConnection
  listReadyPageTables(filter: TableReadyPageTableFilterInput, limit: Int, nextToken: String): ReadyPageTableConnection
  listRoompages(filter: TableRoompageFilterInput, limit: Int, nextToken: String): RoompageConnection
}

type ReadyPageTable {
  GameStart: Boolean
  cards: [Int]
  players: [String]
  readyStatus: [String]
  roomID: Int!
}

type ReadyPageTableConnection {
  items: [ReadyPageTable]
  nextToken: String
}

type Roompage {
  players: [String]
  roomid: Int!
}

type RoompageConnection {
  items: [Roompage]
  nextToken: String
}

type Subscription {
  onCreateQw(roomID: Int, seat: Int, username: String, x: Int, y: Int): qw @aws_subscribe(mutations : ["createQw"])
  onCreateReadyPageTable(GameStart: Boolean, cards: [Int], players: [String], readyStatus: [String], roomID: Int): ReadyPageTable @aws_subscribe(mutations : ["createReadyPageTable"])
  onCreateRoompage(players: [String], roomid: Int): Roompage @aws_subscribe(mutations : ["createRoompage"])
  onDeleteQw(roomID: Int, seat: Int, username: String, x: Int, y: Int): qw @aws_subscribe(mutations : ["deleteQw"])
  onDeleteReadyPageTable(GameStart: Boolean, cards: [Int], players: [String], readyStatus: [String], roomID: Int): ReadyPageTable @aws_subscribe(mutations : ["deleteReadyPageTable"])
  onDeleteRoompage(players: [String], roomid: Int): Roompage @aws_subscribe(mutations : ["deleteRoompage"])
  onUpdateQw(roomID: Int, seat: Int, username: String, x: Int, y: Int): qw @aws_subscribe(mutations : ["updateQw"])
  onUpdateReadyPageTable(GameStart: Boolean, cards: [Int], players: [String], readyStatus: [String], roomID: Int): ReadyPageTable @aws_subscribe(mutations : ["updateReadyPageTable"])
  onUpdateRoompage(players: [String], roomid: Int): Roompage @aws_subscribe(mutations : ["updateRoompage"])
}

type qw {
  roomID: Int
  seat: Int
  username: String!
  whichCard: Int
  x: Int
  y: Int
}

type qwConnection {
  items: [qw]
  nextToken: String
}

input CreateQwInput {
  roomID: Int
  seat: Int
  username: String!
  whichCard: Int
  x: Int
  y: Int
}

input CreateReadyPageTableInput {
  GameStart: Boolean
  cards: [Int]
  players: [String]
  readyStatus: [String]
  roomID: Int!
}

input CreateRoompageInput {
  players: [String]
  roomid: Int!
}

input DeleteQwInput {
  username: String!
}

input DeleteReadyPageTableInput {
  roomID: Int!
}

input DeleteRoompageInput {
  roomid: Int!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableQwFilterInput {
  roomID: TableIntFilterInput
  seat: TableIntFilterInput
  username: TableStringFilterInput
  whichCard: TableIntFilterInput
  x: TableIntFilterInput
  y: TableIntFilterInput
}

input TableReadyPageTableFilterInput {
  GameStart: TableBooleanFilterInput
  cards: TableIntFilterInput
  players: TableStringFilterInput
  readyStatus: TableStringFilterInput
  roomID: TableIntFilterInput
}

input TableRoompageFilterInput {
  players: TableStringFilterInput
  roomid: TableIntFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateQwInput {
  roomID: Int
  seat: Int
  username: String!
  whichCard: Int
  x: Int
  y: Int
}

input UpdateReadyPageTableInput {
  GameStart: Boolean
  cards: [Int]
  players: [String]
  readyStatus: [String]
  roomID: Int!
}

input UpdateRoompageInput {
  players: [String]
  roomid: Int!
}
