type player1 {
  id: ID!
  name: String!
}

type player2 {
  id: ID!
  name: String!
}

type player3 {
  id: ID!
  name: String!
}

type player4 {
  id: ID!
  name: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type Modelplayer1Connection {
  items: [player1]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input Modelplayer1FilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [Modelplayer1FilterInput]
  or: [Modelplayer1FilterInput]
  not: Modelplayer1FilterInput
}

type Query {
  getPlayer1(id: ID!): player1
  listPlayer1s(filter: Modelplayer1FilterInput, limit: Int, nextToken: String): Modelplayer1Connection
  getPlayer2(id: ID!): player2
  listPlayer2s(filter: Modelplayer2FilterInput, limit: Int, nextToken: String): Modelplayer2Connection
  getPlayer3(id: ID!): player3
  listPlayer3s(filter: Modelplayer3FilterInput, limit: Int, nextToken: String): Modelplayer3Connection
  getPlayer4(id: ID!): player4
  listPlayer4s(filter: Modelplayer4FilterInput, limit: Int, nextToken: String): Modelplayer4Connection
}

input CreatePlayer1Input {
  id: ID
  name: String!
}

input UpdatePlayer1Input {
  id: ID!
  name: String
}

input DeletePlayer1Input {
  id: ID
}

type Mutation {
  createPlayer1(input: CreatePlayer1Input!): player1
  updatePlayer1(input: UpdatePlayer1Input!): player1
  deletePlayer1(input: DeletePlayer1Input!): player1
  createPlayer2(input: CreatePlayer2Input!): player2
  updatePlayer2(input: UpdatePlayer2Input!): player2
  deletePlayer2(input: DeletePlayer2Input!): player2
  createPlayer3(input: CreatePlayer3Input!): player3
  updatePlayer3(input: UpdatePlayer3Input!): player3
  deletePlayer3(input: DeletePlayer3Input!): player3
  createPlayer4(input: CreatePlayer4Input!): player4
  updatePlayer4(input: UpdatePlayer4Input!): player4
  deletePlayer4(input: DeletePlayer4Input!): player4
}

type Subscription {
  onCreatePlayer1: player1 @aws_subscribe(mutations: ["createPlayer1"])
  onUpdatePlayer1: player1 @aws_subscribe(mutations: ["updatePlayer1"])
  onDeletePlayer1: player1 @aws_subscribe(mutations: ["deletePlayer1"])
  onCreatePlayer2: player2 @aws_subscribe(mutations: ["createPlayer2"])
  onUpdatePlayer2: player2 @aws_subscribe(mutations: ["updatePlayer2"])
  onDeletePlayer2: player2 @aws_subscribe(mutations: ["deletePlayer2"])
  onCreatePlayer3: player3 @aws_subscribe(mutations: ["createPlayer3"])
  onUpdatePlayer3: player3 @aws_subscribe(mutations: ["updatePlayer3"])
  onDeletePlayer3: player3 @aws_subscribe(mutations: ["deletePlayer3"])
  onCreatePlayer4: player4 @aws_subscribe(mutations: ["createPlayer4"])
  onUpdatePlayer4: player4 @aws_subscribe(mutations: ["updatePlayer4"])
  onDeletePlayer4: player4 @aws_subscribe(mutations: ["deletePlayer4"])
}

type Modelplayer2Connection {
  items: [player2]
  nextToken: String
}

input Modelplayer2FilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [Modelplayer2FilterInput]
  or: [Modelplayer2FilterInput]
  not: Modelplayer2FilterInput
}

input CreatePlayer2Input {
  id: ID
  name: String!
}

input UpdatePlayer2Input {
  id: ID!
  name: String
}

input DeletePlayer2Input {
  id: ID
}

type Modelplayer3Connection {
  items: [player3]
  nextToken: String
}

input Modelplayer3FilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [Modelplayer3FilterInput]
  or: [Modelplayer3FilterInput]
  not: Modelplayer3FilterInput
}

input CreatePlayer3Input {
  id: ID
  name: String!
}

input UpdatePlayer3Input {
  id: ID!
  name: String
}

input DeletePlayer3Input {
  id: ID
}

type Modelplayer4Connection {
  items: [player4]
  nextToken: String
}

input Modelplayer4FilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [Modelplayer4FilterInput]
  or: [Modelplayer4FilterInput]
  not: Modelplayer4FilterInput
}

input CreatePlayer4Input {
  id: ID
  name: String!
}

input UpdatePlayer4Input {
  id: ID!
  name: String
}

input DeletePlayer4Input {
  id: ID
}
