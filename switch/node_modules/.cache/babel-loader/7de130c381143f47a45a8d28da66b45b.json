{"ast":null,"code":"/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar TriangleToTriangle = require('./TriangleToTriangle');\n\nvar GetTriangleToLine = require('./GetTriangleToLine');\n/**\r\n * Checks if two Triangles intersect, and returns the intersection points as a Point object array.\r\n *\r\n * A Triangle intersects another Triangle if any pair of their lines intersects or if any point of one Triangle is within the other Triangle. Thus, the Triangles are considered \"solid\".\r\n *\r\n * @function Phaser.Geom.Intersects.GetTriangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangleA - The first Triangle to check for intersection.\r\n * @param {Phaser.Geom.Triangle} triangleB - The second Triangle to check for intersection.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\n\n\nvar GetTriangleToTriangle = function GetTriangleToTriangle(triangleA, triangleB, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (TriangleToTriangle(triangleA, triangleB)) {\n    var lineA = triangleB.getLineA();\n    var lineB = triangleB.getLineB();\n    var lineC = triangleB.getLineC();\n    GetTriangleToLine(triangleA, lineA, out);\n    GetTriangleToLine(triangleA, lineB, out);\n    GetTriangleToLine(triangleA, lineC, out);\n  }\n\n  return out;\n};\n\nmodule.exports = GetTriangleToTriangle;","map":null,"metadata":{},"sourceType":"script"}