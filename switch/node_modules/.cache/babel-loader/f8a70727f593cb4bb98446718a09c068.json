{"ast":null,"code":"import _toConsumableArray from \"/Volumes/jariclnnf/the-switch-game/switch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Volumes/jariclnnf/the-switch-game/switch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Volumes/jariclnnf/the-switch-game/switch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Volumes/jariclnnf/the-switch-game/switch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/jariclnnf/the-switch-game/switch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/jariclnnf/the-switch-game/switch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/jariclnnf/the-switch-game/switch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Volumes/jariclnnf/the-switch-game/switch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Volumes/jariclnnf/the-switch-game/switch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/jariclnnf/the-switch-game/switch/src/Pages/RoomListPage.js\";\nimport React, { Component } from 'react';\nimport img from '../img/background.png';\nimport './RoomListPage.css';\nimport RoomPage from './RoomPage';\nimport GameRulePage from './GameRulePage';\nimport ProfilePage from './ProfilePage';\nimport { withRouter } from \"react-router-dom\";\nimport { Auth } from 'aws-amplify';\nimport Amplify, { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from './phaser/../../graphql/queries';\nimport { onCreateRoompage } from './phaser/../../graphql/subscriptions';\nimport * as mutations from '../graphql/mutations';\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport aws_config from '../aws-exports';\nimport gql from 'graphql-tag';\nvar client = new AWSAppSyncClient({\n  url: aws_config.aws_appsync_graphqlEndpoint,\n  region: aws_config.aws_appsync_region,\n  auth: {\n    type: AUTH_TYPE.API_KEY,\n    apiKey: aws_config.aws_appsync_apiKey\n  }\n});\nvar subtoRoomData = \"\\n  subscription{\\n    onCreateRoompage{\\n        roomid players\\n    }\\n  }\\n  \";\nvar subtoRoomData2 = \"\\n  subscription{\\n    onUpdateRoompage{\\n        roomid players\\n    }\\n  }\\n  \";\nvar subtoRoomData3 = \"\\n  subscription{\\n    onDeleteRoompage{\\n        roomid players\\n    }\\n  }\\n  \";\n\nvar RoomListPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RoomListPage, _React$Component);\n\n  function RoomListPage() {\n    var _this;\n\n    _classCallCheck(this, RoomListPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RoomListPage).call(this));\n    _this.getRoom =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var storeRoom, result, i;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              storeRoom = [];\n              _context.next = 3;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 3:\n              result = _context.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                console.log(result.data.listRoompages.items[i].roomid);\n                storeRoom.push(result.data.listRoompages.items[i].roomid);\n              }\n\n              _this.setState({\n                rID: storeRoom\n              });\n\n              console.log('TEST FOR QUERY ' + _this.state.rID);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.getPlayersCount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var playercount, result, i, obj, count, property, roomCount;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              playercount = [];\n              _context2.next = 3;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 3:\n              result = _context2.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                obj = result.data.listRoompages.items[i].players;\n                count = 0;\n\n                for (property in obj) {\n                  if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                    count++;\n                  }\n                }\n\n                console.log('show the obj ' + count);\n                playercount.push(count);\n              }\n\n              _this.setState(function (state, props) {\n                return {\n                  player_count: playercount\n                };\n              }); //this.setState({player_count:playercount});\n\n\n              roomCount = _this.state.player_count.length;\n              console.log('TEST FOR playercount ' + _this.state.player_count.length);\n              console.log('show the roomCount ' + roomCount);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    _this.getStatus =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var storeStatus, playercount, result, i, obj, count, property, _i;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              storeStatus = [];\n              playercount = [];\n              _context3.next = 4;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 4:\n              result = _context3.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                obj = result.data.listRoompages.items[i].players;\n                count = 0;\n\n                for (property in obj) {\n                  if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                    count++;\n                  }\n                }\n\n                console.log('show the obj ' + count);\n                playercount.push(count);\n              }\n\n              console.log('get status check ' + playercount);\n\n              for (_i = 0; _i < playercount.length; _i++) {\n                if (playercount[_i] < 4) {\n                  storeStatus.push('open');\n                }\n\n                if (playercount[_i] >= 4) {\n                  storeStatus.push('close');\n                }\n              }\n\n              _this.setState({\n                status: storeStatus\n              });\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    _this.deleteEmptyRoom =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var i, num, result;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this.getPlayersCount();\n\n              console.log('gogogo  ' + _this.state.player_count.length);\n              i = 0;\n\n            case 3:\n              if (!(i < _this.state.player_count.length)) {\n                _context4.next = 14;\n                break;\n              }\n\n              console.log('hello');\n              num = _this.state.rID[i];\n\n              if (!(_this.state.player_count[i] == 0)) {\n                _context4.next = 11;\n                break;\n              }\n\n              _context4.next = 9;\n              return API.graphql(graphqlOperation(mutations.deleteRoompage, {\n                input: {\n                  roomid: num\n                }\n              }));\n\n            case 9:\n              result = _context4.sent;\n              console.log('Delete room ' + num);\n\n            case 11:\n              i++;\n              _context4.next = 3;\n              break;\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    _this.handleRanDomRoom =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var storeRoom, result, i;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              storeRoom = [];\n              _context5.next = 3;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 3:\n              result = _context5.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                console.log(result.data.listRoompages.items[i].roomid);\n                storeRoom.push(result.data.listRoompages.items[i].roomid);\n              }\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    _this.handleCreateRoom =\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(random) {\n        var getUser, name, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return Auth.currentAuthenticatedUser();\n\n              case 2:\n                getUser = _context6.sent;\n                name = getUser.username;\n                _context6.next = 6;\n                return API.graphql(graphqlOperation(mutations.createRoompage, {\n                  input: {\n                    roomid: random,\n                    players: name\n                  }\n                }));\n\n              case 6:\n                result = _context6.sent;\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      /* \n      ************************\n      READ!!!!!!\n      ***********************\n       roomID -> rID, I am using roomID in DB, and these 2 roomID mess me up\n       */\n      rID: '',\n      player_count: [],\n      roomCount: Number,\n      status: ''\n    };\n    _this.handleProfileClick = _this.handleProfileClick.bind(_assertThisInitialized(_this));\n    _this.handleGameRuleClick = _this.handleGameRuleClick.bind(_assertThisInitialized(_this));\n    _this.handleRoomClick = _this.handleRoomClick.bind(_assertThisInitialized(_this));\n    _this.handlePrevClick = _this.handlePrevClick.bind(_assertThisInitialized(_this));\n    _this.handleNextClick = _this.handleNextClick.bind(_assertThisInitialized(_this));\n    _this.handleCreateClick = _this.handleCreateClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(RoomListPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //this.getOnTime();\n      this.getRoom();\n      this.getPlayersCount();\n      this.getStatus(); //this.deleteEmptyRoom();\n      //console.log('show me the ' + this.state.player_count.length);\n      //create\n\n      this.subC = API.graphql(graphqlOperation(subtoRoomData)).subscribe({\n        next: function next(roomData) {\n          console.log('we got the playerscount ' + roomData.value.data.onCreateRoompage.players.length);\n          console.log('we got the data', roomData.value.data.onCreateRoompage.roomid); //players create sub\n\n          var newPlyersCount = roomData.value.data.onCreateRoompage.players.length;\n          var prevPlayersCount = _this2.state.player_count;\n          var updatedPlayersCount = [].concat(_toConsumableArray(prevPlayersCount), [newPlyersCount]);\n\n          _this2.setState({\n            player_count: updatedPlayersCount\n          }); //rid create sub\n\n\n          var newRoom = roomData.value.data.onCreateRoompage.roomid;\n          var prevRooms = _this2.state.rID;\n          var updatedRooms = [].concat(_toConsumableArray(prevRooms), [newRoom]);\n\n          _this2.setState({\n            rID: updatedRooms\n          });\n        }\n      });\n      this.subD = API.graphql(graphqlOperation(subtoRoomData3)).subscribe({\n        next: function next(roomData) {\n          var deleterID = roomData.value.data.onDeleteRoompage.roomid;\n          console.log('the missing one is ' + deleterID);\n\n          var updatedRooms = _this2.state.rID.filter(function (rooms) {\n            return rooms !== deleterID;\n          });\n\n          _this2.setState({\n            rID: updatedRooms\n          });\n        }\n      }); //update\n\n      this.subU = API.graphql(graphqlOperation(subtoRoomData2)).subscribe({\n        next: function next(roomData) {\n          //players update sub\n          var storeStatus = [];\n          console.log('we update the playerscount ' + roomData.value.data.onUpdateRoompage.players.length);\n          console.log('we update the playerscount ' + roomData.value.data.onUpdateRoompage.roomid);\n          var newPlyersCount = roomData.value.data.onUpdateRoompage.players.length;\n          var prevPlayersCount = _this2.state.player_count;\n          var newRoomID = roomData.value.data.onUpdateRoompage.roomid;\n          var roomlist = _this2.state.rID;\n          var index = roomlist.findIndex(function (num) {\n            return num === newRoomID;\n          });\n          console.log('show me the index ' + index);\n          var updatedPlayersCount = prevPlayersCount;\n          updatedPlayersCount[index] = newPlyersCount;\n\n          for (var i = 0; i < updatedPlayersCount.length; i++) {\n            if (updatedPlayersCount[i] < 4) {\n              storeStatus.push('open');\n            }\n\n            if (updatedPlayersCount[i] >= 4) {\n              storeStatus.push('close');\n            }\n          }\n\n          _this2.setState({\n            player_count: updatedPlayersCount,\n            status: storeStatus\n          });\n        }\n      }); //         let subscription;\n      //         (async () => {\n      //         subscription = client.subscribe({ query: gql(onCreateRoompage) }).subscribe({\n      //         next: data => {\n      //         console.log(data);\n      //         },\n      //         error: error => {\n      //         console.warn(error);\n      //         }\n      //         });\n      //         })();\n      // // Unsubscribe after 10 secs\n      //         setTimeout(() => {\n      //         subscription.unsubscribe();\n      //         }, 100000);\n      // this.creatRoomListener = API.graphql(graphqlOperation(onCreateRoompage)).subscribe({\n      //     next: roomData => {\n      //       const newRoom = roomData.data.onCreateRoompage;\n      //       console.log('sub test, hello ');\n      //       const updatedRoom = [newRoom];\n      //       this.setState({ rID: updatedRoom });\n      //     }\n      //   });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.subC.unsubscribe();\n      this.subU.unsubscribe(); //this.subD.unsubscribe();\n    } // getOnTime = async () => {\n    //     let subscription;\n    //     subscription = client.subscribe({ query: gql(onCreateRoompage) }).subscribe({\n    //         next: data => {\n    //         console.log('something happen');\n    //         },\n    //         error: error => {\n    //         console.warn(error);\n    //         }\n    //         });\n    //         setTimeout(() => {\n    //             subscription.unsubscribe();\n    //             }, 100000);\n    // }\n    //appsync get room (query)\n\n  }, {\n    key: \"handleProfileClick\",\n    value: function handleProfileClick(e) {\n      e.preventDefault();\n      this.props.history.push('/my-account');\n    }\n  }, {\n    key: \"handleGameRuleClick\",\n    value: function handleGameRuleClick(e) {\n      e.preventDefault();\n      this.props.history.push('/game-rule');\n    } //user allowed to enter the room only when the status of the room is not 'playing'\n\n  }, {\n    key: \"handleRoomClick\",\n    value: function handleRoomClick(e, i) {\n      var _this3 = this;\n\n      if (this.state.status[i] != 'close') {\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee7() {\n          var getUser, name, roomnum, getPlayers, prevPlayers, updatedPlayers, newThing;\n          return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.next = 2;\n                  return Auth.currentAuthenticatedUser();\n\n                case 2:\n                  getUser = _context7.sent;\n                  name = getUser.username;\n                  console.log('you click the room ' + typeof _this3.state.rID[i]);\n                  roomnum = _this3.state.rID[i];\n                  console.log(roomnum);\n                  console.log('test for who click into a room , user :' + name + ' into a room #' + _this3.state.rID[i]);\n                  _context7.next = 10;\n                  return API.graphql(graphqlOperation(queries.listRoompages));\n\n                case 10:\n                  getPlayers = _context7.sent;\n                  prevPlayers = getPlayers.data.listRoompages.items[i].players;\n                  updatedPlayers = [].concat(_toConsumableArray(prevPlayers), [name]);\n                  _context7.next = 15;\n                  return API.graphql(graphqlOperation(mutations.updateRoompage, {\n                    input: {\n                      roomid: roomnum,\n                      players: updatedPlayers\n                    }\n                  }));\n\n                case 15:\n                  newThing = _context7.sent;\n\n                case 16:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        }))();\n\n        var roomID = this.state.rID[i];\n        var path = {\n          pathname: '/room',\n          query: roomID\n        };\n        this.props.history.push(path);\n      } else {\n        alert('This room is full. Please select to enter another room.');\n      }\n    } //render the room button only when the room id is available\n    // renderRoom(i){\n    //     if (this.state.rID[i]){\n    //         return(\n    //             <button className=\"room-button\" onClick={(e) => {this.handleRoomClick(e,i)}}>\n    //                     Room {this.state.rID[i]} <br />\n    //                     {this.state.player_count[i]}/4 <br />\n    //                     {this.state.status[i]}\n    //             </button>\n    //         );\n    //     }\n    //     else {\n    //         return(\n    //             <button className=\"empty-room-button\"></button>\n    //         )\n    //     }\n    // }\n    //after clicked, check if the first room id in the current roomID array is equal to the first room id in the database\n\n  }, {\n    key: \"handlePrevClick\",\n    value: function handlePrevClick(e) {} //after clicked, get the last room id in the current roomID array\n    //then, filter the database and get 18 room ids that are after the last room id we get previously\n    //then, set the roomID array to the new room ids and re-render the components\n\n  }, {\n    key: \"handleNextClick\",\n    value: function handleNextClick(e) {}\n  }, {\n    key: \"handleCreateClick\",\n    value: function handleCreateClick(e) {\n      e.preventDefault();\n      var min = 1;\n      var max = 9999;\n      var random = Math.floor(Math.random() * (+max - +min)) + +min;\n      console.log(\"Random Number Generated : \" + random);\n      this.handleCreateRoom(random);\n      console.log('hello?');\n      var path = {\n        pathname: '/room',\n        query: random\n      };\n      this.props.history.push(path);\n      /*\n      for(let i = 0; i < this.state.status.length; i++) {\n          if(this.state.status[i] == 'closed') {\n              let temp_status = this.state.status;\n              temp_status[i] = 'open';\n              let temp_player_count = this.state.player_count;\n              temp_player_count[i] = 1;\n              this.setState({\n                  status: temp_status,\n                  player_count: temp_player_count\n              });\n      \n          }\n      }\n      */\n    }\n  }, {\n    key: \"handleRandomClick\",\n    value: function handleRandomClick(e) {}\n  }, {\n    key: \"_renderRoom\",\n    value: function _renderRoom() {\n      var _this4 = this;\n\n      return Object.entries(this.state.rID).map(function (r, i) {\n        return React.createElement(\"div\", {\n          className: \"table-row\",\n          key: i,\n          value: i,\n          onClick: function onClick(e) {\n            _this4.handleRoomClick(e, i);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 444\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 445\n          },\n          __self: this\n        }, React.createElement(\"th\", {\n          className: \"id\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 446\n          },\n          __self: this\n        }, _this4.state.rID[i]), React.createElement(\"th\", {\n          className: \"count\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 447\n          },\n          __self: this\n        }, _this4.state.player_count[i], \"/4\"), React.createElement(\"th\", {\n          className: \"status\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 448\n          },\n          __self: this\n        }, _this4.state.status[i])));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"room-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"room-list-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459\n        },\n        __self: this\n      }, \"SWITCH\"), React.createElement(\"button\", {\n        className: \"game-rule-button\",\n        onClick: this.handleGameRuleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460\n        },\n        __self: this\n      }, \"Game Rule\"), React.createElement(\"button\", {\n        className: \"profile-button\",\n        onClick: this.handleProfileClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461\n        },\n        __self: this\n      }, \"My Account\"), React.createElement(\"img\", {\n        src: img,\n        className: \"room-img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"room-num\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464\n        },\n        __self: this\n      }, \"Room #: \", React.createElement(\"input\", {\n        type: \"number\",\n        className: \"room-num-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"ENTER\",\n        className: \"enter-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"create-button\",\n        onClick: this.handleCreateClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467\n        },\n        __self: this\n      }, \"Create New Room\"), React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        className: \"id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471\n        },\n        __self: this\n      }, \"Room ID\"), React.createElement(\"th\", {\n        className: \"count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472\n        },\n        __self: this\n      }, \"Player Number\"), React.createElement(\"th\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        },\n        __self: this\n      }, \"Status\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        },\n        __self: this\n      }, this._renderRoom())), React.createElement(\"div\", {\n        className: \"block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return RoomListPage;\n}(React.Component);\n\nexport default withRouter(RoomListPage);","map":{"version":3,"sources":["/Volumes/jariclnnf/the-switch-game/switch/src/Pages/RoomListPage.js"],"names":["React","Component","img","RoomPage","GameRulePage","ProfilePage","withRouter","Auth","Amplify","API","graphqlOperation","queries","onCreateRoompage","mutations","AWSAppSyncClient","AUTH_TYPE","aws_config","gql","client","url","aws_appsync_graphqlEndpoint","region","aws_appsync_region","auth","type","API_KEY","apiKey","aws_appsync_apiKey","subtoRoomData","subtoRoomData2","subtoRoomData3","RoomListPage","getRoom","storeRoom","graphql","listRoompages","result","i","data","items","length","console","log","roomid","push","setState","rID","state","getPlayersCount","playercount","obj","players","count","property","Object","prototype","hasOwnProperty","call","props","player_count","roomCount","getStatus","storeStatus","status","deleteEmptyRoom","num","deleteRoompage","input","handleRanDomRoom","handleCreateRoom","random","currentAuthenticatedUser","getUser","name","username","createRoompage","Number","handleProfileClick","bind","handleGameRuleClick","handleRoomClick","handlePrevClick","handleNextClick","handleCreateClick","subC","subscribe","next","roomData","value","newPlyersCount","prevPlayersCount","updatedPlayersCount","newRoom","prevRooms","updatedRooms","subD","deleterID","onDeleteRoompage","filter","rooms","subU","onUpdateRoompage","newRoomID","roomlist","index","findIndex","unsubscribe","e","preventDefault","history","roomnum","getPlayers","prevPlayers","updatedPlayers","updateRoompage","newThing","roomID","path","pathname","query","alert","min","max","Math","floor","entries","map","r","_renderRoom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport img from '../img/background.png';\nimport './RoomListPage.css';\nimport RoomPage from './RoomPage';\nimport GameRulePage from './GameRulePage';\nimport ProfilePage from './ProfilePage';\nimport { withRouter } from \"react-router-dom\";\nimport { Auth } from 'aws-amplify';\nimport Amplify, { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from './phaser/../../graphql/queries';\nimport {onCreateRoompage} from'./phaser/../../graphql/subscriptions';\nimport * as mutations from '../graphql/mutations';\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport aws_config from '../aws-exports';\nimport gql from 'graphql-tag';\n\n\nconst client = new AWSAppSyncClient({\n    url: aws_config.aws_appsync_graphqlEndpoint,\n    region: aws_config.aws_appsync_region,\n    auth: {\n      type: AUTH_TYPE.API_KEY,\n      apiKey: aws_config.aws_appsync_apiKey,\n    }\n  });\n\n  const subtoRoomData = `\n  subscription{\n    onCreateRoompage{\n        roomid players\n    }\n  }\n  `\n  const subtoRoomData2 = `\n  subscription{\n    onUpdateRoompage{\n        roomid players\n    }\n  }\n  `\n  const subtoRoomData3 = `\n  subscription{\n    onDeleteRoompage{\n        roomid players\n    }\n  }\n  `\n  \n\nclass RoomListPage extends React.Component {\n    constructor(){\n        super();\n        this.state={\n            /* \n            ************************\n            READ!!!!!!\n            ***********************\n\n            roomID -> rID, I am using roomID in DB, and these 2 roomID mess me up\n\n            */\n            rID: '',\n            player_count: [],\n            roomCount: Number,\n            status: ''\n            \n            \n        };\n        this.handleProfileClick = this.handleProfileClick.bind(this);\n        this.handleGameRuleClick = this.handleGameRuleClick.bind(this);\n        this.handleRoomClick = this.handleRoomClick.bind(this);\n        this.handlePrevClick = this.handlePrevClick.bind(this);\n        this.handleNextClick = this.handleNextClick.bind(this);\n        this.handleCreateClick=this.handleCreateClick.bind(this);\n    }\n           \ncomponentDidMount() {\n        //this.getOnTime();\n        this.getRoom();\n        this.getPlayersCount();\n        this.getStatus();\n\n        //this.deleteEmptyRoom();\n        //console.log('show me the ' + this.state.player_count.length);\n\n\n        //create\n        this.subC = API.graphql(\n            graphqlOperation(subtoRoomData)\n        ).subscribe({\n            next: (roomData) =>{\n                console.log('we got the playerscount ' + roomData.value.data.onCreateRoompage.players.length);\n                console.log('we got the data', roomData.value.data.onCreateRoompage.roomid);\n                //players create sub\n                const newPlyersCount = roomData.value.data.onCreateRoompage.players.length;\n                const prevPlayersCount = this.state.player_count;\n                const updatedPlayersCount = [...prevPlayersCount,newPlyersCount];\n                this.setState({player_count : updatedPlayersCount});\n                //rid create sub\n                const newRoom = roomData.value.data.onCreateRoompage.roomid;\n                const prevRooms = this.state.rID;\n                const updatedRooms = [...prevRooms,newRoom];\n                this.setState({rID : updatedRooms });\n            }\n        });\n        this.subD = API.graphql(\n            graphqlOperation(subtoRoomData3)\n        ).subscribe({\n            next: (roomData) =>{\n            const deleterID = roomData.value.data.onDeleteRoompage.roomid;\n            console.log('the missing one is '+deleterID);\n            const updatedRooms = this.state.rID.filter(rooms => rooms !== deleterID)\n            this.setState({rID : updatedRooms});\n            }\n        })\n        //update\n        this.subU = API.graphql(\n            graphqlOperation(subtoRoomData2)\n        ).subscribe({\n            next: (roomData) =>{\n                //players update sub\n                const storeStatus = [];\n                console.log('we update the playerscount ' + roomData.value.data.onUpdateRoompage.players.length);\n                console.log('we update the playerscount ' + roomData.value.data.onUpdateRoompage.roomid);\n                const newPlyersCount = roomData.value.data.onUpdateRoompage.players.length;\n                const prevPlayersCount = this.state.player_count;\n                const newRoomID = roomData.value.data.onUpdateRoompage.roomid;\n                const roomlist = this.state.rID;\n                const index = roomlist.findIndex(num => num === newRoomID);\n                console.log('show me the index ' + index);\n                const updatedPlayersCount = prevPlayersCount;\n                updatedPlayersCount[index] = newPlyersCount; \n\n                for(let i=0;i<updatedPlayersCount.length;i++){\n                    if(updatedPlayersCount[i]<4){\n                        storeStatus.push('open');\n                    }\n                    if(updatedPlayersCount[i]>=4){\n                        storeStatus.push('close');\n                    }\n                }\n                \n                this.setState({player_count : updatedPlayersCount,\n                                status : storeStatus});\n\n            }\n        });\n\n\n       \n\n\n\n\n//         let subscription;\n\n//         (async () => {\n//         subscription = client.subscribe({ query: gql(onCreateRoompage) }).subscribe({\n//         next: data => {\n//         console.log(data);\n//         },\n//         error: error => {\n//         console.warn(error);\n//         }\n//         });\n//         })();\n\n// // Unsubscribe after 10 secs\n//         setTimeout(() => {\n//         subscription.unsubscribe();\n//         }, 100000);\n        // this.creatRoomListener = API.graphql(graphqlOperation(onCreateRoompage)).subscribe({\n        //     next: roomData => {\n        //       const newRoom = roomData.data.onCreateRoompage;\n        //       console.log('sub test, hello ');\n        //       const updatedRoom = [newRoom];\n        //       this.setState({ rID: updatedRoom });\n        //     }\n        //   });\n  }\n   componentWillUnmount() {\n     this.subC.unsubscribe();\n     this.subU.unsubscribe();\n     //this.subD.unsubscribe();\n\n   }\n\n// getOnTime = async () => {\n//     let subscription;\n//     subscription = client.subscribe({ query: gql(onCreateRoompage) }).subscribe({\n//         next: data => {\n//         console.log('something happen');\n//         },\n//         error: error => {\n//         console.warn(error);\n//         }\n//         });\n//         setTimeout(() => {\n//             subscription.unsubscribe();\n//             }, 100000);\n// }\n\n\n\n//appsync get room (query)\ngetRoom = async () => {\n    var storeRoom = [];\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\n        console.log(result.data.listRoompages.items[i].roomid);\n        storeRoom.push(result.data.listRoompages.items[i].roomid);\n        }\n    this.setState({rID : storeRoom });\n    console.log('TEST FOR QUERY ' + this.state.rID);\n    }\n\ngetPlayersCount = async ()=>{\n    var playercount = [];\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\n        const obj = result.data.listRoompages.items[i].players;\n        var count = 0;\n        for (var property in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, property)) {\n            count++;\n        }\n    }\n         console.log('show the obj ' + count);\n        playercount.push(count);\n        \n    }\n    \n    this.setState(function (state, props) {\n        return {\n         player_count: playercount\n        }\n       });\n    //this.setState({player_count:playercount});\n    const roomCount = this.state.player_count.length;\n\n    console.log('TEST FOR playercount ' + this.state.player_count.length);\n    console.log('show the roomCount ' + roomCount);\n    \n}\n\n\n//appsync get status\ngetStatus = async() => {\n    var storeStatus = [];\n    var playercount = [];\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\n        const obj = result.data.listRoompages.items[i].players;\n        var count = 0;\n        for (var property in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, property)) {\n            count++;\n        }\n    }\n         console.log('show the obj ' + count);\n        playercount.push(count);\n        \n    }\n    console.log('get status check '+playercount);\n    for(let i=0;i<playercount.length;i++){\n        if(playercount[i]<4){\n            storeStatus.push('open');\n        }\n        if(playercount[i]>=4){\n            storeStatus.push('close');\n        }\n    }\n    this.setState({status : storeStatus});\n\n}  \n\n\ndeleteEmptyRoom = async ()=>{\nthis.getPlayersCount();\n\nconsole.log('gogogo  '+this.state.player_count.length);\nfor(let i=0;i<this.state.player_count.length;i++){\n    console.log('hello');\n    const num = this.state.rID[i];\n    if(this.state.player_count[i] == 0){\n        const result = await API.graphql(graphqlOperation(mutations.deleteRoompage,{\n            input:{\n                roomid : num\n            }\n        }));\n        console.log('Delete room ' + num);\n    }\n}\n}\n\n\n//appsync get the playerCount in each room \n// getPlayerCount = async () =>{\n//     var storePlayerCount = [];\n//     const result = await API.graphql(graphqlOperation(queries.getRoompage, {roomid : rID});\n// }\nhandleRanDomRoom = async () =>{\n    var storeRoom = [];\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\n        console.log(result.data.listRoompages.items[i].roomid);\n        storeRoom.push(result.data.listRoompages.items[i].roomid);\n        }\n    \n   \n}\n\nhandleCreateRoom = async (random) =>{\n    \n    const getUser = await Auth.currentAuthenticatedUser();\n                const name = getUser.username;\n    \n    const result = await API.graphql(graphqlOperation(mutations.createRoompage,{\n        input : {\n            roomid : random,\n            players : name\n        }\n\n    }));\n}\n\n\n    handleProfileClick(e) {\n        e.preventDefault();\n        this.props.history.push('/my-account');\n    }\n\n    handleGameRuleClick(e) {\n        e.preventDefault();\n        this.props.history.push('/game-rule');\n    }\n    \n    //user allowed to enter the room only when the status of the room is not 'playing'\n    handleRoomClick(e, i) {\n        if(this.state.status[i] != 'close'){\n            (async () => {\n                //get current user name\n                const getUser = await Auth.currentAuthenticatedUser();\n                const name = getUser.username;\n                console.log('you click the room ' + typeof(this.state.rID[i]));\n                var roomnum = this.state.rID[i];\n                console.log(roomnum);\n                console.log('test for who click into a room , user :' + name + ' into a room #' +this.state.rID[i]);\n                const getPlayers = await API.graphql(graphqlOperation(queries.listRoompages));\n                const prevPlayers = getPlayers.data.listRoompages.items[i].players;\n                const updatedPlayers = [...prevPlayers,name];\n                const newThing = await API.graphql(graphqlOperation(mutations.updateRoompage, \n                    {\n                        input:{\n                            roomid : roomnum,\n                            players : updatedPlayers\n                        }\n                    }));\n            })();\n                const roomID = this.state.rID[i];\n                \n                let path = {\n                    pathname: '/room',\n                    query: roomID,\n                }\n                this.props.history.push(path);\n        }\n        else {\n            alert('This room is full. Please select to enter another room.');\n        }\n    }\n\n    //render the room button only when the room id is available\n    // renderRoom(i){\n    //     if (this.state.rID[i]){\n    //         return(\n    //             <button className=\"room-button\" onClick={(e) => {this.handleRoomClick(e,i)}}>\n    //                     Room {this.state.rID[i]} <br />\n    //                     {this.state.player_count[i]}/4 <br />\n    //                     {this.state.status[i]}\n    //             </button>\n    //         );\n    //     }\n    //     else {\n    //         return(\n    //             <button className=\"empty-room-button\"></button>\n    //         )\n    //     }\n    // }\n\n    //after clicked, check if the first room id in the current roomID array is equal to the first room id in the database\n    handlePrevClick(e) {\n\n    }\n\n    //after clicked, get the last room id in the current roomID array\n    //then, filter the database and get 18 room ids that are after the last room id we get previously\n    //then, set the roomID array to the new room ids and re-render the components\n    handleNextClick(e) {\n\n    }\n    \n\n    handleCreateClick (e){\n        e.preventDefault();\n        var min=1; \n        var max=9999;  \n        var random =Math.floor(Math.random() * (+max - +min)) + +min; \n        console.log(\"Random Number Generated : \" + random ); \n        this.handleCreateRoom(random);\n        console.log('hello?');\n        let path = {\n            pathname: '/room',\n            query: random,\n        }\n        this.props.history.push(path);\n        \n        \n        /*\n        for(let i = 0; i < this.state.status.length; i++) {\n            if(this.state.status[i] == 'closed') {\n                let temp_status = this.state.status;\n                temp_status[i] = 'open';\n                let temp_player_count = this.state.player_count;\n                temp_player_count[i] = 1;\n                this.setState({\n                    status: temp_status,\n                    player_count: temp_player_count\n                });\n        \n            }\n        }\n        */\n       \n    }\n\n    handleRandomClick(e) {\n\n    }\n\n    _renderRoom(){\n        return Object.entries(this.state.rID).map((r, i) => {\n            return (\n            <div className=\"table-row\" key={i} value={i} onClick={(e) => {this.handleRoomClick(e,i)}}>\n                <tr>\n                    <th className=\"id\">{this.state.rID[i]}</th>\n                    <th className=\"count\">{this.state.player_count[i]}/4</th>\n                    <th className=\"status\">{this.state.status[i]}</th>\n                </tr>\n            </div>\n            )\n        })\n    }\n\n\n    render() {\n        return (\n            <div className=\"room-list\">\n            <h1 className=\"room-list-header\">SWITCH</h1>\n                <button className=\"game-rule-button\" onClick={this.handleGameRuleClick}>Game Rule</button>\n                <button className=\"profile-button\" onClick={this.handleProfileClick}>My Account</button>\n                <img src={img} className=\"room-img\" />\n                <form>\n                    <label className=\"room-num\">Room #: <input type=\"number\" className=\"room-num-input\" /></label>\n                    <input type=\"submit\" value=\"ENTER\" className=\"enter-button\" />\n                </form>\n                <button className=\"create-button\" onClick={this.handleCreateClick}>Create New Room</button>\n                <table>\n                    <thead>\n                        <tr>\n                            <th className=\"id\">Room ID</th>\n                            <th className=\"count\">Player Number</th>\n                            <th className=\"status\">Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this._renderRoom()}\n                            \n                       \n                    </tbody>\n                </table>\n                <div className=\"block\"></div>\n        </div>\n        );\n    }\n}\n\n\n\n\n\nexport default withRouter(RoomListPage);\n\n"]},"metadata":{},"sourceType":"module"}