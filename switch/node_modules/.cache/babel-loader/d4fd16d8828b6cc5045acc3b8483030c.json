{"ast":null,"code":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2019 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nvar ArcadeSprite = require('./ArcadeSprite');\n\nvar Class = require('../../utils/Class');\n\nvar CONST = require('./const');\n\nvar Group = require('../../gameobjects/group/Group');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\n * @classdesc\n * An Arcade Physics Static Group object.\n *\n * All Game Objects created by this Group will automatically be given static Arcade Physics bodies.\n *\n * Its dynamic counterpart is {@link Phaser.Physics.Arcade.Group}.\n *\n * @class StaticGroup\n * @extends Phaser.GameObjects.Group\n * @memberof Phaser.Physics.Arcade\n * @constructor\n * @since 3.0.0\n *\n * @param {Phaser.Physics.Arcade.World} world - The physics simulation.\n * @param {Phaser.Scene} scene - The scene this group belongs to.\n * @param {(Phaser.GameObjects.GameObject[]|Phaser.Types.GameObjects.Group.GroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\n * @param {Phaser.Types.GameObjects.Group.GroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig} [config] - Settings for this group.\n */\n\n\nvar StaticPhysicsGroup = new Class({\n  Extends: Group,\n  initialize: function StaticPhysicsGroup(world, scene, children, config) {\n    if (!children && !config) {\n      config = {\n        createCallback: this.createCallbackHandler,\n        removeCallback: this.removeCallbackHandler,\n        createMultipleCallback: this.createMultipleCallbackHandler,\n        classType: ArcadeSprite\n      };\n    } else if (IsPlainObject(children)) {\n      //  children is a plain object, so swizzle them:\n      config = children;\n      children = null;\n      config.createCallback = this.createCallbackHandler;\n      config.removeCallback = this.removeCallbackHandler;\n      config.createMultipleCallback = this.createMultipleCallbackHandler;\n      config.classType = ArcadeSprite;\n    } else if (Array.isArray(children) && IsPlainObject(children[0])) {\n      //  children is an array of plain objects\n      config = children;\n      children = null;\n      config.forEach(function (singleConfig) {\n        singleConfig.createCallback = this.createCallbackHandler;\n        singleConfig.removeCallback = this.removeCallbackHandler;\n        singleConfig.createMultipleCallback = this.createMultipleCallbackHandler;\n        singleConfig.classType = ArcadeSprite;\n      });\n    }\n    /**\n     * The physics simulation.\n     *\n     * @name Phaser.Physics.Arcade.StaticGroup#world\n     * @type {Phaser.Physics.Arcade.World}\n     * @since 3.0.0\n     */\n\n\n    this.world = world;\n    /**\n     * The scene this group belongs to.\n     *\n     * @name Phaser.Physics.Arcade.StaticGroup#physicsType\n     * @type {integer}\n     * @default Phaser.Physics.Arcade.STATIC_BODY\n     * @since 3.0.0\n     */\n\n    this.physicsType = CONST.STATIC_BODY;\n    Group.call(this, scene, children, config);\n  },\n\n  /**\n   * Adds a static physics body to the new group member (if it lacks one) and adds it to the simulation.\n   *\n   * @method Phaser.Physics.Arcade.StaticGroup#createCallbackHandler\n   * @since 3.0.0\n   *\n   * @param {Phaser.GameObjects.GameObject} child - The new group member.\n   *\n   * @see Phaser.Physics.Arcade.World#enableBody\n   */\n  createCallbackHandler: function createCallbackHandler(child) {\n    if (!child.body) {\n      this.world.enableBody(child, CONST.STATIC_BODY);\n    }\n  },\n\n  /**\n   * Disables the group member's physics body, removing it from the simulation.\n   *\n   * @method Phaser.Physics.Arcade.StaticGroup#removeCallbackHandler\n   * @since 3.0.0\n   *\n   * @param {Phaser.GameObjects.GameObject} child - The group member being removed.\n   *\n   * @see Phaser.Physics.Arcade.World#disableBody\n   */\n  removeCallbackHandler: function removeCallbackHandler(child) {\n    if (child.body) {\n      this.world.disableBody(child);\n    }\n  },\n\n  /**\n   * Refreshes the group.\n   *\n   * @method Phaser.Physics.Arcade.StaticGroup#createMultipleCallbackHandler\n   * @since 3.0.0\n   *\n   * @param {Phaser.GameObjects.GameObject[]} entries - The newly created group members.\n   *\n   * @see Phaser.Physics.Arcade.StaticGroup#refresh\n   */\n  createMultipleCallbackHandler: function createMultipleCallbackHandler() {\n    this.refresh();\n  },\n\n  /**\n   * Resets each Body to the position of its parent Game Object.\n   * Body sizes aren't changed (use {@link Phaser.Physics.Arcade.Components.Enable#refreshBody} for that).\n   *\n   * @method Phaser.Physics.Arcade.StaticGroup#refresh\n   * @since 3.0.0\n   *\n   * @return {Phaser.Physics.Arcade.StaticGroup} This group.\n   *\n   * @see Phaser.Physics.Arcade.StaticBody#reset\n   */\n  refresh: function refresh() {\n    var children = this.children.entries;\n\n    for (var i = 0; i < children.length; i++) {\n      children[i].body.reset();\n    }\n\n    return this;\n  }\n});\nmodule.exports = StaticPhysicsGroup;","map":null,"metadata":{},"sourceType":"script"}