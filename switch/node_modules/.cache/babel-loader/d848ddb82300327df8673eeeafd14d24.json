{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport Phaser from 'phaser';\nimport { Blank } from '../objects/Blank';\nimport { Player } from '../objects/Player';\nimport { Card } from '../objects/Card';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport Amplify, { Auth } from 'aws-amplify';\nimport * as mutations from '../../../graphql/mutations';\nimport * as subscriptions from '../../../graphql/subscriptions';\nimport * as queries from '../../../graphql/queries';\nimport { ConsoleLogger } from '@aws-amplify/core';\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport aws_config from '../../../aws-exports';\nimport gql from 'graphql-tag';\nvar client = new AWSAppSyncClient({\n  url: aws_config.aws_appsync_graphqlEndpoint,\n  region: aws_config.aws_appsync_region,\n  auth: {\n    type: AUTH_TYPE.API_KEY,\n    apiKey: aws_config.aws_appsync_apiKey\n  }\n});\nexport var GameBoard =\n/*#__PURE__*/\nfunction (_Phaser$Scene) {\n  _inherits(GameBoard, _Phaser$Scene);\n\n  function GameBoard() {\n    _classCallCheck(this, GameBoard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GameBoard).call(this, {\n      key: 'GameBoard'\n    }));\n  }\n\n  _createClass(GameBoard, [{\n    key: \"create\",\n    value: function create() {\n      this.gameBoard = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]; //display board\n\n      var boardbg = this.add.image(400, 80, 'boardbg');\n      boardbg.setOrigin(0, 0).setScale(2.8, 2.8);\n      var x_pos1 = 0;\n      var y_pos1 = 0;\n\n      for (var i = 0; i < 6; i++) {\n        for (var j = 0; j < 6; j++) {\n          this.blank = new Blank(this, 405 + x_pos1, 85 + y_pos1, 'blank').data.set('card_number', 53);\n          x_pos1 += 65;\n        }\n\n        y_pos1 += 65;\n        x_pos1 = 0;\n      } //    let card_number=0;\n      //    let nums=[],\n      // \t   ranNums = [];\n      //   for(var k=0;k<52;k++){\n      //    nums.push(k);\n      // \t}\n      //    let m = nums.length,\n      // \t   n = 0;\n      //  while (m--) {\n      //    n = Math.floor(Math.random() * (m+1));\n      //    ranNums.push(nums[n]);\n      //    nums.splice(n,1);\n      //  }\n\n\n      var card_number = 0;\n      var ranNums = [3, 7, 15, 33, 25, 46, 8, 9, 28, 53, 11, 6, 34, 36, 21, 23, 41, 19, 16, 1, 47, 29, 51, 39, 2, 25, 27, 40, 30, 37, 10, 22, 10, 20, 50, 38, 26]; //display board\n\n      var x_pos = 0;\n      var y_pos = 0;\n      this.cardSet = [];\n\n      for (var i = 0; i < 6; i++) {\n        for (var j = 0; j < 6; j++) {\n          var generatecard = ranNums[card_number];\n          this.card = new Card(this, 405 + x_pos, 85 + y_pos, 'cards', generatecard).setOrigin(0, 0).setInteractive().setDataEnabled();\n          this.cardSet.push(this.card);\n          this.card.data.set('card_number', card_number);\n          x_pos += 65;\n          card_number++;\n        }\n\n        y_pos += 65;\n        x_pos = 0;\n      }\n\n      var player1 = new Player(this, 405, 85, 'chess_red', 1).setOrigin(0, 0);\n      var player2 = new Player(this, 730, 85, 'chess_blue', 2).setOrigin(0, 0);\n      this.player = [];\n      this.player.push(player1);\n      this.player.push(player2); //need user name array\n\n      this.userName = ['switch', 'noviah']; //initalize the data\n\n      this.initCardData(-1, 405, 85, 'switch', 0);\n      this.initCardData(-1, 730, 85, 'noviah', 0);\n      this.seat = 0;\n      this.CardLeft = 36;\n      this.arrange = 0;\n      this.clickedBox(ranNums);\n    }\n  }, {\n    key: \"checkUserInfo\",\n    value: function checkUserInfo(cardNum, name, x, y) {\n      var _this = this;\n\n      Auth.currentUserInfo().then(function (userInfo) {\n        var username = userInfo.username;\n\n        if (name == username) {\n          _this.updateCardData(cardNum, x, y, name, 1);\n\n          _this.seat++;\n        } else {\n          console.log('update');\n        }\n      });\n    } //************************************************ */\n    //the thing you need\n    //*********************************************** */\n    // async round(x,y){\n    // \t(async () => { \n    // \t\tawait client.hydrated();\n    // \t\t//const getUser = await Auth.currentAuthenticatedUser();\n    // \t\tvar nameWeGot1 = 'switch';\n    // \t\tconst result1 = await client.query({\n    // \t\t\tquery: gql(queries.getQw),\n    // \t\t\tvariables: {\n    // \t\t\t\tusername: nameWeGot1\n    // \t\t\t},\n    // \t\t\tfetchPolicy: 'network-only',\n    // \t\t});\n    // \t\tconst seat=result1.data.getQw.seat\n    // \t\tconsole.log('the recent seat'+seat)\n    // \t\t if(x==this.player[seat%2].x||y==this.player[seat%2].y){\n    // \t\t\tthis.checkUserInfo(this.userName[seat%2],x,y,seat)\n    // \t\t }\n    // \t})();\n    // }\n\n  }, {\n    key: \"initCardData\",\n    value: function () {\n      var _initCardData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(card, x, y, theusername, theSeat) {\n        var cardV, xV, yV, name, thething, newThing;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cardV = card;\n                console.log(cardV);\n                xV = x;\n                console.log(\"x : \" + xV);\n                yV = y;\n                console.log(\"y : \" + yV);\n                name = theusername;\n                console.log('your name : ' + name);\n                thething = {\n                  username: name,\n                  whichCard: cardV,\n                  x: xV,\n                  y: yV,\n                  seat: theSeat\n                };\n                _context.next = 11;\n                return API.graphql(graphqlOperation(mutations.updateQw, {\n                  input: thething\n                }));\n\n              case 11:\n                newThing = _context.sent;\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function initCardData(_x, _x2, _x3, _x4, _x5) {\n        return _initCardData.apply(this, arguments);\n      }\n\n      return initCardData;\n    }()\n  }, {\n    key: \"updateCardData\",\n    value: function () {\n      var _updateCardData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(card, x, y, name, theSeat) {\n        var cardV, xV, yV, thething, newThing;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cardV = card;\n                console.log(cardV);\n                xV = x;\n                console.log(\"x : \" + xV);\n                yV = y;\n                console.log(\"y : \" + yV);\n                console.log('your name : ' + name);\n                thething = {\n                  username: name,\n                  whichCard: cardV,\n                  x: xV,\n                  y: yV,\n                  seat: theSeat\n                };\n                _context2.next = 10;\n                return API.graphql(graphqlOperation(mutations.updateQw, {\n                  input: thething\n                }));\n\n              case 10:\n                newThing = _context2.sent;\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function updateCardData(_x6, _x7, _x8, _x9, _x10) {\n        return _updateCardData.apply(this, arguments);\n      }\n\n      return updateCardData;\n    }() //click the card and make it move\n\n  }, {\n    key: \"clickedBox\",\n    value: function clickedBox(ranNums) {\n      var _this2 = this;\n\n      this.input.on('gameobjectdown', function (pointer, gameObject) {\n        for (var i = 0; i < 36; i++) {\n          if (_this2.gameBoard[i] == i) {\n            if (gameObject.x == _this2.player[_this2.seat].x || gameObject.y == _this2.player[_this2.seat].y) {\n              if (gameObject.data.get('card_number') == i) {\n                _this2.checkUserInfo(i, _this2.userName[_this2.seat], gameObject.x, gameObject.y);\n\n                _this2.CardLeft--;\n                _this2.arrange += 20;\n                break;\n              } else if (gameObject.data.get('card_number') == 53) {\n                _this2.checkUserInfo(-1, _this2.userName[_this2.seat], gameObject.x, gameObject.y);\n\n                break;\n              }\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"updateScreen\",\n    value: function () {\n      var _updateScreen = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee3() {\n                  var nameWeGot1, result1, nameWeGot2, result2, x1, y1, x2, y2;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          //await client.hydrated();\n                          nameWeGot1 = _this3.userName[0];\n                          _context3.next = 3;\n                          return client.query({\n                            query: gql(queries.getQw),\n                            variables: {\n                              username: nameWeGot1\n                            },\n                            fetchPolicy: 'network-only'\n                          });\n\n                        case 3:\n                          result1 = _context3.sent;\n                          nameWeGot2 = _this3.userName[1];\n                          _context3.next = 7;\n                          return client.query({\n                            query: gql(queries.getQw),\n                            variables: {\n                              username: nameWeGot2\n                            },\n                            fetchPolicy: 'network-only'\n                          });\n\n                        case 7:\n                          result2 = _context3.sent;\n                          x1 = result1.data.getQw.x;\n                          y1 = result1.data.getQw.y;\n                          x2 = result2.data.getQw.x;\n                          y2 = result2.data.getQw.y;\n\n                          _this3.player[0].setX(x1);\n\n                          _this3.player[0].setY(y1);\n\n                          _this3.player[1].setX(x2);\n\n                          _this3.player[1].setY(y2); // if(result1.data.getQw.seat==1){\n                          // \tthis.updateCardData(-1,result1.data.getQw.x,result1.data.getQw.y,nameWeGot1,0)\n                          // \t this.player[0].setX(x1)\n                          // \t this.player[0].setY(y1)\n\n\n                          console.log('update the player1');\n\n                          if (result1.data.getQw.whichCard != -1) {\n                            _this3.cardSet[result1.data.getQw.whichCard].setX(20 + _this3.arrange);\n\n                            _this3.cardSet[result1.data.getQw.whichCard].setY(85);\n\n                            _this3.updateCardData(-1, result1.data.getQw.x, result1.data.getQw.y, nameWeGot1, 0);\n                          } // }\n                          // if(result2.data.getQw.seat==1){\n                          // \tthis.updateCardData(-1,result2.data.getQw.x,result2.data.getQw.y,nameWeGot2,0)\n                          // \tthis.player[1].setX(x2)\n                          // \tthis.player[1].setY(y2)\n                          // console.log('update the player2')\n                          // this.seat=0\n\n\n                          if (result2.data.getQw.whichCard != -1) {\n                            console.log('move the card');\n\n                            _this3.cardSet[result2.data.getQw.whichCard].setX(900 + _this3.arrange);\n\n                            _this3.cardSet[result2.data.getQw.whichCard].setY(85);\n\n                            _this3.updateCardData(-1, result2.data.getQw.x, result2.data.getQw.y, nameWeGot2, 0);\n                          } //}\n\n\n                        case 19:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))();\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function updateScreen() {\n        return _updateScreen.apply(this, arguments);\n      }\n\n      return updateScreen;\n    }()\n  }, {\n    key: \"update\",\n    value: function update(time, delta) {\n      this.updateScreen();\n\n      if (this.CardLeft == 0) {\n        this.newBoard = this.add.image(400, 80, 'boardbg');\n        this.newBoard.setOrigin(0, 0).setScale(2.8, 2.8);\n        this.text = this.add.text(500, 200, 'game over').setScale(3, 3);\n      }\n    }\n  }]);\n\n  return GameBoard;\n}(Phaser.Scene);","map":{"version":3,"sources":["C:\\Users\\shirl\\Documents\\GitHub\\the-switch-game\\switch\\src\\Pages\\phaser\\scenes\\GameBoard.js"],"names":["Phaser","Blank","Player","Card","API","graphqlOperation","Amplify","Auth","mutations","subscriptions","queries","ConsoleLogger","AWSAppSyncClient","AUTH_TYPE","aws_config","gql","client","url","aws_appsync_graphqlEndpoint","region","aws_appsync_region","auth","type","API_KEY","apiKey","aws_appsync_apiKey","GameBoard","key","gameBoard","boardbg","add","image","setOrigin","setScale","x_pos1","y_pos1","i","j","blank","data","set","card_number","ranNums","x_pos","y_pos","cardSet","generatecard","card","setInteractive","setDataEnabled","push","player1","player2","player","userName","initCardData","seat","CardLeft","arrange","clickedBox","cardNum","name","x","y","currentUserInfo","then","userInfo","username","updateCardData","console","log","theusername","theSeat","cardV","xV","yV","thething","whichCard","graphql","updateQw","input","newThing","on","pointer","gameObject","get","checkUserInfo","nameWeGot1","query","getQw","variables","fetchPolicy","result1","nameWeGot2","result2","x1","y1","x2","y2","setX","setY","time","delta","updateScreen","newBoard","text","Scene"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nimport {Blank} from '../objects/Blank';\r\nimport {Player} from '../objects/Player';\r\nimport {Card} from '../objects/Card';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport Amplify, { Auth } from 'aws-amplify';\r\nimport * as mutations from '../../../graphql/mutations';\r\nimport * as subscriptions from '../../../graphql/subscriptions'\r\nimport * as queries from '../../../graphql/queries'\r\n\r\nimport { ConsoleLogger } from '@aws-amplify/core';\r\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\r\nimport aws_config from '../../../aws-exports';\r\nimport gql from 'graphql-tag';\r\n\r\nconst client = new AWSAppSyncClient({\r\n  url: aws_config.aws_appsync_graphqlEndpoint,\r\n  region: aws_config.aws_appsync_region,\r\n  auth: {\r\n    type: AUTH_TYPE.API_KEY,\r\n    apiKey: aws_config.aws_appsync_apiKey,\r\n  }\r\n});\r\n\r\nexport class GameBoard extends Phaser.Scene {\r\n\tconstructor() {\r\n\t\tsuper({\r\n\t\t\tkey: 'GameBoard',\r\n\t\t});\r\n\t\t\r\n\r\n\t}\r\n\t\r\n\r\n\r\n\tcreate() {\r\n\r\n\t\tthis.gameBoard = [0,1,2,3,4,5,6,7,8,9,10,\r\n\t\t\t11,12,13,14,15,16,17,18,19,20,21,22,\r\n\t\t\t23,24,25,26,27,28,29,30,31,32,33,34,35,36];\r\n\t\t\r\n        //display board\r\n\t\tlet boardbg = this.add.image(400, 80, 'boardbg');\r\n\t\tboardbg.setOrigin(0, 0).setScale(2.8,2.8);\r\n\t\tlet x_pos1=0;\r\n\t\tlet y_pos1=0;\r\n\t\tfor(var i=0;i<6;i++){\r\n\t\t\tfor(var j=0 ;j<6;j++){\r\n\t\t\t   this.blank=new Blank(this,405+x_pos1,85+y_pos1,'blank').data.set('card_number', 53);\r\n\t\t\t\tx_pos1+=65;\r\n\t\t\t }\r\n\t\t\t   y_pos1+=65;\r\n\t\t\t   x_pos1=0;\r\n\t\t\t }\r\n\t\t\t \r\n\r\n\t\t//    let card_number=0;\r\n\t\t//    let nums=[],\r\n\t\t// \t   ranNums = [];\r\n\t\t//   for(var k=0;k<52;k++){\r\n\t\t//    nums.push(k);\r\n\t\t// \t}\r\n\t\t//    let m = nums.length,\r\n\t\t// \t   n = 0;\r\n\t  //  while (m--) {\r\n\t\t//    n = Math.floor(Math.random() * (m+1));\r\n\t\t//    ranNums.push(nums[n]);\r\n\t\t//    nums.splice(n,1);\r\n\t\t//  }\r\n\t\t \r\n\t\tlet card_number=0;\r\n\t\tlet ranNums=[3,7,15,33,25,46,8,9,28,53,11,6,34,36,21,23,41,19,16,1,47,29,51,39,2,25,27,40,30,\r\n\t\t              37,10,22,10,20,50,38,26]\r\n\t   //display board\r\n\t\t\tlet x_pos=0;\r\n\t\t\tlet y_pos=0; \r\n\t\t\tthis.cardSet=[] \r\n\t\t  for(var i=0;i<6;i++){\r\n\t\t\tfor(var j=0 ;j<6;j++){\r\n\t\t\t   var generatecard=ranNums[card_number]\r\n\t\t\t\t this.card=new Card(this,405+x_pos,85+y_pos,'cards',generatecard).setOrigin(0, 0).setInteractive().setDataEnabled()\r\n\t\t\t\t this.cardSet.push(this.card)\r\n\t\t\t   this.card.data.set('card_number', card_number);\r\n\t\t\t\tx_pos+=65;\r\n\t\t\t\tcard_number++;\r\n\t\t\t }\r\n\t\t\t   y_pos+=65;\r\n\t\t\t   x_pos=0;\r\n\t\t\t }\r\n\t\t\t \r\n\r\n\r\n\t\t\t let player1=new Player(this,405,85,'chess_red',1).setOrigin(0,0)\r\n\t\t\t let player2=new Player(this,730,85,'chess_blue',2).setOrigin(0,0)\r\n\r\n\r\n\r\n\t\t\t this.player=[]\r\n\t\t\t this.player.push(player1)\r\n\t\t\t this.player.push(player2)\r\n\t\t\t\t\r\n\t\t//need user name array\r\n\t\tthis.userName=['switch','noviah']\r\n\r\n\t\t//initalize the data\r\n\t\tthis.initCardData(-1,405,85,'switch',0)\r\n\t\tthis.initCardData(-1,730,85,'noviah',0)\r\n\r\n\t\tthis.seat=0;\r\n\r\n\t\tthis.CardLeft=36\r\n\r\n\t\tthis.arrange=0\r\n\t\t\t\r\n\t\tthis.clickedBox(ranNums)\r\n\t\t   \r\n\t}\r\n\r\n\t\r\n\t\tcheckUserInfo(cardNum,name,x,y) {\r\n\t\t\tAuth.currentUserInfo().then((userInfo) => {\r\n\t\t\t\tconst { username } = userInfo;\r\n\t\t\t\tif(name==username){\r\n\t\t\t\t\tthis.updateCardData(cardNum,x,y,name,1)\r\n\t\t\t\t  this.seat++\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconsole.log('update')\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\r\n\r\n\r\n\r\n\r\n//************************************************ */\r\n//the thing you need\r\n//*********************************************** */\r\n\r\n// async round(x,y){\r\n// \t(async () => { \r\n// \t\tawait client.hydrated();\r\n// \t\t//const getUser = await Auth.currentAuthenticatedUser();\r\n\t\t\t\t\t\t\r\n// \t\tvar nameWeGot1 = 'switch';\r\n// \t\tconst result1 = await client.query({\r\n// \t\t\tquery: gql(queries.getQw),\r\n// \t\t\tvariables: {\r\n// \t\t\t\tusername: nameWeGot1\r\n// \t\t\t},\r\n// \t\t\tfetchPolicy: 'network-only',\r\n// \t\t});\r\n// \t\tconst seat=result1.data.getQw.seat\r\n// \t\tconsole.log('the recent seat'+seat)\r\n// \t\t if(x==this.player[seat%2].x||y==this.player[seat%2].y){\r\n// \t\t\tthis.checkUserInfo(this.userName[seat%2],x,y,seat)\r\n// \t\t }\r\n// \t})();\r\n// }\r\n\r\nasync initCardData(card,x,y,theusername,theSeat){\r\n\tconst cardV = card;\r\n\tconsole.log(cardV)\r\n\tconst xV =x;\r\n\tconsole.log(\"x : \"+xV)\r\n\tconst yV = y;\r\n\tconsole.log(\"y : \"+yV);\r\n\tconst name = theusername;\r\n\tconsole.log('your name : ' +name);\r\n\tconst thething = {\r\n\t\t\t\tusername : name,\r\n\t\t\t\twhichCard : cardV,\r\n\t\t\t\t\t\tx : xV,\r\n\t\t\t\t\t\ty : yV,\r\n\t\t\t\t\t\tseat: theSeat\r\n\t\t\t\t\t};\r\n const newThing = await API.graphql(graphqlOperation(mutations.updateQw, {input: thething}));\r\n}\r\n\r\n\r\n\t\r\n\t\r\n\tasync updateCardData(card,x,y,name,theSeat){\r\n\t\tconst cardV = card;\r\n\t\tconsole.log(cardV)\r\n\t\tconst xV =x;\r\n\t\tconsole.log(\"x : \"+xV)\r\n\t\tconst yV = y;\r\n\t\tconsole.log(\"y : \"+yV);\r\n\t\tconsole.log('your name : ' +name);\r\n\t\tconst thething = {\r\n\t\t\t\t\tusername : name,\r\n\t\t\t\t\twhichCard : cardV,\r\n\t\t\t\t\t\t\tx : xV,\r\n\t\t\t\t\t\t\ty : yV,\r\n\t\t\t\t\t\t\tseat: theSeat\r\n\t\t\t\t\t\t};\r\n\t const newThing = await API.graphql(graphqlOperation(mutations.updateQw, {input: thething}));\r\n\t}\r\n\r\n\r\n\t//click the card and make it move\r\n\tclickedBox(ranNums){\r\n\t\tthis.input.on('gameobjectdown', (pointer, gameObject) => {\r\n\t\t\tfor(var i=0;i<36;i++){\r\n\t\t\t\tif(this.gameBoard[i] == i ){\r\n\t\t\t\t\tif(gameObject.x==this.player[this.seat].x||gameObject.y==this.player[this.seat].y){\r\n\t\t\t\t\t\tif(gameObject.data.get('card_number') == i){\r\n\t\t\t\t\t\t\t\tthis.checkUserInfo(i,this.userName[this.seat],gameObject.x,gameObject.y)\r\n\t\t\t\t\t\t\t\tthis.CardLeft--;\r\n\t\t\t\t\t\t\t\tthis.arrange+=20\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}else if(gameObject.data.get('card_number') == 53){\r\n\t\t\t\t\t\t\tthis.checkUserInfo(-1,this.userName[this.seat],gameObject.x,gameObject.y)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\r\n\t\t\t}\t\r\n\t\r\n\t}\r\n\r\n\t\t\t\r\n\t});\r\n\r\n}\r\n\r\nasync updateScreen(){\r\n\t(async () => { \r\n \r\n\t\t//await client.hydrated();\r\n\t\t\t\t\t\t\r\n\t\tvar nameWeGot1 = this.userName[0];\r\n\t\tconst result1 = await client.query({\r\n\t\t\tquery: gql(queries.getQw),\r\n\t\t\tvariables: {\r\n\t\t\t\tusername: nameWeGot1\r\n\t\t\t},\r\n\t\t\tfetchPolicy: 'network-only',\r\n\t\t});\r\n\r\n\t\tvar nameWeGot2 = this.userName[1];\r\n\t\t\t const result2 = await client.query({\r\n\t\t\tquery: gql(queries.getQw),\r\n\t\t\tvariables: {\r\n\t\t\t\tusername: nameWeGot2\r\n\t\t\t},\r\n\t\t\tfetchPolicy: 'network-only',\r\n\t\t});\r\n\t\tlet x1=result1.data.getQw.x\r\n\t\tlet y1=result1.data.getQw.y\r\n\t\tlet x2=result2.data.getQw.x\r\n\t\tlet y2=result2.data.getQw.y\r\n\t\tthis.player[0].setX(x1)\r\n\t\tthis.player[0].setY(y1)\r\n\t\tthis.player[1].setX(x2)\r\n\t\tthis.player[1].setY(y2)\r\n\t\t// if(result1.data.getQw.seat==1){\r\n\t\t// \tthis.updateCardData(-1,result1.data.getQw.x,result1.data.getQw.y,nameWeGot1,0)\r\n\t\t// \t this.player[0].setX(x1)\r\n\t\t// \t this.player[0].setY(y1)\r\n\t\t\t \r\n\t\t\t console.log('update the player1')\r\n\t\t\t \r\n\t\t\t\t\tif(result1.data.getQw.whichCard!=-1){\r\n\t\t\t\t\tthis.cardSet[result1.data.getQw.whichCard].setX(20+this.arrange)\r\n\t\t\t\t\tthis.cardSet[result1.data.getQw.whichCard].setY(85)\r\n\t\t\t\t\tthis.updateCardData(-1,result1.data.getQw.x,result1.data.getQw.y,nameWeGot1,0)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t// }\r\n\r\n\t\t\t// if(result2.data.getQw.seat==1){\r\n\t\t\t// \tthis.updateCardData(-1,result2.data.getQw.x,result2.data.getQw.y,nameWeGot2,0)\r\n\t\t\t// \tthis.player[1].setX(x2)\r\n\t\t\t// \tthis.player[1].setY(y2)\r\n\t\t\t\t\r\n\t\t\t// console.log('update the player2')\r\n\t\t\t// this.seat=0\r\n\t\t\tif(result2.data.getQw.whichCard!=-1){\r\n\t\t\t\tconsole.log('move the card')\r\n\t\t\t\tthis.cardSet[result2.data.getQw.whichCard].setX(900+this.arrange)\r\n\t\t\t\tthis.cardSet[result2.data.getQw.whichCard].setY(85)\r\n\t\t\t\tthis.updateCardData(-1,result2.data.getQw.x,result2.data.getQw.y,nameWeGot2,0)\r\n\t\t }\r\n\t\t \r\n\t\t//}\r\n\t})();\r\n}\r\n\r\n\r\n\t\r\n\tupdate(time, delta) {\r\n     this.updateScreen()\r\n\t\tif(this.CardLeft==0){\r\n\t\t\tthis.newBoard=this.add.image(400, 80, 'boardbg');\r\n\t\t\tthis.newBoard.setOrigin(0, 0).setScale(2.8,2.8);\r\n\t\t\tthis.text=this.add.text(500,200,'game over').setScale(3,3)\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}