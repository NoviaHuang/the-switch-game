{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Creates a new Interactive Object.\r\n * \r\n * This is called automatically by the Input Manager when you enable a Game Object for input.\r\n *\r\n * The resulting Interactive Object is mapped to the Game Object's `input` property.\r\n *\r\n * @function Phaser.Input.CreateInteractiveObject\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to which this Interactive Object is bound.\r\n * @param {any} hitArea - The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.\r\n * @param {Phaser.Types.Input.HitAreaCallback} hitAreaCallback - The 'contains' check callback that the hit area shape will use for all hit tests.\r\n *\r\n * @return {Phaser.Types.Input.InteractiveObject} The new Interactive Object.\r\n */\nvar CreateInteractiveObject = function CreateInteractiveObject(gameObject, hitArea, hitAreaCallback) {\n  return {\n    gameObject: gameObject,\n    enabled: true,\n    draggable: false,\n    dropZone: false,\n    cursor: false,\n    target: null,\n    camera: null,\n    hitArea: hitArea,\n    hitAreaCallback: hitAreaCallback,\n    //  Has the dev specified their own shape, or is this bound to the texture size?\n    customHitArea: false,\n    localX: 0,\n    localY: 0,\n    //  0 = Not being dragged\n    //  1 = Being checked for dragging\n    //  2 = Being dragged\n    dragState: 0,\n    dragStartX: 0,\n    dragStartY: 0,\n    dragX: 0,\n    dragY: 0\n  };\n};\n\nmodule.exports = CreateInteractiveObject;","map":null,"metadata":{},"sourceType":"script"}