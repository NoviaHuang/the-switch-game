{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Arne16 = require('./palettes/Arne16');\n\nvar CanvasPool = require('../display/canvas/CanvasPool');\n\nvar GetValue = require('../utils/object/GetValue');\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Create.GenerateTexture\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Create.GenerateTextureConfig} config - [description]\r\n *\r\n * @return {HTMLCanvasElement} [description]\r\n */\n\n\nvar GenerateTexture = function GenerateTexture(config) {\n  var data = GetValue(config, 'data', []);\n  var canvas = GetValue(config, 'canvas', null);\n  var palette = GetValue(config, 'palette', Arne16);\n  var pixelWidth = GetValue(config, 'pixelWidth', 1);\n  var pixelHeight = GetValue(config, 'pixelHeight', pixelWidth);\n  var resizeCanvas = GetValue(config, 'resizeCanvas', true);\n  var clearCanvas = GetValue(config, 'clearCanvas', true);\n  var preRender = GetValue(config, 'preRender', null);\n  var postRender = GetValue(config, 'postRender', null);\n  var width = Math.floor(Math.abs(data[0].length * pixelWidth));\n  var height = Math.floor(Math.abs(data.length * pixelHeight));\n\n  if (!canvas) {\n    canvas = CanvasPool.create2D(this, width, height);\n    resizeCanvas = false;\n    clearCanvas = false;\n  }\n\n  if (resizeCanvas) {\n    canvas.width = width;\n    canvas.height = height;\n  }\n\n  var ctx = canvas.getContext('2d');\n\n  if (clearCanvas) {\n    ctx.clearRect(0, 0, width, height);\n  } //  preRender Callback?\n\n\n  if (preRender) {\n    preRender(canvas, ctx);\n  } //  Draw it\n\n\n  for (var y = 0; y < data.length; y++) {\n    var row = data[y];\n\n    for (var x = 0; x < row.length; x++) {\n      var d = row[x];\n\n      if (d !== '.' && d !== ' ') {\n        ctx.fillStyle = palette[d];\n        ctx.fillRect(x * pixelWidth, y * pixelHeight, pixelWidth, pixelHeight);\n      }\n    }\n  } //  postRender Callback?\n\n\n  if (postRender) {\n    postRender(canvas, ctx);\n  }\n\n  return canvas;\n};\n\nmodule.exports = GenerateTexture;","map":null,"metadata":{},"sourceType":"script"}