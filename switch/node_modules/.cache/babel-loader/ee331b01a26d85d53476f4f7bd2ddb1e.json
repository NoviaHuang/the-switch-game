{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Returns a TweenDataConfig object that describes the tween data for a unique property of a unique target. A single Tween consists of multiple TweenDatas, depending on how many properties are being changed by the Tween.\r\n *\r\n * This is an internal function used by the TweenBuilder and should not be accessed directly, instead, Tweens should be created using the GameObjectFactory or GameObjectCreator.\r\n *\r\n * @function Phaser.Tweens.TweenData\r\n * @since 3.0.0\r\n *\r\n * @param {object} target - The target to tween.\r\n * @param {string} key - The property of the target to tween.\r\n * @param {function} getEnd - What the property will be at the END of the Tween.\r\n * @param {function} getStart - What the property will be at the START of the Tween.\r\n * @param {function} ease - The ease function this tween uses.\r\n * @param {number} delay - Time in ms/frames before tween will start.\r\n * @param {number} duration - Duration of the tween in ms/frames.\r\n * @param {boolean} yoyo - Determines whether the tween should return back to its start value after hold has expired.\r\n * @param {number} hold - Time in ms/frames the tween will pause before repeating or returning to its starting value if yoyo is set to true.\r\n * @param {number} repeat - Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.\r\n * @param {number} repeatDelay - Time in ms/frames before the repeat will start.\r\n * @param {boolean} flipX - Should toggleFlipX be called when yoyo or repeat happens?\r\n * @param {boolean} flipY - Should toggleFlipY be called when yoyo or repeat happens?\r\n *\r\n * @return {Phaser.Types.Tweens.TweenDataConfig} The config object describing this TweenData.\r\n */\nvar TweenData = function TweenData(target, key, getEnd, getStart, ease, delay, duration, yoyo, hold, repeat, repeatDelay, flipX, flipY) {\n  return {\n    //  The target to tween\n    target: target,\n    //  The property of the target to tween\n    key: key,\n    //  The returned value sets what the property will be at the END of the Tween.\n    getEndValue: getEnd,\n    //  The returned value sets what the property will be at the START of the Tween.\n    getStartValue: getStart,\n    //  The ease function this tween uses.\n    ease: ease,\n    //  Duration of the tween in ms/frames, excludes time for yoyo or repeats.\n    duration: 0,\n    //  The total calculated duration of this TweenData (based on duration, repeat, delay and yoyo)\n    totalDuration: 0,\n    //  Time in ms/frames before tween will start.\n    delay: 0,\n    //  Cause the tween to return back to its start value after hold has expired.\n    yoyo: yoyo,\n    //  Time in ms/frames the tween will pause before running the yoyo or starting a repeat.\n    hold: 0,\n    //  Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.\n    repeat: 0,\n    //  Time in ms/frames before the repeat will start.\n    repeatDelay: 0,\n    //  Automatically call toggleFlipX when the TweenData yoyos or repeats\n    flipX: flipX,\n    //  Automatically call toggleFlipY when the TweenData yoyos or repeats\n    flipY: flipY,\n    //  Between 0 and 1 showing completion of this TweenData.\n    progress: 0,\n    //  Delta counter.\n    elapsed: 0,\n    //  How many repeats are left to run?\n    repeatCounter: 0,\n    //  Ease Value Data:\n    start: 0,\n    current: 0,\n    end: 0,\n    //  Time Durations\n    t1: 0,\n    t2: 0,\n    //  LoadValue generation functions\n    gen: {\n      delay: delay,\n      duration: duration,\n      hold: hold,\n      repeat: repeat,\n      repeatDelay: repeatDelay\n    },\n    //  TWEEN_CONST.CREATED\n    state: 0\n  };\n};\n\nmodule.exports = TweenData;","map":null,"metadata":{},"sourceType":"script"}