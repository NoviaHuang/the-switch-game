{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar CONST = require('../const');\n\nvar File = require('../File');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n\nvar Shader = require('../../display/shader/BaseShader');\n/**\r\n * @classdesc\r\n * A single GLSL File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#glsl method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#glsl.\r\n *\r\n * @class GLSLFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.GLSLFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.txt`, i.e. if `key` was \"alien\" then the URL will be \"alien.txt\".\r\n * @param {string} [shaderType='fragment'] - The type of shader. Either `fragment` for a fragment shader, or `vertex` for a vertex shader. This is ignored if you load a shader bundle.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\n\n\nvar GLSLFile = new Class({\n  Extends: File,\n  initialize: function GLSLFile(loader, key, url, shaderType, xhrSettings) {\n    var extension = 'glsl';\n\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      url = GetFastValue(config, 'url');\n      shaderType = GetFastValue(config, 'shaderType', 'fragment');\n      xhrSettings = GetFastValue(config, 'xhrSettings');\n      extension = GetFastValue(config, 'extension', extension);\n    } else if (shaderType === undefined) {\n      shaderType = 'fragment';\n    }\n\n    var fileConfig = {\n      type: 'glsl',\n      cache: loader.cacheManager.shader,\n      extension: extension,\n      responseType: 'text',\n      key: key,\n      url: url,\n      config: {\n        shaderType: shaderType\n      },\n      xhrSettings: xhrSettings\n    };\n    File.call(this, loader, fileConfig);\n  },\n\n  /**\r\n   * Called automatically by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.GLSLFile#onProcess\r\n   * @since 3.7.0\r\n   */\n  onProcess: function onProcess() {\n    this.state = CONST.FILE_PROCESSING;\n    this.data = this.xhrLoader.responseText;\n    this.onProcessComplete();\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.GLSLFile#addToCache\r\n   * @since 3.17.0\r\n   */\n  addToCache: function addToCache() {\n    var data = this.data.split('\\n'); //  Check to see if this is a shader bundle, or raw glsl file.\n\n    var block = this.extractBlock(data, 0);\n\n    if (block) {\n      while (block) {\n        var key = this.getShaderName(block.header);\n        var shaderType = this.getShaderType(block.header);\n        var uniforms = this.getShaderUniforms(block.header);\n        var shaderSrc = block.shader;\n\n        if (this.cache.has(key)) {\n          var shader = this.cache.get(key);\n\n          if (shaderType === 'fragment') {\n            shader.fragmentSrc = shaderSrc;\n          } else {\n            shader.vertexSrc = shaderSrc;\n          }\n\n          if (!shader.uniforms) {\n            shader.uniforms = uniforms;\n          }\n        } else if (shaderType === 'fragment') {\n          this.cache.add(key, new Shader(key, shaderSrc, '', uniforms));\n        } else {\n          this.cache.add(key, new Shader(key, '', shaderSrc, uniforms));\n        }\n\n        block = this.extractBlock(data, block.offset);\n      }\n    } else if (this.config.shaderType === 'fragment') {\n      //  Single shader\n      this.cache.add(this.key, new Shader(this.key, this.data));\n    } else {\n      this.cache.add(this.key, new Shader(this.key, '', this.data));\n    }\n\n    this.pendingDestroy();\n  },\n\n  /**\r\n   * Returns the name of the shader from the header block.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.GLSLFile#getShaderName\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string[]} headerSource - The header data.\r\n   * \r\n   * @return {string} The shader name.\r\n   */\n  getShaderName: function getShaderName(headerSource) {\n    for (var i = 0; i < headerSource.length; i++) {\n      var line = headerSource[i].trim();\n\n      if (line.substring(0, 5) === 'name:') {\n        return line.substring(5).trim();\n      }\n    }\n\n    return this.key;\n  },\n\n  /**\r\n   * Returns the type of the shader from the header block.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.GLSLFile#getShaderType\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string[]} headerSource - The header data.\r\n   * \r\n   * @return {string} The shader type. Either 'fragment' or 'vertex'.\r\n   */\n  getShaderType: function getShaderType(headerSource) {\n    for (var i = 0; i < headerSource.length; i++) {\n      var line = headerSource[i].trim();\n\n      if (line.substring(0, 5) === 'type:') {\n        return line.substring(5).trim();\n      }\n    }\n\n    return this.config.shaderType;\n  },\n\n  /**\r\n   * Returns the shader uniforms from the header block.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.GLSLFile#getShaderUniforms\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string[]} headerSource - The header data.\r\n   * \r\n   * @return {any} The shader uniforms object.\r\n   */\n  getShaderUniforms: function getShaderUniforms(headerSource) {\n    var uniforms = {};\n\n    for (var i = 0; i < headerSource.length; i++) {\n      var line = headerSource[i].trim();\n\n      if (line.substring(0, 8) === 'uniform.') {\n        var pos = line.indexOf(':');\n\n        if (pos) {\n          var key = line.substring(8, pos);\n\n          try {\n            uniforms[key] = JSON.parse(line.substring(pos + 1));\n          } catch (e) {\n            console.warn('Invalid uniform JSON: ' + key);\n          }\n        }\n      }\n    }\n\n    return uniforms;\n  },\n\n  /**\r\n   * Processes the shader file and extracts the relevant data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.GLSLFile#extractBlock\r\n   * @private\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string[]} data - The array of shader data to process.\r\n   * @param {integer} offset - The offset to start processing from.\r\n   * \r\n   * @return {any} The processed shader block, or null.\r\n   */\n  extractBlock: function extractBlock(data, offset) {\n    var headerStart = -1;\n    var headerEnd = -1;\n    var blockEnd = -1;\n    var headerOpen = false;\n    var captureSource = false;\n    var headerSource = [];\n    var shaderSource = [];\n\n    for (var i = offset; i < data.length; i++) {\n      var line = data[i].trim();\n\n      if (line === '---') {\n        if (headerStart === -1) {\n          headerStart = i;\n          headerOpen = true;\n        } else if (headerOpen) {\n          headerEnd = i;\n          headerOpen = false;\n          captureSource = true;\n        } else {\n          //  We've hit another --- delimeter, break out\n          captureSource = false;\n          break;\n        }\n      } else if (headerOpen) {\n        headerSource.push(line);\n      } else if (captureSource) {\n        shaderSource.push(line);\n        blockEnd = i;\n      }\n    }\n\n    if (!headerOpen && headerEnd !== -1) {\n      return {\n        header: headerSource,\n        shader: shaderSource.join('\\n'),\n        offset: blockEnd\n      };\n    } else {\n      return null;\n    }\n  }\n});\n/**\r\n * Adds a GLSL file, or array of GLSL files, to the current load queue.\r\n * In Phaser 3 GLSL files are just plain Text files at the current moment in time.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.glsl('plasma', 'shaders/Plasma.glsl');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Shader Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Shader Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Shader Cache first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.glsl({\r\n *     key: 'plasma',\r\n *     shaderType: 'fragment',\r\n *     url: 'shaders/Plasma.glsl'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.GLSLFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can access it from its Cache using its key:\r\n * \r\n * ```javascript\r\n * this.load.glsl('plasma', 'shaders/Plasma.glsl');\r\n * // and later in your game ...\r\n * var data = this.cache.shader.get('plasma');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `FX.` and the key was `Plasma` the final key will be `FX.Plasma` and\r\n * this is what you would use to retrieve the text from the Shader Cache.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"plasma\"\r\n * and no URL is given then the Loader will set the URL to be \"plasma.glsl\". It will always add `.glsl` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the GLSL File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#glsl\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.GLSLFileConfig|Phaser.Types.Loader.FileTypes.GLSLFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.glsl`, i.e. if `key` was \"alien\" then the URL will be \"alien.glsl\".\r\n * @param {string} [shaderType='fragment'] - The type of shader. Either `fragment` for a fragment shader, or `vertex` for a vertex shader. This is ignored if you load a shader bundle.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\nFileTypesManager.register('glsl', function (key, url, shaderType, xhrSettings) {\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\n      this.addFile(new GLSLFile(this, key[i]));\n    }\n  } else {\n    this.addFile(new GLSLFile(this, key, url, shaderType, xhrSettings));\n  }\n\n  return this;\n});\nmodule.exports = GLSLFile;","map":null,"metadata":{},"sourceType":"script"}