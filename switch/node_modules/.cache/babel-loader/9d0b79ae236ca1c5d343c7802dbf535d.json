{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Base64Decode = require('./Base64Decode');\n\nvar GetFastValue = require('../../../utils/object/GetFastValue');\n\nvar LayerData = require('../../mapdata/LayerData');\n\nvar ParseGID = require('./ParseGID');\n\nvar Tile = require('../../Tile');\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseTileLayers\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - [description]\r\n * @param {boolean} insertNull - [description]\r\n *\r\n * @return {array} [description]\r\n */\n\n\nvar ParseTileLayers = function ParseTileLayers(json, insertNull) {\n  var infiniteMap = GetFastValue(json, 'infinite', false);\n  var tileLayers = [];\n\n  for (var i = 0; i < json.layers.length; i++) {\n    if (json.layers[i].type !== 'tilelayer') {\n      continue;\n    }\n\n    var curl = json.layers[i]; // Base64 decode data if necessary. NOTE: uncompressed base64 only.\n\n    if (curl.compression) {\n      console.warn('TilemapParser.parseTiledJSON - Layer compression is unsupported, skipping layer \\'' + curl.name + '\\'');\n      continue;\n    } else if (curl.encoding && curl.encoding === 'base64') {\n      curl.data = Base64Decode(curl.data);\n      delete curl.encoding; // Allow the same map to be parsed multiple times\n    } //  This is an array containing the tile indexes, one after the other. -1 = no tile,\n    //  everything else = the tile index (starting at 1 for Tiled, 0 for CSV) If the map\n    //  contains multiple tilesets then the indexes are relative to that which the set starts\n    //  from. Need to set which tileset in the cache = which tileset in the JSON, if you do this\n    //  manually it means you can use the same map data but a new tileset.\n\n\n    var layerData;\n    var gidInfo;\n    var tile;\n    var blankTile;\n    var output = [];\n    var x = 0;\n\n    if (infiniteMap) {\n      var layerOffsetX = GetFastValue(curl, 'startx', 0) + curl.x;\n      var layerOffsetY = GetFastValue(curl, 'starty', 0) + curl.y;\n      layerData = new LayerData({\n        name: curl.name,\n        x: layerOffsetX,\n        y: layerOffsetY,\n        width: curl.width,\n        height: curl.height,\n        tileWidth: json.tilewidth,\n        tileHeight: json.tileheight,\n        alpha: curl.opacity,\n        visible: curl.visible,\n        properties: GetFastValue(curl, 'properties', {})\n      });\n\n      for (var c = 0; c < curl.height; c++) {\n        output.push([null]);\n\n        for (var j = 0; j < curl.width; j++) {\n          output[c][j] = null;\n        }\n      }\n\n      for (c = 0, len = curl.chunks.length; c < len; c++) {\n        var chunk = curl.chunks[c];\n        var offsetX = chunk.x - layerOffsetX;\n        var offsetY = chunk.y - layerOffsetY;\n        var y = 0;\n\n        for (var t = 0, len2 = chunk.data.length; t < len2; t++) {\n          var newOffsetX = x + offsetX;\n          var newOffsetY = y + offsetY;\n          gidInfo = ParseGID(chunk.data[t]); //  index, x, y, width, height\n\n          if (gidInfo.gid > 0) {\n            tile = new Tile(layerData, gidInfo.gid, newOffsetX, newOffsetY, json.tilewidth, json.tileheight); // Turning Tiled's FlippedHorizontal, FlippedVertical and FlippedAntiDiagonal\n            // propeties into flipX, flipY and rotation\n\n            tile.rotation = gidInfo.rotation;\n            tile.flipX = gidInfo.flipped;\n            output[newOffsetY][newOffsetX] = tile;\n          } else {\n            blankTile = insertNull ? null : new Tile(layerData, -1, newOffsetX, newOffsetY, json.tilewidth, json.tileheight);\n            output[newOffsetY][newOffsetX] = blankTile;\n          }\n\n          x++;\n\n          if (x === chunk.width) {\n            y++;\n            x = 0;\n          }\n        }\n      }\n    } else {\n      layerData = new LayerData({\n        name: curl.name,\n        x: GetFastValue(curl, 'offsetx', 0) + curl.x,\n        y: GetFastValue(curl, 'offsety', 0) + curl.y,\n        width: curl.width,\n        height: curl.height,\n        tileWidth: json.tilewidth,\n        tileHeight: json.tileheight,\n        alpha: curl.opacity,\n        visible: curl.visible,\n        properties: GetFastValue(curl, 'properties', {})\n      });\n      var row = []; //  Loop through the data field in the JSON.\n\n      for (var k = 0, len = curl.data.length; k < len; k++) {\n        gidInfo = ParseGID(curl.data[k]); //  index, x, y, width, height\n\n        if (gidInfo.gid > 0) {\n          tile = new Tile(layerData, gidInfo.gid, x, output.length, json.tilewidth, json.tileheight); // Turning Tiled's FlippedHorizontal, FlippedVertical and FlippedAntiDiagonal\n          // propeties into flipX, flipY and rotation\n\n          tile.rotation = gidInfo.rotation;\n          tile.flipX = gidInfo.flipped;\n          row.push(tile);\n        } else {\n          blankTile = insertNull ? null : new Tile(layerData, -1, x, output.length, json.tilewidth, json.tileheight);\n          row.push(blankTile);\n        }\n\n        x++;\n\n        if (x === curl.width) {\n          output.push(row);\n          x = 0;\n          row = [];\n        }\n      }\n    }\n\n    layerData.data = output;\n    tileLayers.push(layerData);\n  }\n\n  return tileLayers;\n};\n\nmodule.exports = ParseTileLayers;","map":null,"metadata":{},"sourceType":"script"}