{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport Phaser from 'phaser';\nimport { Blank } from '../objects/Blank';\nimport { Player } from '../objects/Player';\nimport { Card } from '../objects/Card';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport Amplify, { Auth } from 'aws-amplify';\nimport * as mutations from '../../../graphql/mutations';\nimport * as subscriptions from '../../../graphql/subscriptions';\nimport * as queries from '../../../graphql/queries';\nimport { ConsoleLogger } from '@aws-amplify/core';\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport aws_config from '../../../aws-exports';\nimport gql from 'graphql-tag';\nvar client = new AWSAppSyncClient({\n  url: aws_config.aws_appsync_graphqlEndpoint,\n  region: aws_config.aws_appsync_region,\n  auth: {\n    type: AUTH_TYPE.API_KEY,\n    apiKey: aws_config.aws_appsync_apiKey\n  }\n});\nexport var GameBoard =\n/*#__PURE__*/\nfunction (_Phaser$Scene) {\n  _inherits(GameBoard, _Phaser$Scene);\n\n  function GameBoard() {\n    _classCallCheck(this, GameBoard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GameBoard).call(this, {\n      key: 'GameBoard'\n    }));\n  }\n\n  _createClass(GameBoard, [{\n    key: \"create\",\n    value: function create() {\n      /*\r\n      ************************************************************************\r\n      getPlayersByID(){\r\n            (async () => {\r\n                \r\n                const getUser = await Auth.currentAuthenticatedUser();\r\n                const name = getUser.username;\r\n                const getRoomID = await API.graphql(graphqlOperation(queries.getQw,{\r\n                    username : name\r\n                }));\r\n                const result = getRoomID.data.getQw.roomID;\r\n                console.log('the name is '+ name);\r\n                console.log('roomid ' + result);\r\n                console.log('type of result : ' +typeof(result));\r\n                const getPlayersInTheRoom = await API.graphql(graphqlOperation(queries.getRoompage,{\r\n                    roomid : result\r\n                }))\r\n                const playerlist = getPlayersInTheRoom.data.getRoompage.players;\r\n                console.log('players you have : '+ playerlist);\r\n                console.log('type of playerlist : '+ typeof(playerlist));\r\n                console.log('player 1 is ' + playerlist[0] );\r\n              })();\r\n        }\r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      *************************************************************************\r\n      */\n      this.gameBoard = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]; //display board\n\n      var boardbg = this.add.image(400, 80, 'boardbg');\n      boardbg.setOrigin(0, 0).setScale(2.8, 2.8);\n      var x_pos1 = 0;\n      var y_pos1 = 0;\n\n      for (var i = 0; i < 6; i++) {\n        for (var j = 0; j < 6; j++) {\n          this.blank = new Blank(this, 405 + x_pos1, 85 + y_pos1, 'blank').data.set('card_number', 53);\n          x_pos1 += 65;\n        }\n\n        y_pos1 += 65;\n        x_pos1 = 0;\n      } //    let card_number=0;\n      //    let nums=[],\n      // \t   ranNums = [];\n      //   for(var k=0;k<52;k++){\n      //    nums.push(k);\n      // \t}\n      //    let m = nums.length,\n      // \t   n = 0;\n      //  while (m--) {\n      //    n = Math.floor(Math.random() * (m+1));\n      //    ranNums.push(nums[n]);\n      //    nums.splice(n,1);\n      //  }\n\n\n      var card_number = 0;\n      var ranNums = [3, 7, 15, 33, 25, 46, 8, 9, 28, 53, 11, 6, 34, 36, 21, 23, 41, 19, 16, 1, 47, 29, 51, 39, 2, 25, 27, 40, 30, 37, 10, 22, 10, 20, 50, 38, 26]; //display board\n\n      var x_pos = 0;\n      var y_pos = 0;\n      this.cardSet = [];\n\n      for (var i = 0; i < 6; i++) {\n        for (var j = 0; j < 6; j++) {\n          var generatecard = ranNums[card_number];\n          this.card = new Card(this, 405 + x_pos, 85 + y_pos, 'cards', generatecard).setOrigin(0, 0).setInteractive().setDataEnabled();\n          this.cardSet.push(this.card);\n          this.card.data.set('card_number', card_number);\n          x_pos += 65;\n          card_number++;\n        }\n\n        y_pos += 65;\n        x_pos = 0;\n      }\n\n      var player1 = new Player(this, 405, 85, 'chess_red', 1).setOrigin(0, 0);\n      var player2 = new Player(this, 730, 85, 'chess_blue', 2).setOrigin(0, 0);\n      this.player = [];\n      this.player.push(player1);\n      this.player.push(player2); //initalize the data\n\n      this.userNameForInit();\n      this.Rf = [0, 9, 10, 11, 12];\n      this.mygetcard = [0, 16, 25, 26, 1, 27, 40];\n      this.mygetcard.sort();\n      this.numOfEach = [];\n\n      for (var m = 1; m <= 13; m++) {\n        this.numOfEach.push(this.ifHas(this.mygetcard, m).length);\n      }\n\n      this.arrange = 0;\n      this.getPlayersByID();\n      this.clickedBox(ranNums);\n    }\n  }, {\n    key: \"getPlayersByID\",\n    value: function getPlayersByID() {\n      var _this = this;\n\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var getUser, name, getRoomID, result, getPlayersInTheRoom, userName;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Auth.currentAuthenticatedUser();\n\n              case 2:\n                getUser = _context.sent;\n                name = getUser.username;\n                _context.next = 6;\n                return API.graphql(graphqlOperation(queries.getQw, {\n                  username: name\n                }));\n\n              case 6:\n                getRoomID = _context.sent;\n                result = getRoomID.data.getQw.roomID;\n                _context.next = 10;\n                return API.graphql(graphqlOperation(queries.getRoompage, {\n                  roomid: result\n                }));\n\n              case 10:\n                getPlayersInTheRoom = _context.sent;\n                userName = getPlayersInTheRoom.data.getRoompage.players;\n                console.log('players you have : ' + playerlist);\n                console.log('type of playerlist : ' + typeof userName);\n\n                _this.initCardData(-1, 405, 85, userName[0], 0);\n\n                _this.initCardData(-1, 730, 85, userName[1], 0);\n\n                _this.playername = _this.add.text(500, 50, userName[0] + ' turn');\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }, {\n    key: \"userNameForInit\",\n    value: function userNameForInit() {\n      var userName = ['switch', 'noviah'];\n      this.initCardData(-1, 405, 85, userName[0], 0);\n      this.initCardData(-1, 730, 85, userName[1], 0);\n      this.playername = this.add.text(500, 50, userName[0] + ' turn');\n    }\n  }, {\n    key: \"checkUserInfo\",\n    value: function checkUserInfo(cardNum, name, x, y, seat) {\n      var _this2 = this;\n\n      Auth.currentUserInfo().then(function (userInfo) {\n        var username = userInfo.username;\n        console.log(name);\n\n        if (name == username) {\n          _this2.updateCardData(cardNum, x, y, name);\n\n          _this2.updateRound(seat);\n        } else {\n          console.log('invalid move');\n        }\n      });\n    }\n  }, {\n    key: \"ifHas\",\n    value: function ifHas(the_card_get, num) {\n      var result = [];\n\n      switch (num) {\n        case 1:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 0;\n          });\n          break;\n\n        case 2:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 1;\n          });\n          break;\n\n        case 3:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 2;\n          });\n          break;\n\n        case 4:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 3;\n          });\n          break;\n\n        case 5:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 4;\n          });\n          break;\n\n        case 6:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 5;\n          });\n          break;\n\n        case 7:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 6;\n          });\n          break;\n\n        case 8:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 7;\n          });\n          break;\n\n        case 9:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 8;\n          });\n          break;\n\n        case 10:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 9;\n          });\n          break;\n\n        case 11:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 10;\n          });\n          break;\n\n        case 12:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 11;\n          });\n          break;\n\n        case 13:\n          result = the_card_get.filter(function (the_card_get) {\n            return the_card_get % 13 == 12;\n          });\n          break;\n      }\n\n      return result;\n    } // ifHasPair(the_card_get){\n    // \tlet result=[0]\n    // \tfor(var i=0;i<the_card_get.length;i++){\n    // \t\tfor(var j=0;j<the_card_get.length;j++){\n    // \t\t\tif(the_card_get[i]%13==the_card_get[j]%13){\n    // \t\t\t\tresult[0]=1\n    // \t\t\t\tresult.push(i)\n    // \t\t\t\tresult.push(j)\n    // \t\t\t\tbreak;\n    // \t\t\t}\n    // \t\t}\n    // \t}\n    // \tconsole.log(result)\n    // \treturn result\n    // }\n    // ifHasThree(the_card_get){\n    // \tlet result=[0]\n    // \tfor(var i=0;i<the_card_get.length;i++){\n    // \t\tfor(var j=0;j<the_card_get.length;j++){\n    // \t\t\tfor(var m=0;m<the_card_get.length;m++){\n    // \t\t\t\tif(the_card_get[i]%13==the_card_get[j]%13&&the_card_get[i]%13==the_card_get[m]%13){\n    // \t\t\t\t\tresult[0]=1\n    // \t\t\t\t\tresult.push(i)\n    // \t\t\t\t\tresult.push(j)\n    // \t\t\t\t\tresult.push(m)\n    // \t\t\t\t}\n    // \t\t\t}\n    // \t\t}\n    // \t}\n    // \tconsole.log(result)\n    // \treturn result\n    // }\n\n  }, {\n    key: \"userNameForMove\",\n    value: function userNameForMove(x, y, i) {\n      var userName = ['switch', 'noviah'];\n      this.round(x, y, i, userName);\n    }\n  }, {\n    key: \"round\",\n    value: function () {\n      var _round = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(x, y, cardNum, userName) {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee2() {\n                  var nameWeGot1, result1, seat;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return client.hydrated();\n\n                        case 2:\n                          //const getUser = await Auth.currentAuthenticatedUser();\n                          nameWeGot1 = userName[0];\n                          _context2.next = 5;\n                          return client.query({\n                            query: gql(queries.getQw),\n                            variables: {\n                              username: nameWeGot1\n                            },\n                            fetchPolicy: 'network-only'\n                          });\n\n                        case 5:\n                          result1 = _context2.sent;\n                          seat = result1.data.getQw.seat;\n                          console.log('the recent seat' + seat);\n\n                          if (x == _this3.player[seat % 2].x || y == _this3.player[seat % 2].y) {\n                            _this3.checkUserInfo(cardNum, userName[seat % 2], x, y, seat);\n                          }\n\n                        case 9:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }))();\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function round(_x, _x2, _x3, _x4) {\n        return _round.apply(this, arguments);\n      }\n\n      return round;\n    }()\n  }, {\n    key: \"updateRound\",\n    value: function () {\n      var _updateRound = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(theSeat) {\n        var thething, newThing;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                thething = {\n                  username: 'switch',\n                  seat: theSeat + 1\n                };\n                _context4.next = 3;\n                return API.graphql(graphqlOperation(mutations.updateQw, {\n                  input: thething\n                }));\n\n              case 3:\n                newThing = _context4.sent;\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function updateRound(_x5) {\n        return _updateRound.apply(this, arguments);\n      }\n\n      return updateRound;\n    }()\n  }, {\n    key: \"initCardData\",\n    value: function () {\n      var _initCardData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(card, x, y, theusername, theSeat) {\n        var cardV, xV, yV, name, thething, newThing;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                cardV = card;\n                console.log(cardV);\n                xV = x;\n                console.log(\"x : \" + xV);\n                yV = y;\n                console.log(\"y : \" + yV);\n                name = theusername;\n                console.log('your name : ' + name);\n                thething = {\n                  username: name,\n                  whichCard: cardV,\n                  x: xV,\n                  y: yV,\n                  seat: theSeat\n                };\n                _context5.next = 11;\n                return API.graphql(graphqlOperation(mutations.updateQw, {\n                  input: thething\n                }));\n\n              case 11:\n                newThing = _context5.sent;\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function initCardData(_x6, _x7, _x8, _x9, _x10) {\n        return _initCardData.apply(this, arguments);\n      }\n\n      return initCardData;\n    }()\n  }, {\n    key: \"updateCardData\",\n    value: function () {\n      var _updateCardData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(card, x, y, name) {\n        var cardV, xV, yV, thething, newThing;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                cardV = card;\n                xV = x;\n                yV = y;\n                thething = {\n                  username: name,\n                  whichCard: cardV,\n                  x: xV,\n                  y: yV\n                };\n                _context6.next = 6;\n                return API.graphql(graphqlOperation(mutations.updateQw, {\n                  input: thething\n                }));\n\n              case 6:\n                newThing = _context6.sent;\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function updateCardData(_x11, _x12, _x13, _x14) {\n        return _updateCardData.apply(this, arguments);\n      }\n\n      return updateCardData;\n    }() //click the card and make it move\n\n  }, {\n    key: \"clickedBox\",\n    value: function clickedBox(ranNums) {\n      var _this4 = this;\n\n      this.input.on('gameobjectdown', function (pointer, gameObject) {\n        for (var i = 0; i < 36; i++) {\n          if (_this4.gameBoard[i] == i) {\n            if (gameObject.data.get('card_number') == i) {\n              //console.log('another test for seat '+this.seat)\n              _this4.userNameForMove(gameObject.x, gameObject.y, i);\n\n              _this4.CardLeft--;\n              _this4.arrange += 20;\n              break;\n            } else if (gameObject.data.get('card_number') == 53) {\n              _this4.userNameForMove(gameObject.x, gameObject.y, -1);\n\n              break;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"userNameForUpdate\",\n    value: function userNameForUpdate() {\n      var userName = ['switch', 'noviah'];\n      this.updateScreen(userName);\n    }\n  }, {\n    key: \"updateScreen\",\n    value: function () {\n      var _updateScreen = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(userName) {\n        var _this5 = this;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee7() {\n                  var nameWeGot1, result1, nameWeGot2, result2, x1, y1, x2, y2;\n                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          _context7.next = 2;\n                          return client.hydrated();\n\n                        case 2:\n                          nameWeGot1 = userName[0];\n                          _context7.next = 5;\n                          return client.query({\n                            query: gql(queries.getQw),\n                            variables: {\n                              username: nameWeGot1\n                            },\n                            fetchPolicy: 'network-only'\n                          });\n\n                        case 5:\n                          result1 = _context7.sent;\n                          nameWeGot2 = userName[1];\n                          _context7.next = 9;\n                          return client.query({\n                            query: gql(queries.getQw),\n                            variables: {\n                              username: nameWeGot2\n                            },\n                            fetchPolicy: 'network-only'\n                          });\n\n                        case 9:\n                          result2 = _context7.sent;\n                          x1 = result1.data.getQw.x;\n                          y1 = result1.data.getQw.y;\n                          x2 = result2.data.getQw.x;\n                          y2 = result2.data.getQw.y;\n\n                          _this5.player[0].setX(x1);\n\n                          _this5.player[0].setY(y1);\n\n                          _this5.player[1].setX(x2);\n\n                          _this5.player[1].setY(y2);\n\n                          _this5.playername.text = userName[result1.data.getQw.seat % 2] + ' turn';\n\n                          if (result1.data.getQw.whichCard != -1) {\n                            _this5.cardSet[result1.data.getQw.whichCard].setX(20 + _this5.arrange);\n\n                            _this5.cardSet[result1.data.getQw.whichCard].setY(85);\n                          }\n\n                          if (result2.data.getQw.whichCard != -1) {\n                            _this5.cardSet[result2.data.getQw.whichCard].setX(900 + _this5.arrange);\n\n                            _this5.cardSet[result2.data.getQw.whichCard].setY(85);\n                          } //}\n\n\n                        case 21:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))();\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function updateScreen(_x15) {\n        return _updateScreen.apply(this, arguments);\n      }\n\n      return updateScreen;\n    }()\n  }, {\n    key: \"update\",\n    value: function update(time, delta) {\n      this.userNameForUpdate();\n\n      if (this.CardLeft == 0) {\n        this.newBoard = this.add.image(400, 80, 'boardbg');\n        this.newBoard.setOrigin(0, 0).setScale(2.8, 2.8);\n        this.text = this.add.text(500, 200, 'game over').setScale(3, 3);\n      }\n    }\n  }]);\n\n  return GameBoard;\n}(Phaser.Scene);","map":{"version":3,"sources":["C:\\Users\\shirl\\Documents\\GitHub\\the-switch-game\\switch\\src\\Pages\\phaser\\scenes\\GameBoard.js"],"names":["Phaser","Blank","Player","Card","API","graphqlOperation","Amplify","Auth","mutations","subscriptions","queries","ConsoleLogger","AWSAppSyncClient","AUTH_TYPE","aws_config","gql","client","url","aws_appsync_graphqlEndpoint","region","aws_appsync_region","auth","type","API_KEY","apiKey","aws_appsync_apiKey","GameBoard","key","gameBoard","boardbg","add","image","setOrigin","setScale","x_pos1","y_pos1","i","j","blank","data","set","card_number","ranNums","x_pos","y_pos","cardSet","generatecard","card","setInteractive","setDataEnabled","push","player1","player2","player","userNameForInit","Rf","mygetcard","sort","numOfEach","m","ifHas","length","arrange","getPlayersByID","clickedBox","currentAuthenticatedUser","getUser","name","username","graphql","getQw","getRoomID","result","roomID","getRoompage","roomid","getPlayersInTheRoom","userName","players","console","log","playerlist","initCardData","playername","text","cardNum","x","y","seat","currentUserInfo","then","userInfo","updateCardData","updateRound","the_card_get","num","filter","round","hydrated","nameWeGot1","query","variables","fetchPolicy","result1","checkUserInfo","theSeat","thething","updateQw","input","newThing","theusername","cardV","xV","yV","whichCard","on","pointer","gameObject","get","userNameForMove","CardLeft","updateScreen","nameWeGot2","result2","x1","y1","x2","y2","setX","setY","time","delta","userNameForUpdate","newBoard","Scene"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nimport {Blank} from '../objects/Blank';\r\nimport {Player} from '../objects/Player';\r\nimport {Card} from '../objects/Card';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport Amplify, { Auth } from 'aws-amplify';\r\nimport * as mutations from '../../../graphql/mutations';\r\nimport * as subscriptions from '../../../graphql/subscriptions'\r\nimport * as queries from '../../../graphql/queries'\r\n\r\nimport { ConsoleLogger } from '@aws-amplify/core';\r\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\r\nimport aws_config from '../../../aws-exports';\r\nimport gql from 'graphql-tag';\r\n\r\nconst client = new AWSAppSyncClient({\r\n  url: aws_config.aws_appsync_graphqlEndpoint,\r\n  region: aws_config.aws_appsync_region,\r\n  auth: {\r\n    type: AUTH_TYPE.API_KEY,\r\n    apiKey: aws_config.aws_appsync_apiKey,\r\n  }\r\n});\r\n\r\nexport class GameBoard extends Phaser.Scene {\r\n\tconstructor() {\r\n\t\tsuper({\r\n\t\t\tkey: 'GameBoard',\r\n\t\t});\r\n\t\t\r\n\r\n\t}\r\n\t\r\n\r\n\r\n\tcreate() {\r\n\t\t\r\n\t\t\r\n\t\t/*\r\n\t\t************************************************************************\r\n\t\tgetPlayersByID(){\r\n        (async () => {\r\n            \r\n            const getUser = await Auth.currentAuthenticatedUser();\r\n            const name = getUser.username;\r\n            const getRoomID = await API.graphql(graphqlOperation(queries.getQw,{\r\n                username : name\r\n            }));\r\n            const result = getRoomID.data.getQw.roomID;\r\n            console.log('the name is '+ name);\r\n            console.log('roomid ' + result);\r\n            console.log('type of result : ' +typeof(result));\r\n            const getPlayersInTheRoom = await API.graphql(graphqlOperation(queries.getRoompage,{\r\n                roomid : result\r\n            }))\r\n            const playerlist = getPlayersInTheRoom.data.getRoompage.players;\r\n            console.log('players you have : '+ playerlist);\r\n            console.log('type of playerlist : '+ typeof(playerlist));\r\n            console.log('player 1 is ' + playerlist[0] );\r\n\r\n        })();\r\n    }\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t*************************************************************************\r\n\t\t*/\r\n\r\n\t\tthis.gameBoard = [0,1,2,3,4,5,6,7,8,9,10,\r\n\t\t\t11,12,13,14,15,16,17,18,19,20,21,22,\r\n\t\t\t23,24,25,26,27,28,29,30,31,32,33,34,35,36];\r\n\t\t\r\n        //display board\r\n\t\tlet boardbg = this.add.image(400, 80, 'boardbg');\r\n\t\tboardbg.setOrigin(0, 0).setScale(2.8,2.8);\r\n\t\tlet x_pos1=0;\r\n\t\tlet y_pos1=0;\r\n\t\tfor(var i=0;i<6;i++){\r\n\t\t\tfor(var j=0 ;j<6;j++){\r\n\t\t\t   this.blank=new Blank(this,405+x_pos1,85+y_pos1,'blank').data.set('card_number', 53);\r\n\t\t\t\tx_pos1+=65;\r\n\t\t\t }\r\n\t\t\t   y_pos1+=65;\r\n\t\t\t   x_pos1=0;\r\n\t\t\t }\r\n\t\t\t \r\n\r\n\t\t//    let card_number=0;\r\n\t\t//    let nums=[],\r\n\t\t// \t   ranNums = [];\r\n\t\t//   for(var k=0;k<52;k++){\r\n\t\t//    nums.push(k);\r\n\t\t// \t}\r\n\t\t//    let m = nums.length,\r\n\t\t// \t   n = 0;\r\n\t  //  while (m--) {\r\n\t\t//    n = Math.floor(Math.random() * (m+1));\r\n\t\t//    ranNums.push(nums[n]);\r\n\t\t//    nums.splice(n,1);\r\n\t\t//  }\r\n\t\t \r\n\t\tlet card_number=0;\r\n\t\tlet ranNums=[3,7,15,33,25,46,8,9,28,53,11,6,34,36,21,23,41,19,16,1,47,29,51,39,2,25,27,40,30,\r\n\t\t              37,10,22,10,20,50,38,26]\r\n\t   //display board\r\n\t\t\tlet x_pos=0;\r\n\t\t\tlet y_pos=0; \r\n\t\t\tthis.cardSet=[] \r\n\t\t  for(var i=0;i<6;i++){\r\n\t\t\tfor(var j=0 ;j<6;j++){\r\n\t\t\t   var generatecard=ranNums[card_number]\r\n\t\t\t\t this.card=new Card(this,405+x_pos,85+y_pos,'cards',generatecard).setOrigin(0, 0).setInteractive().setDataEnabled()\r\n\t\t\t\t this.cardSet.push(this.card)\r\n\t\t\t   this.card.data.set('card_number', card_number);\r\n\t\t\t\tx_pos+=65;\r\n\t\t\t\tcard_number++;\r\n\t\t\t }\r\n\t\t\t   y_pos+=65;\r\n\t\t\t   x_pos=0;\r\n\t\t\t }\r\n\t\t\t \r\n\r\n\t\t\t let player1=new Player(this,405,85,'chess_red',1).setOrigin(0,0)\r\n\t\t\t let player2=new Player(this,730,85,'chess_blue',2).setOrigin(0,0)\r\n\r\n\r\n\t\t\t this.player=[]\r\n\t\t\t this.player.push(player1)\r\n\t\t\t this.player.push(player2)\r\n\t\t\t\t\r\n\r\n\t\t//initalize the data\r\n\t\tthis.userNameForInit()\r\n\t\t\r\n\t\tthis.Rf=[0,9,10,11,12]\r\n\t\tthis.mygetcard=[0,16,25,26,1,27,40]\r\n\t\tthis.mygetcard.sort()\r\n\t\tthis.numOfEach=[]\r\n\t\tfor(var m=1;m<=13;m++){\r\n\t\t  this.numOfEach.push(this.ifHas(this.mygetcard,m).length)\r\n\t\t}\r\n\t\r\n\t\t\r\n\t\t\r\n\t\tthis.arrange=0\r\n\t\t\t\r\n\t\tthis.getPlayersByID()\r\n\t\tthis.clickedBox(ranNums)\r\n\t\t   \r\n\t}\r\n\r\n\tgetPlayersByID(){\r\n\t\t(async () => {\r\n\t\t\t\tconst getUser = await Auth.currentAuthenticatedUser();\r\n\t\t\t\tconst name = getUser.username;\r\n\t\t\t\tconst getRoomID = await API.graphql(graphqlOperation(queries.getQw,{\r\n\t\t\t\t\t\tusername : name\r\n\t\t\t\t}));\r\n\t\t\t\tconst result = getRoomID.data.getQw.roomID;\r\n\t\t\t\tconst getPlayersInTheRoom = await API.graphql(graphqlOperation(queries.getRoompage,{\r\n\t\t\t\t\t\troomid : result\r\n\t\t\t\t}))\r\n\t\t\t\tconst userName = getPlayersInTheRoom.data.getRoompage.players;\r\n\t\t\t\tconsole.log('players you have : '+ playerlist);\r\n\t\t\t\tconsole.log('type of playerlist : '+ typeof(userName));\r\n\t\t\t\tthis.initCardData(-1,405,85,userName[0],0)\r\n\t\t\t  this.initCardData(-1,730,85,userName[1],0)\r\n\t\t\t  this.playername=this.add.text(500,50,userName[0]+' turn')\r\n\t\t})();\r\n}\r\n\r\n\t  userNameForInit(){\r\n\t\t\tlet userName=['switch','noviah']\r\n\t\t\tthis.initCardData(-1,405,85,userName[0],0)\r\n\t\t\tthis.initCardData(-1,730,85,userName[1],0)\r\n\t\t\tthis.playername=this.add.text(500,50,userName[0]+' turn')\r\n\t\t}\r\n\r\n\t\r\n\t\tcheckUserInfo(cardNum,name,x,y,seat) {\r\n\t\t\tAuth.currentUserInfo().then((userInfo) => {\r\n\t\t\t\tconst { username } = userInfo;\r\n\t\t\t\tconsole.log(name)\r\n\t\t\t\tif(name==username){\r\n\t\t\t\t\tthis.updateCardData(cardNum,x,y,name)\r\n\t\t\t\t\tthis.updateRound(seat)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconsole.log('invalid move')\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t\r\n\r\nifHas(the_card_get,num){\r\n\tlet result=[]\r\n\tswitch(num){\r\n\tcase 1:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==0)\r\n\t\tbreak;\r\n\tcase 2:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==1)\r\n\t\tbreak;\r\n\tcase 3:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==2)\r\n\t\tbreak;\r\n\tcase 4:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==3)\r\n\t\tbreak;\r\n\tcase 5:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==4)\r\n\t\tbreak;\r\n\tcase 6:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==5)\r\n\t\tbreak;\r\n\tcase 7:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==6)\r\n\t\tbreak;\r\n\tcase 8:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==7)\r\n\t\tbreak;\r\n\tcase 9:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==8)\r\n\t\tbreak;\r\n\tcase 10:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==9)\r\n\t\tbreak;\r\n\tcase 11:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==10)\r\n\t\tbreak;\r\n\tcase 12:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==11)\r\n\t\tbreak;\r\n\tcase 13:\r\n\t\tresult=the_card_get.filter(the_card_get=>the_card_get%13==12)\r\n\t\tbreak;\r\n\t}\r\n\treturn result\r\n}\r\n\r\n\r\n\r\n// ifHasPair(the_card_get){\r\n// \tlet result=[0]\r\n// \tfor(var i=0;i<the_card_get.length;i++){\r\n// \t\tfor(var j=0;j<the_card_get.length;j++){\r\n// \t\t\tif(the_card_get[i]%13==the_card_get[j]%13){\r\n// \t\t\t\tresult[0]=1\r\n// \t\t\t\tresult.push(i)\r\n// \t\t\t\tresult.push(j)\r\n// \t\t\t\tbreak;\r\n// \t\t\t}\r\n// \t\t}\r\n// \t}\r\n// \tconsole.log(result)\r\n// \treturn result\r\n// }\r\n\r\n// ifHasThree(the_card_get){\r\n// \tlet result=[0]\r\n// \tfor(var i=0;i<the_card_get.length;i++){\r\n// \t\tfor(var j=0;j<the_card_get.length;j++){\r\n// \t\t\tfor(var m=0;m<the_card_get.length;m++){\r\n// \t\t\t\tif(the_card_get[i]%13==the_card_get[j]%13&&the_card_get[i]%13==the_card_get[m]%13){\r\n// \t\t\t\t\tresult[0]=1\r\n// \t\t\t\t\tresult.push(i)\r\n// \t\t\t\t\tresult.push(j)\r\n// \t\t\t\t\tresult.push(m)\r\n// \t\t\t\t}\r\n// \t\t\t}\r\n// \t\t}\r\n// \t}\r\n// \tconsole.log(result)\r\n// \treturn result\r\n// }\r\n\r\nuserNameForMove(x,y,i){\r\n\tlet userName=['switch','noviah']\r\n\tthis.round(x,y,i,userName)\r\n}\r\n\r\n\r\n\r\nasync round(x,y,cardNum,userName){\r\n\t(async () => { \r\n\t\tawait client.hydrated();\r\n\t\t//const getUser = await Auth.currentAuthenticatedUser();\r\n\t\t\t\t\t\t\r\n\t\tvar nameWeGot1 = userName[0];\r\n\t\tconst result1 = await client.query({\r\n\t\t\tquery: gql(queries.getQw),\r\n\t\t\tvariables: {\r\n\t\t\t\tusername: nameWeGot1\r\n\t\t\t},\r\n\t\t\tfetchPolicy: 'network-only',\r\n\t\t});\r\n\t\tconst seat=result1.data.getQw.seat\r\n\t\tconsole.log('the recent seat'+seat)\r\n\t\t if(x==this.player[seat%2].x||y==this.player[seat%2].y){\r\n\t\t\tthis.checkUserInfo(cardNum,userName[seat%2],x,y,seat)\r\n\t\t }\r\n\t})();\r\n}\r\n\r\nasync updateRound(theSeat){\r\n\t\r\n\tconst thething = {\r\n\t\t\t\tusername : 'switch',\r\n\t\t\t\tseat:theSeat+1\r\n\t\t\t\t\t};\r\n const newThing = await API.graphql(graphqlOperation(mutations.updateQw, {input: thething}));\r\n}\r\n\r\n\r\nasync initCardData(card,x,y,theusername,theSeat){\r\n\tconst cardV = card;\r\n\tconsole.log(cardV)\r\n\tconst xV =x;\r\n\tconsole.log(\"x : \"+xV)\r\n\tconst yV = y;\r\n\tconsole.log(\"y : \"+yV);\r\n\tconst name = theusername;\r\n\tconsole.log('your name : ' +name);\r\n\tconst thething = {\r\n\t\t\t\tusername : name,\r\n\t\t\t\twhichCard : cardV,\r\n\t\t\t\t\t\tx : xV,\r\n\t\t\t\t\t\ty : yV,\r\n\t\t\t\t\t\tseat: theSeat\r\n\t\t\t\t\t};\r\n const newThing = await API.graphql(graphqlOperation(mutations.updateQw, {input: thething}));\r\n}\r\n\r\n\r\n\t\r\n\t\r\n\tasync updateCardData(card,x,y,name){\r\n\t\tconst cardV = card;\r\n\t\tconst xV =x;\r\n\t\tconst yV = y;\r\n\t\t\r\n\t\tconst thething = {\r\n\t\t\t\t\tusername : name,\r\n\t\t\t\t\twhichCard : cardV,\r\n\t\t\t\t\t\t\tx : xV,\r\n\t\t\t\t\t\t\ty : yV,\r\n\t\t\t\t\t\t};\r\n\t const newThing = await API.graphql(graphqlOperation(mutations.updateQw, {input: thething}));\r\n\t}\r\n\r\n\r\n\t//click the card and make it move\r\n\tclickedBox(ranNums){\r\n\t\tthis.input.on('gameobjectdown', (pointer, gameObject) => {\r\n\t\t\tfor(var i=0;i<36;i++){\r\n\t\t\t\tif(this.gameBoard[i] == i ){\r\n\t\t\t\t\t\tif(gameObject.data.get('card_number') == i){\r\n\t\t\t\t\t\t\t//console.log('another test for seat '+this.seat)\r\n\t\t\t\t\t\t\t\tthis.userNameForMove(gameObject.x,gameObject.y,i)\r\n\t\t\t\t\t\t\t\tthis.CardLeft--;\r\n\t\t\t\t\t\t\t\tthis.arrange+=20\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}else if(gameObject.data.get('card_number') == 53){\r\n\t\t\t\t\t\t\tthis.userNameForMove(gameObject.x,gameObject.y,-1)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t});\r\n\t}\t\r\n\t\r\n\r\nuserNameForUpdate(){\r\n\tlet userName=['switch','noviah']\r\n\tthis.updateScreen(userName)\r\n}\r\n\r\nasync updateScreen(userName){\r\n\t(async () => { \r\n \r\n\t\tawait client.hydrated();\r\n\t\t\t\t\t\t\r\n\t\tvar nameWeGot1 = userName[0];\r\n\t\tconst result1 = await client.query({\r\n\t\t\tquery: gql(queries.getQw),\r\n\t\t\tvariables: {\r\n\t\t\t\tusername: nameWeGot1\r\n\t\t\t},\r\n\t\t\tfetchPolicy: 'network-only',\r\n\t\t});\r\n\r\n\t\tvar nameWeGot2 = userName[1];\r\n\t\t\t const result2 = await client.query({\r\n\t\t\tquery: gql(queries.getQw),\r\n\t\t\tvariables: {\r\n\t\t\t\tusername: nameWeGot2\r\n\t\t\t},\r\n\t\t\tfetchPolicy: 'network-only',\r\n\t\t});\r\n\t\tlet x1=result1.data.getQw.x\r\n\t\tlet y1=result1.data.getQw.y\r\n\t\tlet x2=result2.data.getQw.x\r\n\t\tlet y2=result2.data.getQw.y\r\n\t\tthis.player[0].setX(x1)\r\n\t\tthis.player[0].setY(y1)\r\n\t\tthis.player[1].setX(x2)\r\n\t\tthis.player[1].setY(y2)\r\n\t\tthis.playername.text=userName[result1.data.getQw.seat%2]+' turn'\r\n\t\r\n\t\t\t \r\n\t\t\t\tif(result1.data.getQw.whichCard!=-1){\r\n\t\t\t\t\tthis.cardSet[result1.data.getQw.whichCard].setX(20+this.arrange)\r\n\t\t\t\t\tthis.cardSet[result1.data.getQw.whichCard].setY(85)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\r\n\t\t\tif(result2.data.getQw.whichCard!=-1){\r\n\r\n\t\t\t\tthis.cardSet[result2.data.getQw.whichCard].setX(900+this.arrange)\r\n\t\t\t\tthis.cardSet[result2.data.getQw.whichCard].setY(85)\r\n\r\n\t\t }\r\n\t\t \r\n\t\t//}\r\n\t})();\r\n}\r\n\t\r\n\tupdate(time, delta) {\r\n\t\t this.userNameForUpdate()\r\n\t\r\n\t\tif(this.CardLeft==0){\r\n\t\t\tthis.newBoard=this.add.image(400, 80, 'boardbg');\r\n\t\t\tthis.newBoard.setOrigin(0, 0).setScale(2.8,2.8);\r\n\t\t\tthis.text=this.add.text(500,200,'game over').setScale(3,3)\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}