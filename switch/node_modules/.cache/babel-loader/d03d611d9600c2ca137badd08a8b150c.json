{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * @ignore\r\n */\nfunction P0(t, p) {\n  var k = 1 - t;\n  return k * k * k * p;\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction P1(t, p) {\n  var k = 1 - t;\n  return 3 * k * k * t * p;\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction P2(t, p) {\n  return 3 * (1 - t) * t * t * p;\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction P3(t, p) {\n  return t * t * t * p;\n}\n/**\r\n * A cubic bezier interpolation method.\r\n *\r\n * https://medium.com/@adrian_cooney/bezier-interpolation-13b68563313a\r\n *\r\n * @function Phaser.Math.Interpolation.CubicBezier\r\n * @since 3.0.0\r\n *\r\n * @param {number} t - The percentage of interpolation, between 0 and 1.\r\n * @param {number} p0 - The start point.\r\n * @param {number} p1 - The first control point.\r\n * @param {number} p2 - The second control point.\r\n * @param {number} p3 - The end point.\r\n *\r\n * @return {number} The interpolated value.\r\n */\n\n\nvar CubicBezierInterpolation = function CubicBezierInterpolation(t, p0, p1, p2, p3) {\n  return P0(t, p0) + P1(t, p1) + P2(t, p2) + P3(t, p3);\n};\n\nmodule.exports = CubicBezierInterpolation;","map":null,"metadata":{},"sourceType":"script"}