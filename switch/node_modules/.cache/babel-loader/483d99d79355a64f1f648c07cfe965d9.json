{"ast":null,"code":"/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point');\n\nvar LineToCircle = require('./LineToCircle');\n/**\r\n * Checks for intersection between the line segment and circle,\r\n * and returns the intersection points as a Point object array.\r\n *\r\n * @function Phaser.Geom.Intersects.GetLineToCircle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The line segment to check.\r\n * @param {Phaser.Geom.Circle} circle - The circle to check against the line.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\n\n\nvar GetLineToCircle = function GetLineToCircle(line, circle, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (LineToCircle(line, circle)) {\n    var lx1 = line.x1;\n    var ly1 = line.y1;\n    var lx2 = line.x2;\n    var ly2 = line.y2;\n    var cx = circle.x;\n    var cy = circle.y;\n    var cr = circle.radius;\n    var lDirX = lx2 - lx1;\n    var lDirY = ly2 - ly1;\n    var oDirX = lx1 - cx;\n    var oDirY = ly1 - cy;\n    var coefficientA = lDirX * lDirX + lDirY * lDirY;\n    var coefficientB = 2 * (lDirX * oDirX + lDirY * oDirY);\n    var coefficientC = oDirX * oDirX + oDirY * oDirY - cr * cr;\n    var lambda = coefficientB * coefficientB - 4 * coefficientA * coefficientC;\n    var x, y;\n\n    if (lambda === 0) {\n      var root = -coefficientB / (2 * coefficientA);\n      x = lx1 + root * lDirX;\n      y = ly1 + root * lDirY;\n\n      if (root >= 0 && root <= 1) {\n        out.push(new Point(x, y));\n      }\n    } else if (lambda > 0) {\n      var root1 = (-coefficientB - Math.sqrt(lambda)) / (2 * coefficientA);\n      x = lx1 + root1 * lDirX;\n      y = ly1 + root1 * lDirY;\n\n      if (root1 >= 0 && root1 <= 1) {\n        out.push(new Point(x, y));\n      }\n\n      var root2 = (-coefficientB + Math.sqrt(lambda)) / (2 * coefficientA);\n      x = lx1 + root2 * lDirX;\n      y = ly1 + root2 * lDirY;\n\n      if (root2 >= 0 && root2 <= 1) {\n        out.push(new Point(x, y));\n      }\n    }\n  }\n\n  return out;\n};\n\nmodule.exports = GetLineToCircle;","map":null,"metadata":{},"sourceType":"script"}