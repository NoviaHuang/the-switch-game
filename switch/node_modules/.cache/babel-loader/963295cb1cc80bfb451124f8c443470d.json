{"ast":null,"code":"/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar RectangleToTriangle = require('./RectangleToTriangle');\n\nvar GetLineToRectangle = require('./GetLineToRectangle');\n/**\r\n * Checks for intersection between Rectangle shape and Triangle shape,\r\n * and returns the intersection points as a Point object array.\r\n *\r\n * @function Phaser.Geom.Intersects.GetRectangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - Rectangle object to test.\r\n * @param {Phaser.Geom.Triangle} triangle - Triangle object to test.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\n\n\nvar GetRectangleToTriangle = function GetRectangleToTriangle(rect, triangle, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (RectangleToTriangle(rect, triangle)) {\n    var lineA = triangle.getLineA();\n    var lineB = triangle.getLineB();\n    var lineC = triangle.getLineC();\n    GetLineToRectangle(lineA, rect, out);\n    GetLineToRectangle(lineB, rect, out);\n    GetLineToRectangle(lineC, rect, out);\n  }\n\n  return out;\n};\n\nmodule.exports = GetRectangleToTriangle;","map":null,"metadata":{},"sourceType":"script"}