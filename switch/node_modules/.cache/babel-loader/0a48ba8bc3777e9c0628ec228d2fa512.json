{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\src\\\\Pages\\\\RoomListPage.js\";\nimport React, { Component } from 'react';\nimport img from '../img/background.png';\nimport './RoomListPage.css';\nimport RoomPage from './RoomPage';\nimport GameRulePage from './GameRulePage';\nimport ProfilePage from './ProfilePage';\nimport { withRouter } from \"react-router-dom\";\nimport { Auth } from 'aws-amplify';\nimport Amplify, { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from './phaser/../../graphql/queries';\nimport * as mutations from '../graphql/mutations';\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport aws_config from '../aws-exports';\nimport gql from 'graphql-tag';\nimport { Table } from 'react-bootstrap';\nvar client = new AWSAppSyncClient({\n  url: aws_config.aws_appsync_graphqlEndpoint,\n  region: aws_config.aws_appsync_region,\n  auth: {\n    type: AUTH_TYPE.API_KEY,\n    apiKey: aws_config.aws_appsync_apiKey\n  }\n});\nvar subtoRoomData = \"\\n  subscription{\\n    onCreateRoompage{\\n        roomid players\\n    }\\n  }\\n  \";\nvar subtoRoomData2 = \"\\n  subscription{\\n    onUpdateRoompage{\\n        roomid players\\n    }\\n  }\\n  \";\nvar subtoRoomData3 = \"\\n  subscription{\\n    onDeleteRoompage{\\n        roomid players\\n    }\\n  }\\n  \";\n\nvar RoomListPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RoomListPage, _React$Component);\n\n  function RoomListPage() {\n    var _this;\n\n    _classCallCheck(this, RoomListPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RoomListPage).call(this));\n    _this.getRoom =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var storeRoom, result, i;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              storeRoom = [];\n              _context.next = 3;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 3:\n              result = _context.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                console.log(result.data.listRoompages.items[i].roomid);\n                storeRoom.push(result.data.listRoompages.items[i].roomid);\n              }\n\n              _this.setState({\n                rID: storeRoom\n              });\n\n              console.log('TEST FOR QUERY ' + _this.state.rID);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.getPlayersCount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var playercount, result, i, obj, count, property, roomCount;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              playercount = [];\n              _context2.next = 3;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 3:\n              result = _context2.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                obj = result.data.listRoompages.items[i].players;\n                count = 0;\n\n                for (property in obj) {\n                  if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                    count++;\n                  }\n                }\n\n                console.log('show the obj ' + count);\n                playercount.push(count);\n              }\n\n              _this.setState(function (state, props) {\n                return {\n                  player_count: playercount\n                };\n              }); //this.setState({player_count:playercount});\n\n\n              roomCount = _this.state.player_count.length;\n              console.log('TEST FOR playercount ' + _this.state.player_count.length);\n              console.log('show the roomCount ' + roomCount);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    _this.getStatus =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var storeStatus, playercount, result, i, obj, count, property, _i;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              storeStatus = [];\n              playercount = [];\n              _context3.next = 4;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 4:\n              result = _context3.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                obj = result.data.listRoompages.items[i].players;\n                count = 0;\n\n                for (property in obj) {\n                  if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                    count++;\n                  }\n                }\n\n                console.log('show the obj ' + count);\n                playercount.push(count);\n              }\n\n              console.log('get status check ' + playercount);\n\n              for (_i = 0; _i < playercount.length; _i++) {\n                if (playercount[_i] < 4) {\n                  storeStatus.push('open');\n                }\n\n                if (playercount[_i] >= 4) {\n                  storeStatus.push('close');\n                }\n              }\n\n              _this.setState({\n                status: storeStatus\n              });\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    _this.deleteEmptyRoom =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var i, num, result;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this.getPlayersCount();\n\n              console.log('gogogo  ' + _this.state.player_count.length);\n              i = 0;\n\n            case 3:\n              if (!(i < _this.state.player_count.length)) {\n                _context4.next = 14;\n                break;\n              }\n\n              console.log('hello');\n              num = _this.state.rID[i];\n\n              if (!(_this.state.player_count[i] == 0)) {\n                _context4.next = 11;\n                break;\n              }\n\n              _context4.next = 9;\n              return API.graphql(graphqlOperation(mutations.deleteRoompage, {\n                input: {\n                  roomid: num\n                }\n              }));\n\n            case 9:\n              result = _context4.sent;\n              console.log('Delete room ' + num);\n\n            case 11:\n              i++;\n              _context4.next = 3;\n              break;\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    _this.handleRanDomRoom =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var storeRoom, result, i;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              storeRoom = [];\n              _context5.next = 3;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 3:\n              result = _context5.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                console.log(result.data.listRoompages.items[i].roomid);\n                storeRoom.push(result.data.listRoompages.items[i].roomid);\n              }\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    _this.handleCreateRoom =\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(random) {\n        var getUser, name, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return Auth.currentAuthenticatedUser();\n\n              case 2:\n                getUser = _context6.sent;\n                name = getUser.username;\n                _context6.next = 6;\n                return API.graphql(graphqlOperation(mutations.createRoompage, {\n                  input: {\n                    roomid: random,\n                    players: name\n                  }\n                }));\n\n              case 6:\n                result = _context6.sent;\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    _this.inputChange = function (number) {\n      _this.setState({\n        inputNum: number.target.value\n      });\n    };\n\n    _this.handleEnterRoom = function () {\n      var value = 0;\n      var check = 0;\n      console.log('show me the rooms you have ' + _this.state.rID);\n      console.log('show me what you typed ' + _this.state.inputNum);\n\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        var i, getUser, name, result1, result2, prevPlayers, updatedPlayers, newThing, ID, path;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                //get current user name\n                i = 0;\n                _context7.next = 3;\n                return Auth.currentAuthenticatedUser();\n\n              case 3:\n                getUser = _context7.sent;\n                name = getUser.username;\n                _context7.next = 7;\n                return API.graphql(graphqlOperation(queries.listRoompages));\n\n              case 7:\n                result1 = _context7.sent;\n                console.log(result1.data.listRoompages.items.length);\n\n              case 9:\n                if (!(i < result1.data.listRoompages.items.length)) {\n                  _context7.next = 33;\n                  break;\n                }\n\n                console.log('check ' + i + ' time');\n\n                if (!(result1.data.listRoompages.items[i].roomid == _this.state.inputNum)) {\n                  _context7.next = 29;\n                  break;\n                }\n\n                _context7.next = 14;\n                return API.graphql(graphqlOperation(queries.getRoompage, {\n                  roomid: _this.state.inputNum\n                }));\n\n              case 14:\n                result2 = _context7.sent;\n\n                if (!(result2.data.getRoompage.players.length < 4)) {\n                  _context7.next = 27;\n                  break;\n                }\n\n                prevPlayers = result2.data.getRoompage.players;\n                updatedPlayers = [].concat(_toConsumableArray(prevPlayers), [name]);\n                _context7.next = 20;\n                return API.graphql(graphqlOperation(mutations.updateRoompage, {\n                  input: {\n                    roomid: _this.state.inputNum,\n                    players: updatedPlayers\n                  }\n                }));\n\n              case 20:\n                newThing = _context7.sent;\n                ID = _this.state.inputNum;\n                path = {\n                  pathname: '/room',\n                  query: ID\n                };\n\n                _this.props.history.push(path);\n\n                return _context7.abrupt(\"break\", 33);\n\n              case 27:\n                alert('room is full');\n                return _context7.abrupt(\"break\", 33);\n\n              case 29:\n                if (i == result1.data.listRoompages.items.length - 1) {\n                  alert(\"room does not exist\");\n                }\n\n                i++;\n                _context7.next = 9;\n                break;\n\n              case 33:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    };\n\n    _this.state = {\n      /* \r\n      ************************\r\n      READ!!!!!!\r\n      ***********************\r\n        roomID -> rID, I am using roomID in DB, and these 2 roomID mess me up\r\n        */\n      rID: '',\n      player_count: [],\n      roomCount: Number,\n      status: '',\n      inputNum: Number,\n      check: Number\n    };\n    _this.handleProfileClick = _this.handleProfileClick.bind(_assertThisInitialized(_this));\n    _this.handleGameRuleClick = _this.handleGameRuleClick.bind(_assertThisInitialized(_this));\n    _this.handleRoomClick = _this.handleRoomClick.bind(_assertThisInitialized(_this));\n    _this.handleCreateClick = _this.handleCreateClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(RoomListPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //create\n      this.subC = API.graphql(graphqlOperation(subtoRoomData)).subscribe({\n        next: function next(roomData) {\n          console.log('we got the playerscount ' + roomData.value.data.onCreateRoompage.players.length);\n          console.log('we got the data', roomData.value.data.onCreateRoompage.roomid); //players create sub\n\n          var newPlyersCount = roomData.value.data.onCreateRoompage.players.length;\n          var prevPlayersCount = _this2.state.player_count;\n          var updatedPlayersCount = [].concat(_toConsumableArray(prevPlayersCount), [newPlyersCount]);\n\n          _this2.setState({\n            player_count: updatedPlayersCount\n          }); //rid create sub\n\n\n          var newRoom = roomData.value.data.onCreateRoompage.roomid;\n          var prevRooms = _this2.state.rID;\n          var updatedRooms = [].concat(_toConsumableArray(prevRooms), [newRoom]);\n\n          _this2.setState({\n            rID: updatedRooms\n          });\n        }\n      });\n      this.subD = API.graphql(graphqlOperation(subtoRoomData3)).subscribe({\n        next: function next(roomData) {\n          var deleterID = roomData.value.data.onDeleteRoompage.roomid;\n          console.log('the missing one is ' + deleterID);\n\n          var updatedRooms = _this2.state.rID.filter(function (rooms) {\n            return rooms !== deleterID;\n          });\n\n          _this2.setState({\n            rID: updatedRooms\n          });\n        }\n      }); //update\n\n      this.subU = API.graphql(graphqlOperation(subtoRoomData2)).subscribe({\n        next: function next(roomData) {\n          //players update sub\n          var storeStatus = [];\n          console.log('we update the playerscount ' + roomData.value.data.onUpdateRoompage.players.length);\n          console.log('we update the playerscount ' + roomData.value.data.onUpdateRoompage.roomid);\n          var newPlyersCount = roomData.value.data.onUpdateRoompage.players.length;\n          var prevPlayersCount = _this2.state.player_count;\n          var newRoomID = roomData.value.data.onUpdateRoompage.roomid;\n          var roomlist = _this2.state.rID;\n          var index = roomlist.findIndex(function (num) {\n            return num === newRoomID;\n          });\n          console.log('show me the index ' + index);\n          var updatedPlayersCount = prevPlayersCount;\n          updatedPlayersCount[index] = newPlyersCount;\n\n          for (var i = 0; i < updatedPlayersCount.length; i++) {\n            if (updatedPlayersCount[i] < 4) {\n              storeStatus.push('open');\n            }\n\n            if (updatedPlayersCount[i] >= 4) {\n              storeStatus.push('close');\n            }\n          }\n\n          _this2.setState({\n            player_count: updatedPlayersCount,\n            status: storeStatus\n          });\n        }\n      });\n      this.getRoom();\n      this.getPlayersCount();\n      this.getStatus(); //         let subscription;\n      //         (async () => {\n      //         subscription = client.subscribe({ query: gql(onCreateRoompage) }).subscribe({\n      //         next: data => {\n      //         console.log(data);\n      //         },\n      //         error: error => {\n      //         console.warn(error);\n      //         }\n      //         });\n      //         })();\n      // // Unsubscribe after 10 secs\n      //         setTimeout(() => {\n      //         subscription.unsubscribe();\n      //         }, 100000);\n      // this.creatRoomListener = API.graphql(graphqlOperation(onCreateRoompage)).subscribe({\n      //     next: roomData => {\n      //       const newRoom = roomData.data.onCreateRoompage;\n      //       console.log('sub test, hello ');\n      //       const updatedRoom = [newRoom];\n      //       this.setState({ rID: updatedRoom });\n      //     }\n      //   });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.subC.unsubscribe();\n      this.subU.unsubscribe();\n      this.subD.unsubscribe();\n    } // getOnTime = async () => {\n    //     let subscription;\n    //     subscription = client.subscribe({ query: gql(onCreateRoompage) }).subscribe({\n    //         next: data => {\n    //         console.log('something happen');\n    //         },\n    //         error: error => {\n    //         console.warn(error);\n    //         }\n    //         });\n    //         setTimeout(() => {\n    //             subscription.unsubscribe();\n    //             }, 100000);\n    // }\n    //appsync get room (query)\n\n  }, {\n    key: \"handleProfileClick\",\n    value: function handleProfileClick(e) {\n      e.preventDefault();\n      this.props.history.push('/my-account');\n    }\n  }, {\n    key: \"handleGameRuleClick\",\n    value: function handleGameRuleClick(e) {\n      e.preventDefault();\n      this.props.history.push('/game-rule');\n    } //user allowed to enter the room only when the status of the room is not 'playing'\n\n  }, {\n    key: \"handleRoomClick\",\n    value: function handleRoomClick(e, i) {\n      var _this3 = this;\n\n      if (this.state.status[i] != 'close') {\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee8() {\n          var getUser, name, roomnum, getPlayers, prevPlayers, updatedPlayers, newThing;\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  _context8.next = 2;\n                  return Auth.currentAuthenticatedUser();\n\n                case 2:\n                  getUser = _context8.sent;\n                  name = getUser.username;\n                  console.log('you click the room ' + typeof _this3.state.rID[i]);\n                  roomnum = _this3.state.rID[i];\n                  console.log(roomnum);\n                  console.log('test for who click into a room , user :' + name + ' into a room #' + _this3.state.rID[i]);\n                  _context8.next = 10;\n                  return API.graphql(graphqlOperation(queries.listRoompages));\n\n                case 10:\n                  getPlayers = _context8.sent;\n                  prevPlayers = getPlayers.data.listRoompages.items[i].players;\n                  updatedPlayers = [].concat(_toConsumableArray(prevPlayers), [name]);\n                  _context8.next = 15;\n                  return API.graphql(graphqlOperation(mutations.updateRoompage, {\n                    input: {\n                      roomid: roomnum,\n                      players: updatedPlayers\n                    }\n                  }));\n\n                case 15:\n                  newThing = _context8.sent;\n\n                case 16:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8);\n        }))();\n\n        var roomID = this.state.rID[i];\n        var path = {\n          pathname: '/room',\n          query: roomID\n        };\n        this.props.history.push(path);\n      } else {\n        alert('This room is full. Please select to enter another room.');\n      }\n    } //render the room button only when the room id is available\n    // renderRoom(i){\n    //     if (this.state.rID[i]){\n    //         return(\n    //             <button className=\"room-button\" onClick={(e) => {this.handleRoomClick(e,i)}}>\n    //                     Room {this.state.rID[i]} <br />\n    //                     {this.state.player_count[i]}/4 <br />\n    //                     {this.state.status[i]}\n    //             </button>\n    //         );\n    //     }\n    //     else {\n    //         return(\n    //             <button className=\"empty-room-button\"></button>\n    //         )\n    //     }\n    // }\n\n  }, {\n    key: \"handleCreateClick\",\n    value: function handleCreateClick(e) {\n      e.preventDefault();\n      var min = 1;\n      var max = 9999;\n      var random = Math.floor(Math.random() * (+max - +min)) + +min;\n      console.log(\"Random Number Generated : \" + random);\n      this.handleCreateRoom(random);\n      console.log('hello?');\n      var path = {\n        pathname: '/room',\n        query: random\n      };\n      this.props.history.push(path);\n      /*\r\n      for(let i = 0; i < this.state.status.length; i++) {\r\n          if(this.state.status[i] == 'closed') {\r\n              let temp_status = this.state.status;\r\n              temp_status[i] = 'open';\r\n              let temp_player_count = this.state.player_count;\r\n              temp_player_count[i] = 1;\r\n              this.setState({\r\n                  status: temp_status,\r\n                  player_count: temp_player_count\r\n              });\r\n      \r\n          }\r\n      }\r\n      */\n    }\n  }, {\n    key: \"_renderRoom\",\n    value: function _renderRoom() {\n      var _this4 = this;\n\n      return Object.entries(this.state.rID).map(function (r, i) {\n        return React.createElement(\"div\", {\n          className: \"table-row\",\n          key: i,\n          value: i,\n          onClick: function onClick(e) {\n            _this4.handleRoomClick(e, i);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 486\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 487\n          },\n          __self: this\n        }, React.createElement(\"th\", {\n          className: \"id\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 488\n          },\n          __self: this\n        }, _this4.state.rID[i]), React.createElement(\"th\", {\n          className: \"count\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 489\n          },\n          __self: this\n        }, _this4.state.player_count[i], \"/4\"), React.createElement(\"th\", {\n          className: \"status\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 490\n          },\n          __self: this\n        }, _this4.state.status[i])));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"room-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"room-list-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501\n        },\n        __self: this\n      }, \"SWITCH\"), React.createElement(\"button\", {\n        className: \"game-rule-button\",\n        onClick: this.handleGameRuleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        },\n        __self: this\n      }, \"Game Rule\"), React.createElement(\"button\", {\n        className: \"profile-button\",\n        onClick: this.handleProfileClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503\n        },\n        __self: this\n      }, \"My Account\"), React.createElement(\"img\", {\n        src: img,\n        className: \"room-img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"room-num\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506\n        },\n        __self: this\n      }, \"Room #: \", React.createElement(\"input\", {\n        onChange: this.inputChange,\n        type: \"number\",\n        className: \"room-num-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"button\",\n        value: \"ENTER\",\n        className: \"enter-button\",\n        onClick: this.handleEnterRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"create-button\",\n        onClick: this.handleCreateClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509\n        },\n        __self: this\n      }, \"Create New Room\"), React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        className: \"id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513\n        },\n        __self: this\n      }, \"Room ID\"), React.createElement(\"th\", {\n        className: \"count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514\n        },\n        __self: this\n      }, \"Player Number\"), React.createElement(\"th\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515\n        },\n        __self: this\n      }, \"Status\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, this._renderRoom())), React.createElement(\"div\", {\n        className: \"block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return RoomListPage;\n}(React.Component);\n\nexport default withRouter(RoomListPage);","map":{"version":3,"sources":["C:\\Users\\shirl\\Documents\\GitHub\\the-switch-game\\switch\\src\\Pages\\RoomListPage.js"],"names":["React","Component","img","RoomPage","GameRulePage","ProfilePage","withRouter","Auth","Amplify","API","graphqlOperation","queries","mutations","AWSAppSyncClient","AUTH_TYPE","aws_config","gql","Table","client","url","aws_appsync_graphqlEndpoint","region","aws_appsync_region","auth","type","API_KEY","apiKey","aws_appsync_apiKey","subtoRoomData","subtoRoomData2","subtoRoomData3","RoomListPage","getRoom","storeRoom","graphql","listRoompages","result","i","data","items","length","console","log","roomid","push","setState","rID","state","getPlayersCount","playercount","obj","players","count","property","Object","prototype","hasOwnProperty","call","props","player_count","roomCount","getStatus","storeStatus","status","deleteEmptyRoom","num","deleteRoompage","input","handleRanDomRoom","handleCreateRoom","random","currentAuthenticatedUser","getUser","name","username","createRoompage","inputChange","number","inputNum","target","value","handleEnterRoom","check","result1","getRoompage","result2","prevPlayers","updatedPlayers","updateRoompage","newThing","ID","path","pathname","query","history","alert","Number","handleProfileClick","bind","handleGameRuleClick","handleRoomClick","handleCreateClick","subC","subscribe","next","roomData","onCreateRoompage","newPlyersCount","prevPlayersCount","updatedPlayersCount","newRoom","prevRooms","updatedRooms","subD","deleterID","onDeleteRoompage","filter","rooms","subU","onUpdateRoompage","newRoomID","roomlist","index","findIndex","unsubscribe","e","preventDefault","roomnum","getPlayers","roomID","min","max","Math","floor","entries","map","r","_renderRoom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport img from '../img/background.png';\r\nimport './RoomListPage.css';\r\nimport RoomPage from './RoomPage';\r\nimport GameRulePage from './GameRulePage';\r\nimport ProfilePage from './ProfilePage';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Auth } from 'aws-amplify';\r\nimport Amplify, { API, graphqlOperation } from \"aws-amplify\";\r\nimport * as queries from './phaser/../../graphql/queries';\r\nimport * as mutations from '../graphql/mutations';\r\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\r\nimport aws_config from '../aws-exports';\r\nimport gql from 'graphql-tag';\r\nimport { Table } from 'react-bootstrap';\r\n\r\n\r\nconst client = new AWSAppSyncClient({\r\n    url: aws_config.aws_appsync_graphqlEndpoint,\r\n    region: aws_config.aws_appsync_region,\r\n    auth: {\r\n      type: AUTH_TYPE.API_KEY,\r\n      apiKey: aws_config.aws_appsync_apiKey,\r\n    }\r\n  });\r\n\r\n  const subtoRoomData = `\r\n  subscription{\r\n    onCreateRoompage{\r\n        roomid players\r\n    }\r\n  }\r\n  `\r\n  const subtoRoomData2 = `\r\n  subscription{\r\n    onUpdateRoompage{\r\n        roomid players\r\n    }\r\n  }\r\n  `\r\n  const subtoRoomData3 = `\r\n  subscription{\r\n    onDeleteRoompage{\r\n        roomid players\r\n    }\r\n  }\r\n  `\r\n  \r\n\r\nclass RoomListPage extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            /* \r\n            ************************\r\n            READ!!!!!!\r\n            ***********************\r\n\r\n            roomID -> rID, I am using roomID in DB, and these 2 roomID mess me up\r\n\r\n            */\r\n            rID: '',\r\n            player_count: [],\r\n            roomCount: Number,\r\n            status: '',\r\n            inputNum:Number,\r\n            check : Number\r\n            \r\n            \r\n        };\r\n        this.handleProfileClick = this.handleProfileClick.bind(this);\r\n        this.handleGameRuleClick = this.handleGameRuleClick.bind(this);\r\n        this.handleRoomClick = this.handleRoomClick.bind(this);\r\n        this.handleCreateClick=this.handleCreateClick.bind(this);\r\n    }\r\n           \r\ncomponentDidMount() {\r\n        \r\n\r\n        //create\r\n        this.subC = API.graphql(\r\n            graphqlOperation(subtoRoomData)\r\n        ).subscribe({\r\n            next: (roomData) =>{\r\n                console.log('we got the playerscount ' + roomData.value.data.onCreateRoompage.players.length);\r\n                console.log('we got the data', roomData.value.data.onCreateRoompage.roomid);\r\n                //players create sub\r\n                const newPlyersCount = roomData.value.data.onCreateRoompage.players.length;\r\n                const prevPlayersCount = this.state.player_count;\r\n                const updatedPlayersCount = [...prevPlayersCount,newPlyersCount];\r\n                this.setState({player_count : updatedPlayersCount});\r\n                //rid create sub\r\n                const newRoom = roomData.value.data.onCreateRoompage.roomid;\r\n                const prevRooms = this.state.rID;\r\n                const updatedRooms = [...prevRooms,newRoom];\r\n                this.setState({rID : updatedRooms });\r\n            }\r\n        });\r\n        this.subD = API.graphql(\r\n            graphqlOperation(subtoRoomData3)\r\n        ).subscribe({\r\n            next: (roomData) =>{\r\n            const deleterID = roomData.value.data.onDeleteRoompage.roomid;\r\n            console.log('the missing one is '+deleterID);\r\n            const updatedRooms = this.state.rID.filter(rooms => rooms !== deleterID)\r\n            this.setState({rID : updatedRooms});\r\n            }\r\n        })\r\n        //update\r\n        this.subU = API.graphql(\r\n            graphqlOperation(subtoRoomData2)\r\n        ).subscribe({\r\n            next: (roomData) =>{\r\n                //players update sub\r\n                const storeStatus = [];\r\n                console.log('we update the playerscount ' + roomData.value.data.onUpdateRoompage.players.length);\r\n                console.log('we update the playerscount ' + roomData.value.data.onUpdateRoompage.roomid);\r\n                const newPlyersCount = roomData.value.data.onUpdateRoompage.players.length;\r\n                const prevPlayersCount = this.state.player_count;\r\n                const newRoomID = roomData.value.data.onUpdateRoompage.roomid;\r\n                const roomlist = this.state.rID;\r\n                const index = roomlist.findIndex(num => num === newRoomID);\r\n                console.log('show me the index ' + index);\r\n                const updatedPlayersCount = prevPlayersCount;\r\n                updatedPlayersCount[index] = newPlyersCount; \r\n\r\n                for(let i=0;i<updatedPlayersCount.length;i++){\r\n                    if(updatedPlayersCount[i]<4){\r\n                        storeStatus.push('open');\r\n                    }\r\n                    if(updatedPlayersCount[i]>=4){\r\n                        storeStatus.push('close');\r\n                    }\r\n                }\r\n                \r\n                this.setState({player_count : updatedPlayersCount,\r\n                                status : storeStatus});\r\n\r\n            }\r\n        });\r\n                this.getRoom();\r\n                this.getPlayersCount();\r\n                this.getStatus();\r\n\r\n       \r\n\r\n\r\n\r\n\r\n//         let subscription;\r\n\r\n//         (async () => {\r\n//         subscription = client.subscribe({ query: gql(onCreateRoompage) }).subscribe({\r\n//         next: data => {\r\n//         console.log(data);\r\n//         },\r\n//         error: error => {\r\n//         console.warn(error);\r\n//         }\r\n//         });\r\n//         })();\r\n\r\n// // Unsubscribe after 10 secs\r\n//         setTimeout(() => {\r\n//         subscription.unsubscribe();\r\n//         }, 100000);\r\n        // this.creatRoomListener = API.graphql(graphqlOperation(onCreateRoompage)).subscribe({\r\n        //     next: roomData => {\r\n        //       const newRoom = roomData.data.onCreateRoompage;\r\n        //       console.log('sub test, hello ');\r\n        //       const updatedRoom = [newRoom];\r\n        //       this.setState({ rID: updatedRoom });\r\n        //     }\r\n        //   });\r\n  }\r\n   componentWillUnmount() {\r\n     this.subC.unsubscribe();\r\n     this.subU.unsubscribe();\r\n     this.subD.unsubscribe();\r\n\r\n   }\r\n\r\n// getOnTime = async () => {\r\n//     let subscription;\r\n//     subscription = client.subscribe({ query: gql(onCreateRoompage) }).subscribe({\r\n//         next: data => {\r\n//         console.log('something happen');\r\n//         },\r\n//         error: error => {\r\n//         console.warn(error);\r\n//         }\r\n//         });\r\n//         setTimeout(() => {\r\n//             subscription.unsubscribe();\r\n//             }, 100000);\r\n// }\r\n\r\n\r\n\r\n//appsync get room (query)\r\ngetRoom = async () => {\r\n    var storeRoom = [];\r\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\r\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\r\n        console.log(result.data.listRoompages.items[i].roomid);\r\n        storeRoom.push(result.data.listRoompages.items[i].roomid);\r\n        }\r\n    this.setState({rID : storeRoom });\r\n    console.log('TEST FOR QUERY ' + this.state.rID);\r\n    }\r\n\r\ngetPlayersCount = async ()=>{\r\n    var playercount = [];\r\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\r\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\r\n        const obj = result.data.listRoompages.items[i].players;\r\n        var count = 0;\r\n        for (var property in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, property)) {\r\n            count++;\r\n        }\r\n    }\r\n         console.log('show the obj ' + count);\r\n        playercount.push(count);\r\n        \r\n    }\r\n    \r\n    this.setState(function (state, props) {\r\n        return {\r\n         player_count: playercount\r\n        }\r\n       });\r\n    //this.setState({player_count:playercount});\r\n    const roomCount = this.state.player_count.length;\r\n\r\n    console.log('TEST FOR playercount ' + this.state.player_count.length);\r\n    console.log('show the roomCount ' + roomCount);\r\n    \r\n}\r\n\r\n\r\n//appsync get status\r\ngetStatus = async() => {\r\n    var storeStatus = [];\r\n    var playercount = [];\r\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\r\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\r\n        const obj = result.data.listRoompages.items[i].players;\r\n        var count = 0;\r\n        for (var property in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, property)) {\r\n            count++;\r\n        }\r\n    }\r\n         console.log('show the obj ' + count);\r\n        playercount.push(count);\r\n        \r\n    }\r\n    console.log('get status check '+playercount);\r\n    for(let i=0;i<playercount.length;i++){\r\n        if(playercount[i]<4){\r\n            storeStatus.push('open');\r\n        }\r\n        if(playercount[i]>=4){\r\n            storeStatus.push('close');\r\n        }\r\n    }\r\n    this.setState({status : storeStatus});\r\n\r\n}  \r\n\r\n\r\ndeleteEmptyRoom = async ()=>{\r\nthis.getPlayersCount();\r\n\r\nconsole.log('gogogo  '+this.state.player_count.length);\r\nfor(let i=0;i<this.state.player_count.length;i++){\r\n    console.log('hello');\r\n    const num = this.state.rID[i];\r\n    if(this.state.player_count[i] == 0){\r\n        const result = await API.graphql(graphqlOperation(mutations.deleteRoompage,{\r\n            input:{\r\n                roomid : num\r\n            }\r\n        }));\r\n        console.log('Delete room ' + num);\r\n    }\r\n}\r\n}\r\n\r\n\r\n//appsync get the playerCount in each room \r\n// getPlayerCount = async () =>{\r\n//     var storePlayerCount = [];\r\n//     const result = await API.graphql(graphqlOperation(queries.getRoompage, {roomid : rID});\r\n// }\r\nhandleRanDomRoom = async () =>{\r\n    var storeRoom = [];\r\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\r\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\r\n        console.log(result.data.listRoompages.items[i].roomid);\r\n        storeRoom.push(result.data.listRoompages.items[i].roomid);\r\n        }\r\n    \r\n   \r\n}\r\n\r\nhandleCreateRoom = async (random) =>{\r\n    \r\n    const getUser = await Auth.currentAuthenticatedUser();\r\n                const name = getUser.username;\r\n    \r\n    const result = await API.graphql(graphqlOperation(mutations.createRoompage,{\r\n        input : {\r\n            roomid : random,\r\n            players : name\r\n        }\r\n\r\n    }));\r\n}\r\n\r\n\r\n    handleProfileClick(e) {\r\n        e.preventDefault();\r\n        this.props.history.push('/my-account');\r\n    }\r\n\r\n    handleGameRuleClick(e) {\r\n        e.preventDefault();\r\n        this.props.history.push('/game-rule');\r\n    }\r\n    \r\n    //user allowed to enter the room only when the status of the room is not 'playing'\r\n    handleRoomClick(e, i) {\r\n        if(this.state.status[i] != 'close'){\r\n            (async () => {\r\n                //get current user name\r\n                const getUser = await Auth.currentAuthenticatedUser();\r\n                const name = getUser.username;\r\n                console.log('you click the room ' + typeof(this.state.rID[i]));\r\n                var roomnum = this.state.rID[i];\r\n                console.log(roomnum);\r\n                console.log('test for who click into a room , user :' + name + ' into a room #' +this.state.rID[i]);\r\n                const getPlayers = await API.graphql(graphqlOperation(queries.listRoompages));\r\n                const prevPlayers = getPlayers.data.listRoompages.items[i].players;\r\n                const updatedPlayers = [...prevPlayers,name];\r\n                const newThing = await API.graphql(graphqlOperation(mutations.updateRoompage, \r\n                    {\r\n                        input:{\r\n                            roomid : roomnum,\r\n                            players : updatedPlayers\r\n                        }\r\n                    }));\r\n            })();\r\n                const roomID = this.state.rID[i];\r\n                \r\n                let path = {\r\n                    pathname: '/room',\r\n                    query: roomID,\r\n                }\r\n                this.props.history.push(path);\r\n        }\r\n        else {\r\n            alert('This room is full. Please select to enter another room.');\r\n        }\r\n    }\r\n\r\n    //render the room button only when the room id is available\r\n    // renderRoom(i){\r\n    //     if (this.state.rID[i]){\r\n    //         return(\r\n    //             <button className=\"room-button\" onClick={(e) => {this.handleRoomClick(e,i)}}>\r\n    //                     Room {this.state.rID[i]} <br />\r\n    //                     {this.state.player_count[i]}/4 <br />\r\n    //                     {this.state.status[i]}\r\n    //             </button>\r\n    //         );\r\n    //     }\r\n    //     else {\r\n    //         return(\r\n    //             <button className=\"empty-room-button\"></button>\r\n    //         )\r\n    //     }\r\n    // }\r\n    \r\n\r\n    handleCreateClick (e){\r\n        e.preventDefault();\r\n        var min=1; \r\n        var max=9999;  \r\n        var random =Math.floor(Math.random() * (+max - +min)) + +min; \r\n        console.log(\"Random Number Generated : \" + random ); \r\n        this.handleCreateRoom(random);\r\n        console.log('hello?');\r\n        let path = {\r\n            pathname: '/room',\r\n            query: random,\r\n        }\r\n        this.props.history.push(path);\r\n        \r\n        \r\n        /*\r\n        for(let i = 0; i < this.state.status.length; i++) {\r\n            if(this.state.status[i] == 'closed') {\r\n                let temp_status = this.state.status;\r\n                temp_status[i] = 'open';\r\n                let temp_player_count = this.state.player_count;\r\n                temp_player_count[i] = 1;\r\n                this.setState({\r\n                    status: temp_status,\r\n                    player_count: temp_player_count\r\n                });\r\n        \r\n            }\r\n        }\r\n        */\r\n       \r\n    }\r\n    inputChange=(number)=>{\r\n        this.setState({\r\n            inputNum : number.target.value\r\n        })\r\n    }\r\n\r\n    handleEnterRoom=()=>{\r\n        var value = 0;\r\n        var check = 0;\r\n        console.log('show me the rooms you have ' + this.state.rID);\r\n        console.log('show me what you typed ' + this.state.inputNum);\r\n        (async () => {\r\n            //get current user name\r\n            var i = 0;\r\n            const getUser = await Auth.currentAuthenticatedUser();\r\n            const name = getUser.username;\r\n            \r\n            const result1 = await API.graphql(graphqlOperation(queries.listRoompages));\r\n            console.log(result1.data.listRoompages.items.length);\r\n\r\n             while(i<result1.data.listRoompages.items.length){\r\n                 \r\n                  console.log('check ' + i + ' time'); \r\n                if(result1.data.listRoompages.items[i].roomid == this.state.inputNum){\r\n                    const result2 = await API.graphql(graphqlOperation(queries.getRoompage,{\r\n                        roomid : this.state.inputNum\r\n                        }))\r\n                    if(result2.data.getRoompage.players.length < 4){\r\n                        const prevPlayers = result2.data.getRoompage.players;\r\n                        const updatedPlayers = [...prevPlayers,name];\r\n                        const newThing = await API.graphql(graphqlOperation(mutations.updateRoompage, \r\n                        {\r\n                        input:{\r\n                            roomid : this.state.inputNum,\r\n                            players : updatedPlayers\r\n                        }\r\n                        }));\r\n                        const ID = this.state.inputNum;\r\n                        let path = {\r\n                        pathname: '/room',\r\n                        query: ID,\r\n                        }\r\n                        this.props.history.push(path);\r\n                        break;\r\n                        }\r\n                    \r\n                    else{\r\n                        alert('room is full');\r\n                        break;\r\n                    }\r\n                }\r\n                if(i == (result1.data.listRoompages.items.length-1)){\r\n                    alert(\"room does not exist\");\r\n                }\r\n                i++;\r\n            }\r\n            \r\n            \r\n\r\n            \r\n        })();\r\n       \r\n    }\r\n\r\n    _renderRoom(){\r\n        return Object.entries(this.state.rID).map((r, i) => {\r\n            return (\r\n            <div className=\"table-row\" key={i} value={i} onClick={(e) => {this.handleRoomClick(e,i)}}>\r\n                <tr>\r\n                    <th className=\"id\">{this.state.rID[i]}</th>\r\n                    <th className=\"count\">{this.state.player_count[i]}/4</th>\r\n                    <th className=\"status\">{this.state.status[i]}</th>\r\n                </tr>\r\n            </div>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"room-list\">\r\n                <h1 className=\"room-list-header\">SWITCH</h1>\r\n                <button className=\"game-rule-button\" onClick={this.handleGameRuleClick}>Game Rule</button>\r\n                <button className=\"profile-button\" onClick={this.handleProfileClick}>My Account</button>\r\n                <img src={img} className=\"room-img\" />\r\n                <form>\r\n                    <label className=\"room-num\">Room #: <input onChange={this.inputChange} type=\"number\" className=\"room-num-input\" /></label>\r\n                    <input type='button' value=\"ENTER\" className=\"enter-button\" onClick={this.handleEnterRoom} />\r\n                </form>\r\n                <button className=\"create-button\" onClick={this.handleCreateClick}>Create New Room</button>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"id\">Room ID</th>\r\n                            <th className=\"count\">Player Number</th>\r\n                            <th className=\"status\">Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this._renderRoom()}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"block\"></div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default withRouter(RoomListPage);\r\n\r\n"]},"metadata":{},"sourceType":"module"}