{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport Phaser from 'phaser';\nimport { Blank } from '../objects/Blank';\nimport { Player } from '../objects/Player';\nimport { Card } from '../objects/Card';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport * as mutations from '../../../graphql/mutations';\nexport var GameBoard =\n/*#__PURE__*/\nfunction (_Phaser$Scene) {\n  _inherits(GameBoard, _Phaser$Scene);\n\n  function GameBoard() {\n    _classCallCheck(this, GameBoard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GameBoard).call(this, {\n      key: 'GameBoard'\n    }));\n  }\n\n  _createClass(GameBoard, [{\n    key: \"create\",\n    value: function create() {\n      this.gameBoard = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]; //display board\n\n      var boardbg = this.add.image(400, 80, 'boardbg');\n      boardbg.setOrigin(0, 0).setScale(2.8, 2.8);\n      var x_pos1 = 0;\n      var y_pos1 = 0;\n\n      for (var i = 0; i < 6; i++) {\n        for (var j = 0; j < 6; j++) {\n          this.blank = new Blank(this, 405 + x_pos1, 85 + y_pos1, 'blank').data.set('blank', 53);\n          x_pos1 += 65;\n        }\n\n        y_pos1 += 65;\n        x_pos1 = 0;\n      }\n\n      var card_number = 0;\n      var nums = [],\n          ranNums = [];\n\n      for (var k = 0; k < 52; k++) {\n        nums.push(k);\n      }\n\n      var m = nums.length,\n          n = 0;\n\n      while (m--) {\n        n = Math.floor(Math.random() * (m + 1));\n        ranNums.push(nums[n]);\n        nums.splice(n, 1);\n      } //display board\n\n\n      var x_pos = 0;\n      var y_pos = 0;\n\n      for (var i = 0; i < 6; i++) {\n        for (var j = 0; j < 6; j++) {\n          var generatecard = ranNums[card_number];\n          this.card = new Card(this, 405 + x_pos, 85 + y_pos, 'cards', generatecard).setOrigin(0, 0).setInteractive().setDataEnabled();\n          this.card.data.set('card_number', card_number);\n          x_pos += 65;\n          card_number++;\n        }\n\n        y_pos += 65;\n        x_pos = 0;\n      }\n\n      var player1 = new Player(this, 405, 85, 'chess_red', 1).setOrigin(0, 0);\n      var player2 = new Player(this, 730, 85, 'chess_blue', 2).setOrigin(0, 0);\n      var player = [];\n      player.push(player1);\n      player.push(player2);\n      var gameState = 'playing';\n      var id = 0;\n      this.clickedBox(ranNums, player, id);\n    }\n  }, {\n    key: \"decideMove\",\n    value: function decideMove(x, y, player) {\n      player.setX(x);\n      player.setY(y);\n    }\n  }, {\n    key: \"handlePlayer1Card\",\n    value: function handlePlayer1Card(card, arrangepostion) {\n      card.setX(10 + arrangepostion);\n      card.setY(40);\n      card.setScale(0.1, 0.1);\n    }\n  }, {\n    key: \"handlePlaye2Card\",\n    value: function handlePlaye2Card() {}\n  }, {\n    key: \"handlePlayer3Card\",\n    value: function handlePlayer3Card() {}\n  }, {\n    key: \"clickedBox\",\n    value: function clickedBox(ranNums, player, id) {\n      var _this = this;\n\n      var arrangepostion = 0;\n      var seat = 0;\n      this.input.on('gameobjectdown', function (pointer, gameObject) {\n        for (var i = 0; i < 36; i++) {\n          if (_this.gameBoard[i] == i && gameObject.data.get('card_number') == i) {\n            if (gameObject.x == player[seat].x || gameObject.y == player[seat].y) {\n              _this.decideMove(gameObject.x, gameObject.y, player[seat]);\n\n              _this.handlePlayer1Card(gameObject, arrangepostion);\n\n              arrangepostion += 20; // if(seat==0){\n              // \tseat=1\n              // }else{\n              // \tseat=0\n              // }\n\n              id++;\n\n              if (id == 1) {\n                player[1].setX(405);\n                player[1].setY(85);\n              }\n            }\n          }\n\n          if (_this.gameBoard[i] == i && gameObject.data.get('blank') == 53) {\n            if (gameObject.x == player[seat].x || gameObject.y == player[seat].y) {\n              _this.decideMove(gameObject.x, gameObject.y, player); // if(seat==0){\n              // \tseat=1\n              // }else{\n              // \tseat=0\n              // }\n\n            }\n          } // (async () => {\n          // \tconst cardV = ranNums[i];\n          // \tconsole.log(cardV)\n          // \tconst xV = this.chess.x;\n          // \tconsole.log(\"x : \"+xV)\n          // \tconst yV = this.chess.y;\n          // \tconsole.log(\"y : \"+yV)\n          // \tconst thething = {\n          // \t\twhichCard : ranNums[i],\n          // \t\tx : xV,\n          // \t\ty : yV\n          // \t};\n          // \tconst newThing = await API.graphql(graphqlOperation(mutations.createTest1, {input: thething}));\n          // })();\n\n        }\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(time, delta) {}\n  }]);\n\n  return GameBoard;\n}(Phaser.Scene);","map":{"version":3,"sources":["C:\\Users\\shirl\\Documents\\GitHub\\the-switch-game\\switch\\src\\Pages\\phaser\\scenes\\GameBoard.js"],"names":["Phaser","Blank","Player","Card","API","graphqlOperation","mutations","GameBoard","key","gameBoard","boardbg","add","image","setOrigin","setScale","x_pos1","y_pos1","i","j","blank","data","set","card_number","nums","ranNums","k","push","m","length","n","Math","floor","random","splice","x_pos","y_pos","generatecard","card","setInteractive","setDataEnabled","player1","player2","player","gameState","id","clickedBox","x","y","setX","setY","arrangepostion","seat","input","on","pointer","gameObject","get","decideMove","handlePlayer1Card","time","delta","Scene"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nimport {Blank} from '../objects/Blank';\r\nimport {Player} from '../objects/Player';\r\nimport {Card} from '../objects/Card';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport * as mutations from '../../../graphql/mutations';\r\n\r\nexport class GameBoard extends Phaser.Scene {\r\n\tconstructor() {\r\n\t\tsuper({\r\n\t\t\tkey: 'GameBoard'\r\n\t\t});\r\n\t}\r\n\tcreate() {\r\n\t\tthis.gameBoard = [0,1,2,3,4,5,6,7,8,9,10,\r\n\t\t\t11,12,13,14,15,16,17,18,19,20,21,22,\r\n\t\t\t23,24,25,26,27,28,29,30,31,32,33,34,35,36];\r\n\t\t \r\n        //display board\r\n\t\tlet boardbg = this.add.image(400, 80, 'boardbg');\r\n\t\tboardbg.setOrigin(0, 0).setScale(2.8,2.8);\r\n\t\tlet x_pos1=0;\r\n\t\tlet y_pos1=0;\r\n\t\tfor(var i=0;i<6;i++){\r\n\t\t\tfor(var j=0 ;j<6;j++){\r\n\t\t\t   this.blank=new Blank(this,405+x_pos1,85+y_pos1,'blank').data.set('blank', 53);\r\n\t\t\t\tx_pos1+=65;\r\n\t\t\t }\r\n\t\t\t   y_pos1+=65;\r\n\t\t\t   x_pos1=0;\r\n\t\t   }\r\n\t\t   let card_number=0;\r\n\t\t   let nums=[],\r\n\t\t\t   ranNums = [];\r\n\t\t  for(var k=0;k<52;k++){\r\n\t\t   nums.push(k);\r\n\t\t\t}\r\n\t\t   let m = nums.length,\r\n\t\t\t   n = 0;\r\n\t   while (m--) {\r\n\t\t   n = Math.floor(Math.random() * (m+1));\r\n\t\t   ranNums.push(nums[n]);\r\n\t\t   nums.splice(n,1);\r\n\t   }\r\n\t   //display board\r\n\t\t\tlet x_pos=0;\r\n\t\t\tlet y_pos=0;  \r\n\t\t   for(var i=0;i<6;i++){\r\n\t\t\tfor(var j=0 ;j<6;j++){\r\n\t\t\t   var generatecard=ranNums[card_number]\r\n\t\t\t   this.card=new Card(this,405+x_pos,85+y_pos,'cards',generatecard).setOrigin(0, 0).setInteractive().setDataEnabled()\r\n\t\t\t   this.card.data.set('card_number', card_number);\r\n\t\t\t\tx_pos+=65;\r\n\t\t\t\tcard_number++;\r\n\t\t\t }\r\n\t\t\t   y_pos+=65;\r\n\t\t\t   x_pos=0;\r\n\t\t   }\r\n\t\t\t let player1=new Player(this,405,85,'chess_red',1).setOrigin(0,0)\r\n\t\t\t let player2=new Player(this,730,85,'chess_blue',2).setOrigin(0,0)\r\n\r\n\t\t\t let player=[]\r\n\t\t\t player.push(player1)\r\n\t\t\t player.push(player2)\r\n\t\t\t \r\n\t\t\t let gameState='playing'\r\n\t\t\t let id=0\r\n\t\t\t this.clickedBox(ranNums,player,id);\r\n\t\t   \r\n\t}\r\n\r\n\tdecideMove(x,y,player){\r\n\t\tplayer.setX(x)\r\n\t\tplayer.setY(y)\r\n\t}\r\n\r\n\thandlePlayer1Card(card,arrangepostion){\r\n\t\tcard.setX(10+arrangepostion);\r\n\t\tcard.setY(40);\r\n\t\tcard.setScale(0.1,0.1)\r\n\t}\r\n\r\n\thandlePlaye2Card(){\r\n\t\t\r\n\t}\r\n\r\n\thandlePlayer3Card(){\r\n\t\t\r\n\t}\r\n\tclickedBox(ranNums,player,id){\r\n\t\tvar arrangepostion=0;\r\n\t\tvar seat=0\r\n\t\tthis.input.on('gameobjectdown', (pointer, gameObject) => {\r\n\t\t\tfor(var i=0;i<36;i++){\r\n\t\t\t\tif(this.gameBoard[i] == i && gameObject.data.get('card_number') == i) {\r\n\t\t\t\t\tif(gameObject.x==player[seat].x||gameObject.y==player[seat].y){\r\n\t\t\t\t\t\tthis.decideMove(gameObject.x,gameObject.y,player[seat])\r\n\t\t\t\t\t\tthis.handlePlayer1Card(gameObject,arrangepostion)\r\n\t\t\t\t\t\tarrangepostion+=20\r\n\t\t\t\t\t\t// if(seat==0){\r\n\t\t\t\t\t\t// \tseat=1\r\n\t\t\t\t\t\t// }else{\r\n\t\t\t\t\t\t// \tseat=0\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\tid++\r\n\t\t\t\t\t\tif(id==1){\r\n\t\t\t\t\t\t\tplayer[1].setX(405)\r\n\t\t\t\t\t\t\tplayer[1].setY(85)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif(this.gameBoard[i] == i && gameObject.data.get('blank') == 53) {\r\n\t\t\t\tif(gameObject.x==player[seat].x||gameObject.y==player[seat].y){\r\n\t\t\t\t\tthis.decideMove(gameObject.x,gameObject.y,player)\r\n\t\t\t\t\t// if(seat==0){\r\n\t\t\t\t\t// \tseat=1\r\n\t\t\t\t\t// }else{\r\n\t\t\t\t\t// \tseat=0\r\n\t\t\t\t\t// }\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// (async () => {\r\n\t\t// \tconst cardV = ranNums[i];\r\n\t\t// \tconsole.log(cardV)\r\n\t\t// \tconst xV = this.chess.x;\r\n\t\t// \tconsole.log(\"x : \"+xV)\r\n\t\t// \tconst yV = this.chess.y;\r\n\t\t// \tconsole.log(\"y : \"+yV)\r\n\t\t// \tconst thething = {\r\n\t\t// \t\twhichCard : ranNums[i],\r\n\t\t// \t\tx : xV,\r\n\t\t// \t\ty : yV\r\n\t\t// \t};\r\n\t\t// \tconst newThing = await API.graphql(graphqlOperation(mutations.createTest1, {input: thething}));\r\n\t\t// })();\r\n\t\r\n\t\t\r\n\t}\r\n\r\n\t\t\t\r\n\t});\r\n\t\r\n\t\r\n}\r\n\t\r\n\tupdate(time, delta) {\r\n\t\t\r\n\t\t\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}