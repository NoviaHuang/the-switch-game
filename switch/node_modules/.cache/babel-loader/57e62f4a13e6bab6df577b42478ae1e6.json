{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\src\\\\Pages\\\\RoomListPage.js\";\nimport React, { Component } from 'react';\nimport img from '../img/background.png';\nimport './RoomListPage.css';\nimport RoomPage from './RoomPage';\nimport GameRulePage from './GameRulePage';\nimport ProfilePage from './ProfilePage';\nimport { withRouter } from \"react-router-dom\";\nimport { Auth } from 'aws-amplify';\nimport Amplify, { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from './phaser/../../graphql/queries';\nimport * as mutations from '../graphql/mutations';\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport aws_config from '../aws-exports';\nimport gql from 'graphql-tag';\nimport { Table } from 'react-bootstrap';\nvar subtoRoomData = \"\\n  subscription{\\n    onCreateRoompage{\\n        roomid players\\n    }\\n  }\\n  \";\nvar subtoRoomData2 = \"\\n  subscription{\\n    onUpdateRoompage{\\n        roomid players\\n    }\\n  }\\n  \";\nvar subtoRoomData3 = \"\\n  subscription{\\n    onDeleteRoompage{\\n        roomid players\\n    }\\n  }\\n  \";\n\nvar RoomListPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RoomListPage, _React$Component);\n\n  function RoomListPage() {\n    var _this;\n\n    _classCallCheck(this, RoomListPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RoomListPage).call(this));\n    _this.getRoom =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var storeRoom, result, i;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              storeRoom = [];\n              _context.next = 3;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 3:\n              result = _context.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                storeRoom.push(result.data.listRoompages.items[i].roomid);\n              }\n\n              _this.setState({\n                rID: storeRoom\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.getPlayersCount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var playercount, result, i, obj, count, property, roomCount;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              playercount = [];\n              _context2.next = 3;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 3:\n              result = _context2.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                obj = result.data.listRoompages.items[i].players;\n                count = 0;\n\n                for (property in obj) {\n                  if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                    count++;\n                  }\n                }\n\n                console.log('show the obj ' + count);\n                playercount.push(count);\n              }\n\n              _this.setState(function (state, props) {\n                return {\n                  player_count: playercount\n                };\n              }); //this.setState({player_count:playercount});\n\n\n              roomCount = _this.state.player_count.length;\n              console.log('TEST FOR playercount ' + _this.state.player_count.length);\n              console.log('show the roomCount ' + roomCount);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    _this.getStatus =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var storeStatus, playercount, result, i, obj, count, property, _i;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              storeStatus = [];\n              playercount = [];\n              _context3.next = 4;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 4:\n              result = _context3.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                obj = result.data.listRoompages.items[i].players;\n                count = 0;\n\n                for (property in obj) {\n                  if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                    count++;\n                  }\n                }\n\n                console.log('show the obj ' + count);\n                playercount.push(count);\n              }\n\n              console.log('get status check ' + playercount);\n\n              for (_i = 0; _i < playercount.length; _i++) {\n                if (playercount[_i] < 4) {\n                  storeStatus.push('open');\n                }\n\n                if (playercount[_i] >= 4) {\n                  storeStatus.push('close');\n                }\n              }\n\n              _this.setState({\n                status: storeStatus\n              });\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    _this.handleRanDomRoom =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var storeRoom, result, i;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              storeRoom = [];\n              _context4.next = 3;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 3:\n              result = _context4.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                console.log(result.data.listRoompages.items[i].roomid);\n                storeRoom.push(result.data.listRoompages.items[i].roomid);\n              }\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    _this.handleCreateRoom =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(random) {\n        var getUser, name, result, nums, ranNums, k, m, n;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return Auth.currentAuthenticatedUser();\n\n              case 2:\n                getUser = _context5.sent;\n                name = getUser.username;\n                _context5.next = 6;\n                return API.graphql(graphqlOperation(mutations.createRoompage, {\n                  input: {\n                    roomid: random,\n                    players: name\n                  }\n                }));\n\n              case 6:\n                result = _context5.sent;\n                nums = [];\n                ranNums = [];\n\n                for (k = 0; k < 52; k++) {\n                  nums.push(k);\n                }\n\n                console.log('show me the card ' + nums);\n                m = nums.length, n = 0;\n\n                while (m--) {\n                  n = Math.floor(Math.random() * (m + 1));\n                  ranNums.push(nums[n]);\n                  nums.splice(n, 1);\n                }\n\n                console.log('show me the card ' + ranNums.slice(0, 35));\n                ranNums = ranNums.slice(0, 36);\n                console.log('show me the card ' + ranNums.length);\n                _context5.next = 18;\n                return API.graphql(graphqlOperation(mutations.createReadyPageTable, {\n                  input: {\n                    roomID: random,\n                    players: name,\n                    cards: ranNums,\n                    readyStatus: ['Not Ready ....', 'Not Ready ....', 'Not Ready ....', 'Not Ready ....'],\n                    GameStart: false,\n                    readyNum: 0\n                  }\n                }));\n\n              case 18:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    _this.inputChange = function (number) {\n      _this.setState({\n        inputNum: number.target.value\n      });\n    };\n\n    _this.handleEnterRoom = function () {\n      var value = 0;\n      var check = 0;\n      console.log('show me the rooms you have ' + _this.state.rID);\n      console.log('show me what you typed ' + _this.state.inputNum);\n\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        var i, getUser, name, result1, result2, prevPlayers, updatedPlayers, newThing, ID, path;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                //get current user name\n                i = 0;\n                _context6.next = 3;\n                return Auth.currentAuthenticatedUser();\n\n              case 3:\n                getUser = _context6.sent;\n                name = getUser.username;\n                _context6.next = 7;\n                return API.graphql(graphqlOperation(queries.listRoompages));\n\n              case 7:\n                result1 = _context6.sent;\n                console.log(result1.data.listRoompages.items.length);\n\n              case 9:\n                if (!(i < result1.data.listRoompages.items.length)) {\n                  _context6.next = 35;\n                  break;\n                }\n\n                console.log('check ' + i + ' time');\n\n                if (!(result1.data.listRoompages.items[i].roomid == _this.state.inputNum)) {\n                  _context6.next = 31;\n                  break;\n                }\n\n                _context6.next = 14;\n                return API.graphql(graphqlOperation(queries.getRoompage, {\n                  roomid: _this.state.inputNum\n                }));\n\n              case 14:\n                result2 = _context6.sent;\n\n                if (!(result2.data.getRoompage.players.length < 4)) {\n                  _context6.next = 29;\n                  break;\n                }\n\n                prevPlayers = result2.data.getRoompage.players;\n                updatedPlayers = [].concat(_toConsumableArray(prevPlayers), [name]);\n                _context6.next = 20;\n                return API.graphql(graphqlOperation(mutations.updateRoompage, {\n                  input: {\n                    roomid: _this.state.inputNum,\n                    players: updatedPlayers\n                  }\n                }));\n\n              case 20:\n                newThing = _context6.sent;\n                _context6.next = 23;\n                return API.graphql(graphqlOperation(mutations.updateReadyPageTable, {\n                  input: {\n                    roomID: _this.state.inputNum,\n                    players: updatedPlayers\n                  }\n                }));\n\n              case 23:\n                ID = _this.state.inputNum;\n                path = {\n                  pathname: '/room',\n                  query: ID\n                };\n\n                _this.props.history.push(path);\n\n                return _context6.abrupt(\"break\", 35);\n\n              case 29:\n                alert('room is full');\n                return _context6.abrupt(\"break\", 35);\n\n              case 31:\n                if (i == result1.data.listRoompages.items.length - 1) {\n                  alert(\"room does not exist\");\n                }\n\n                i++;\n                _context6.next = 9;\n                break;\n\n              case 35:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    };\n\n    _this.state = {\n      rID: '',\n      player_count: [],\n      roomCount: Number,\n      status: '',\n      inputNum: Number,\n      check: Number\n    };\n    _this.handleProfileClick = _this.handleProfileClick.bind(_assertThisInitialized(_this));\n    _this.handleGameRuleClick = _this.handleGameRuleClick.bind(_assertThisInitialized(_this));\n    _this.handleRoomClick = _this.handleRoomClick.bind(_assertThisInitialized(_this));\n    _this.handleCreateClick = _this.handleCreateClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(RoomListPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //create\n      this.getRoom();\n      this.getPlayersCount();\n      this.getStatus();\n      this.subC = API.graphql(graphqlOperation(subtoRoomData)).subscribe({\n        next: function next(roomData) {\n          console.log('we got the playerscount ' + roomData.value.data.onCreateRoompage.players.length);\n          console.log('we got the data', roomData.value.data.onCreateRoompage.roomid); //players create sub\n\n          var newPlyersCount = roomData.value.data.onCreateRoompage.players.length;\n          var prevPlayersCount = _this2.state.player_count;\n          var updatedPlayersCount = [].concat(_toConsumableArray(prevPlayersCount), [newPlyersCount]);\n\n          _this2.setState({\n            player_count: updatedPlayersCount\n          }); //rid create sub\n\n\n          var newRoom = roomData.value.data.onCreateRoompage.roomid;\n          var prevRooms = _this2.state.rID;\n          var updatedRooms = [].concat(_toConsumableArray(prevRooms), [newRoom]);\n\n          _this2.setState({\n            rID: updatedRooms\n          });\n        }\n      });\n      this.subD = API.graphql(graphqlOperation(subtoRoomData3)).subscribe({\n        next: function next(roomData) {\n          var deleterID = roomData.value.data.onDeleteRoompage.roomid;\n          console.log('the missing one is ' + deleterID);\n\n          var updatedRooms = _this2.state.rID.filter(function (rooms) {\n            return rooms !== deleterID;\n          });\n\n          _this2.setState({\n            rID: updatedRooms\n          });\n        }\n      }); //update\n\n      this.subU = API.graphql(graphqlOperation(subtoRoomData2)).subscribe({\n        next: function next(roomData) {\n          //players update sub\n          var storeStatus = [];\n          console.log('we update the playerscount ' + roomData.value.data.onUpdateRoompage.players.length);\n          console.log('we update the playerscount ' + roomData.value.data.onUpdateRoompage.roomid);\n          var newPlyersCount = roomData.value.data.onUpdateRoompage.players.length;\n          var prevPlayersCount = _this2.state.player_count;\n          var newRoomID = roomData.value.data.onUpdateRoompage.roomid;\n          var roomlist = _this2.state.rID;\n          var index = roomlist.findIndex(function (num) {\n            return num === newRoomID;\n          });\n          console.log('show me the index ' + index);\n          var updatedPlayersCount = prevPlayersCount;\n          updatedPlayersCount[index] = newPlyersCount;\n\n          for (var i = 0; i < updatedPlayersCount.length; i++) {\n            if (updatedPlayersCount[i] < 4) {\n              storeStatus.push('open');\n            }\n\n            if (updatedPlayersCount[i] >= 4) {\n              storeStatus.push('close');\n            }\n          }\n\n          _this2.setState({\n            player_count: updatedPlayersCount,\n            status: storeStatus\n          });\n        }\n      });\n      this.waitAndGetList();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.subC.unsubscribe();\n      this.subU.unsubscribe();\n      this.subD.unsubscribe();\n    }\n  }, {\n    key: \"waitAndGetList\",\n    value: function () {\n      var _waitAndGetList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                console.log('Just~~~~~~~~');\n                _context7.next = 3;\n                return this.sleep(1000);\n\n              case 3:\n                console.log('wait 1 second');\n                this.getRoom();\n                this.getPlayersCount();\n                this.getStatus();\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function waitAndGetList() {\n        return _waitAndGetList.apply(this, arguments);\n      }\n\n      return waitAndGetList;\n    }()\n  }, {\n    key: \"sleep\",\n    value: function sleep(ms) {\n      return new Promise(function (resolve) {\n        return setTimeout(resolve, ms);\n      });\n    } //appsync get room (query)\n\n  }, {\n    key: \"handleProfileClick\",\n    value: function handleProfileClick(e) {\n      e.preventDefault();\n      this.props.history.push('/my-account');\n    }\n  }, {\n    key: \"handleGameRuleClick\",\n    value: function handleGameRuleClick(e) {\n      e.preventDefault();\n      this.props.history.push('/game-rule');\n    } //user allowed to enter the room only when the status of the room is not 'playing'\n\n  }, {\n    key: \"handleRoomClick\",\n    value: function handleRoomClick(e, i) {\n      var _this3 = this;\n\n      if (this.state.status[i] != 'close') {\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee8() {\n          var getUser, name, roomnum, getPlayers, prevPlayers, updatedPlayers, newThing;\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  _context8.next = 2;\n                  return Auth.currentAuthenticatedUser();\n\n                case 2:\n                  getUser = _context8.sent;\n                  name = getUser.username;\n                  console.log('you click the room ' + typeof _this3.state.rID[i]);\n                  roomnum = _this3.state.rID[i];\n                  console.log(roomnum);\n                  console.log('test for who click into a room , user :' + name + ' into a room #' + _this3.state.rID[i]);\n                  _context8.next = 10;\n                  return API.graphql(graphqlOperation(queries.listRoompages));\n\n                case 10:\n                  getPlayers = _context8.sent;\n                  prevPlayers = getPlayers.data.listRoompages.items[i].players;\n                  updatedPlayers = [].concat(_toConsumableArray(prevPlayers), [name]);\n                  _context8.next = 15;\n                  return API.graphql(graphqlOperation(mutations.updateRoompage, {\n                    input: {\n                      roomid: roomnum,\n                      players: updatedPlayers\n                    }\n                  }));\n\n                case 15:\n                  newThing = _context8.sent;\n                  _context8.next = 18;\n                  return API.graphql(graphqlOperation(mutations.updateReadyPageTable, {\n                    input: {\n                      roomID: roomnum,\n                      players: updatedPlayers\n                    }\n                  }));\n\n                case 18:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8);\n        }))();\n\n        var roomID = this.state.rID[i];\n        var path = {\n          pathname: '/room',\n          query: roomID\n        };\n        this.props.history.push(path);\n      } else {\n        alert('This room is full. Please select to enter another room.');\n      }\n    } //render the room button only when the room id is available\n    // renderRoom(i){\n    //     if (this.state.rID[i]){\n    //         return(\n    //             <button className=\"room-button\" onClick={(e) => {this.handleRoomClick(e,i)}}>\n    //                     Room {this.state.rID[i]} <br />\n    //                     {this.state.player_count[i]}/4 <br />\n    //                     {this.state.status[i]}\n    //             </button>\n    //         );\n    //     }\n    //     else {\n    //         return(\n    //             <button className=\"empty-room-button\"></button>\n    //         )\n    //     }\n    // }\n\n  }, {\n    key: \"handleCreateClick\",\n    value: function handleCreateClick(e) {\n      e.preventDefault();\n      var min = 1;\n      var max = 9999;\n      var random = Math.floor(Math.random() * (+max - +min)) + +min;\n      console.log(\"Random Number Generated : \" + random);\n      this.handleCreateRoom(random);\n      var path = {\n        pathname: '/room',\n        query: random\n      };\n      this.props.history.push(path);\n      /*\r\n      for(let i = 0; i < this.state.status.length; i++) {\r\n          if(this.state.status[i] == 'closed') {\r\n              let temp_status = this.state.status;\r\n              temp_status[i] = 'open';\r\n              let temp_player_count = this.state.player_count;\r\n              temp_player_count[i] = 1;\r\n              this.setState({\r\n                  status: temp_status,\r\n                  player_count: temp_player_count\r\n              });\r\n      \r\n          }\r\n      }\r\n      */\n    }\n  }, {\n    key: \"_renderRoom\",\n    value: function _renderRoom() {\n      var _this4 = this;\n\n      return Object.entries(this.state.rID).map(function (r, i) {\n        return React.createElement(\"div\", {\n          className: \"table-row\",\n          key: i,\n          value: i,\n          onClick: function onClick(e) {\n            _this4.handleRoomClick(e, i);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 445\n          },\n          __self: this\n        }, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 446\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 447\n          },\n          __self: this\n        }), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 448\n          },\n          __self: this\n        }, React.createElement(\"th\", {\n          className: \"id\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 449\n          },\n          __self: this\n        }, _this4.state.rID[i]), React.createElement(\"th\", {\n          className: \"count\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 450\n          },\n          __self: this\n        }, _this4.state.player_count[i], \"/4\"), React.createElement(\"th\", {\n          className: \"status\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 451\n          },\n          __self: this\n        }, _this4.state.status[i])), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 454\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 455\n          },\n          __self: this\n        }));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"room-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"room-list-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465\n        },\n        __self: this\n      }, \"SWITCH\"), React.createElement(\"button\", {\n        className: \"game-rule-button\",\n        onClick: this.handleGameRuleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466\n        },\n        __self: this\n      }, \"Game Rule\"), React.createElement(\"button\", {\n        className: \"profile-button\",\n        onClick: this.handleProfileClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467\n        },\n        __self: this\n      }, \"My Account\"), React.createElement(\"img\", {\n        src: img,\n        className: \"room-img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"room-num\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        },\n        __self: this\n      }, \"Room #: \", React.createElement(\"input\", {\n        onChange: this.inputChange,\n        type: \"number\",\n        className: \"room-num-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"button\",\n        value: \"ENTER\",\n        className: \"enter-button\",\n        onClick: this.handleEnterRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"create-button\",\n        onClick: this.handleCreateClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        },\n        __self: this\n      }, \"Create New Room\"), React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        className: \"id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        },\n        __self: this\n      }, \"Room ID\"), React.createElement(\"th\", {\n        className: \"count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478\n        },\n        __self: this\n      }, \"Player Number\"), React.createElement(\"th\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479\n        },\n        __self: this\n      }, \"Status\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482\n        },\n        __self: this\n      }, this._renderRoom())), React.createElement(\"div\", {\n        className: \"block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return RoomListPage;\n}(React.Component);\n\nexport default withRouter(RoomListPage);","map":{"version":3,"sources":["C:\\Users\\shirl\\Documents\\GitHub\\the-switch-game\\switch\\src\\Pages\\RoomListPage.js"],"names":["React","Component","img","RoomPage","GameRulePage","ProfilePage","withRouter","Auth","Amplify","API","graphqlOperation","queries","mutations","AWSAppSyncClient","AUTH_TYPE","aws_config","gql","Table","subtoRoomData","subtoRoomData2","subtoRoomData3","RoomListPage","getRoom","storeRoom","graphql","listRoompages","result","i","data","items","length","push","roomid","setState","rID","getPlayersCount","playercount","obj","players","count","property","Object","prototype","hasOwnProperty","call","console","log","state","props","player_count","roomCount","getStatus","storeStatus","status","handleRanDomRoom","handleCreateRoom","random","currentAuthenticatedUser","getUser","name","username","createRoompage","input","nums","ranNums","k","m","n","Math","floor","splice","slice","createReadyPageTable","roomID","cards","readyStatus","GameStart","readyNum","inputChange","number","inputNum","target","value","handleEnterRoom","check","result1","getRoompage","result2","prevPlayers","updatedPlayers","updateRoompage","newThing","updateReadyPageTable","ID","path","pathname","query","history","alert","Number","handleProfileClick","bind","handleGameRuleClick","handleRoomClick","handleCreateClick","subC","subscribe","next","roomData","onCreateRoompage","newPlyersCount","prevPlayersCount","updatedPlayersCount","newRoom","prevRooms","updatedRooms","subD","deleterID","onDeleteRoompage","filter","rooms","subU","onUpdateRoompage","newRoomID","roomlist","index","findIndex","num","waitAndGetList","unsubscribe","sleep","ms","Promise","resolve","setTimeout","e","preventDefault","roomnum","getPlayers","min","max","entries","map","r","_renderRoom"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAO,oBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAOC,OAAP,IAAkBC,GAAlB,EAAuBC,gBAAvB,QAA+C,aAA/C;AACA,OAAO,KAAKC,OAAZ,MAAyB,gCAAzB;AACA,OAAO,KAAKC,SAAZ,MAA2B,sBAA3B;AACA,OAAOC,gBAAP,IAA2BC,SAA3B,QAA4C,aAA5C;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AAEE,IAAMC,aAAa,qFAAnB;AAOA,IAAMC,cAAc,qFAApB;AAOA,IAAMC,cAAc,qFAApB;;IASIC,Y;;;;;AACF,0BAAa;AAAA;;AAAA;;AACT;AADS,UAqGjBC,OArGiB;AAAA;AAAA;AAAA;AAAA,6BAqGP;AAAA;AAAA;AAAA;AAAA;AAAA;AACFC,cAAAA,SADE,GACU,EADV;AAAA;AAAA,qBAEed,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACC,OAAO,CAACc,aAAT,CAA5B,CAFf;;AAAA;AAEAC,cAAAA,MAFA;;AAGN,mBAAQC,CAAR,GAAU,CAAV,EAAYA,CAAC,GAACD,MAAM,CAACE,IAAP,CAAYH,aAAZ,CAA0BI,KAA1B,CAAgCC,MAA9C,EAAqDH,CAAC,EAAtD,EAAyD;AACrDJ,gBAAAA,SAAS,CAACQ,IAAV,CAAeL,MAAM,CAACE,IAAP,CAAYH,aAAZ,CAA0BI,KAA1B,CAAgCF,CAAhC,EAAmCK,MAAlD;AACC;;AACL,oBAAKC,QAAL,CAAc;AAACC,gBAAAA,GAAG,EAAGX;AAAP,eAAd;;AANM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArGO;AAAA,UA8GjBY,eA9GiB;AAAA;AAAA;AAAA;AAAA,6BA8GC;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,cAAAA,WADU,GACI,EADJ;AAAA;AAAA,qBAEO3B,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACC,OAAO,CAACc,aAAT,CAA5B,CAFP;;AAAA;AAERC,cAAAA,MAFQ;;AAGd,mBAAQC,CAAR,GAAU,CAAV,EAAYA,CAAC,GAACD,MAAM,CAACE,IAAP,CAAYH,aAAZ,CAA0BI,KAA1B,CAAgCC,MAA9C,EAAqDH,CAAC,EAAtD,EAAyD;AAC/CU,gBAAAA,GAD+C,GACzCX,MAAM,CAACE,IAAP,CAAYH,aAAZ,CAA0BI,KAA1B,CAAgCF,CAAhC,EAAmCW,OADM;AAEjDC,gBAAAA,KAFiD,GAEzC,CAFyC;;AAGrD,qBAASC,QAAT,IAAqBH,GAArB,EAA0B;AAC1B,sBAAII,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,GAArC,EAA0CG,QAA1C,CAAJ,EAAyD;AACrDD,oBAAAA,KAAK;AACR;AACJ;;AACIM,gBAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBP,KAA9B;AACDH,gBAAAA,WAAW,CAACL,IAAZ,CAAiBQ,KAAjB;AAEH;;AAED,oBAAKN,QAAL,CAAc,UAAUc,KAAV,EAAiBC,KAAjB,EAAwB;AAClC,uBAAO;AACNC,kBAAAA,YAAY,EAAEb;AADR,iBAAP;AAGA,eAJJ,EAhBc,CAqBd;;;AACMc,cAAAA,SAtBQ,GAsBI,MAAKH,KAAL,CAAWE,YAAX,CAAwBnB,MAtB5B;AAwBde,cAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0B,MAAKC,KAAL,CAAWE,YAAX,CAAwBnB,MAA9D;AACAe,cAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBI,SAApC;;AAzBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9GD;AAAA,UA6IjBC,SA7IiB;AAAA;AAAA;AAAA;AAAA,6BA6IL;AAAA;;AAAA;AAAA;AAAA;AAAA;AACJC,cAAAA,WADI,GACU,EADV;AAEJhB,cAAAA,WAFI,GAEU,EAFV;AAAA;AAAA,qBAGa3B,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACC,OAAO,CAACc,aAAT,CAA5B,CAHb;;AAAA;AAGFC,cAAAA,MAHE;;AAIR,mBAAQC,CAAR,GAAU,CAAV,EAAYA,CAAC,GAACD,MAAM,CAACE,IAAP,CAAYH,aAAZ,CAA0BI,KAA1B,CAAgCC,MAA9C,EAAqDH,CAAC,EAAtD,EAAyD;AAC/CU,gBAAAA,GAD+C,GACzCX,MAAM,CAACE,IAAP,CAAYH,aAAZ,CAA0BI,KAA1B,CAAgCF,CAAhC,EAAmCW,OADM;AAEjDC,gBAAAA,KAFiD,GAEzC,CAFyC;;AAGrD,qBAASC,QAAT,IAAqBH,GAArB,EAA0B;AAC1B,sBAAII,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,GAArC,EAA0CG,QAA1C,CAAJ,EAAyD;AACrDD,oBAAAA,KAAK;AACR;AACJ;;AACIM,gBAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBP,KAA9B;AACDH,gBAAAA,WAAW,CAACL,IAAZ,CAAiBQ,KAAjB;AAEH;;AACDM,cAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBV,WAAhC;;AACA,mBAAQT,EAAR,GAAU,CAAV,EAAYA,EAAC,GAACS,WAAW,CAACN,MAA1B,EAAiCH,EAAC,EAAlC,EAAqC;AACjC,oBAAGS,WAAW,CAACT,EAAD,CAAX,GAAe,CAAlB,EAAoB;AAChByB,kBAAAA,WAAW,CAACrB,IAAZ,CAAiB,MAAjB;AACH;;AACD,oBAAGK,WAAW,CAACT,EAAD,CAAX,IAAgB,CAAnB,EAAqB;AACjByB,kBAAAA,WAAW,CAACrB,IAAZ,CAAiB,OAAjB;AACH;AACJ;;AACD,oBAAKE,QAAL,CAAc;AAACoB,gBAAAA,MAAM,EAAGD;AAAV,eAAd;;AAzBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7IK;AAAA,UA+KjBE,gBA/KiB;AAAA;AAAA;AAAA;AAAA,6BA+KE;AAAA;AAAA;AAAA;AAAA;AAAA;AACX/B,cAAAA,SADW,GACC,EADD;AAAA;AAAA,qBAEMd,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACC,OAAO,CAACc,aAAT,CAA5B,CAFN;;AAAA;AAETC,cAAAA,MAFS;;AAGf,mBAAQC,CAAR,GAAU,CAAV,EAAYA,CAAC,GAACD,MAAM,CAACE,IAAP,CAAYH,aAAZ,CAA0BI,KAA1B,CAAgCC,MAA9C,EAAqDH,CAAC,EAAtD,EAAyD;AACrDkB,gBAAAA,OAAO,CAACC,GAAR,CAAYpB,MAAM,CAACE,IAAP,CAAYH,aAAZ,CAA0BI,KAA1B,CAAgCF,CAAhC,EAAmCK,MAA/C;AACAT,gBAAAA,SAAS,CAACQ,IAAV,CAAeL,MAAM,CAACE,IAAP,CAAYH,aAAZ,CAA0BI,KAA1B,CAAgCF,CAAhC,EAAmCK,MAAlD;AACC;;AANU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/KF;;AAAA,UA0LjBuB,gBA1LiB;AAAA;AAAA;AAAA;AAAA;AAAA,+BA0LE,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEOjD,IAAI,CAACkD,wBAAL,EAFP;;AAAA;AAETC,gBAAAA,OAFS;AAGGC,gBAAAA,IAHH,GAGUD,OAAO,CAACE,QAHlB;AAAA;AAAA,uBAIMnD,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACE,SAAS,CAACiD,cAAX,EAA0B;AACvEC,kBAAAA,KAAK,EAAG;AACJ9B,oBAAAA,MAAM,EAAGwB,MADL;AAEJlB,oBAAAA,OAAO,EAAGqB;AAFN;AAD+D,iBAA1B,CAA5B,CAJN;;AAAA;AAITjC,gBAAAA,MAJS;AAUPqC,gBAAAA,IAVO,GAUF,EAVE;AAWbC,gBAAAA,OAXa,GAWH,EAXG;;AAYjB,qBAAQC,CAAR,GAAU,CAAV,EAAYA,CAAC,GAAC,EAAd,EAAiBA,CAAC,EAAlB,EAAqB;AAClBF,kBAAAA,IAAI,CAAChC,IAAL,CAAUkC,CAAV;AACI;;AACDpB,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAqBiB,IAAjC;AACCG,gBAAAA,CAhBU,GAgBNH,IAAI,CAACjC,MAhBC,EAiBJqC,CAjBI,GAiBA,CAjBA;;AAmBd,uBAAOD,CAAC,EAAR,EAAY;AACNC,kBAAAA,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACZ,MAAL,MAAiBU,CAAC,GAAC,CAAnB,CAAX,CAAJ;AAENF,kBAAAA,OAAO,CAACjC,IAAR,CAAagC,IAAI,CAACI,CAAD,CAAjB;AACAJ,kBAAAA,IAAI,CAACO,MAAL,CAAYH,CAAZ,EAAc,CAAd;AACI;;AACAtB,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAqBkB,OAAO,CAACO,KAAR,CAAc,CAAd,EAAgB,EAAhB,CAAjC;AACAP,gBAAAA,OAAO,GAAGA,OAAO,CAACO,KAAR,CAAc,CAAd,EAAgB,EAAhB,CAAV;AACA1B,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAqBkB,OAAO,CAAClC,MAAzC;AA3BU;AAAA,uBA4BDrB,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACE,SAAS,CAAC4D,oBAAX,EAC9B;AACIV,kBAAAA,KAAK,EAAC;AACNW,oBAAAA,MAAM,EAAGjB,MADH;AAENlB,oBAAAA,OAAO,EAAGqB,IAFJ;AAGNe,oBAAAA,KAAK,EAAGV,OAHF;AAINW,oBAAAA,WAAW,EAAG,CAAC,gBAAD,EAAkB,gBAAlB,EAAmC,gBAAnC,EAAoD,gBAApD,CAJR;AAKNC,oBAAAA,SAAS,EAAG,KALN;AAMNC,oBAAAA,QAAQ,EAAG;AANL;AADV,iBAD8B,CAA5B,CA5BC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA1LF;;AAAA;AAAA;AAAA;AAAA;;AAAA,UA0UbC,WA1Ua,GA0UD,UAACC,MAAD,EAAU;AAClB,YAAK9C,QAAL,CAAc;AACV+C,QAAAA,QAAQ,EAAGD,MAAM,CAACE,MAAP,CAAcC;AADf,OAAd;AAGH,KA9UY;;AAAA,UAgVbC,eAhVa,GAgVG,YAAI;AAChB,UAAID,KAAK,GAAG,CAAZ;AACA,UAAIE,KAAK,GAAG,CAAZ;AACAvC,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgC,MAAKC,KAAL,CAAWb,GAAvD;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4B,MAAKC,KAAL,CAAWiC,QAAnD;;AACA;AAAA;AAAA,+BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACG;AACIrD,gBAAAA,CAFP,GAEW,CAFX;AAAA;AAAA,uBAGyBpB,IAAI,CAACkD,wBAAL,EAHzB;;AAAA;AAGSC,gBAAAA,OAHT;AAISC,gBAAAA,IAJT,GAIgBD,OAAO,CAACE,QAJxB;AAAA;AAAA,uBAMyBnD,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACC,OAAO,CAACc,aAAT,CAA5B,CANzB;;AAAA;AAMS4D,gBAAAA,OANT;AAOGxC,gBAAAA,OAAO,CAACC,GAAR,CAAYuC,OAAO,CAACzD,IAAR,CAAaH,aAAb,CAA2BI,KAA3B,CAAiCC,MAA7C;;AAPH;AAAA,sBASUH,CAAC,GAAC0D,OAAO,CAACzD,IAAR,CAAaH,aAAb,CAA2BI,KAA3B,CAAiCC,MAT7C;AAAA;AAAA;AAAA;;AAWSe,gBAAAA,OAAO,CAACC,GAAR,CAAY,WAAWnB,CAAX,GAAe,OAA3B;;AAXT,sBAYU0D,OAAO,CAACzD,IAAR,CAAaH,aAAb,CAA2BI,KAA3B,CAAiCF,CAAjC,EAAoCK,MAApC,IAA8C,MAAKe,KAAL,CAAWiC,QAZnE;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAaiCvE,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACC,OAAO,CAAC2E,WAAT,EAAqB;AACnEtD,kBAAAA,MAAM,EAAG,MAAKe,KAAL,CAAWiC;AAD+C,iBAArB,CAA5B,CAbjC;;AAAA;AAaiBO,gBAAAA,OAbjB;;AAAA,sBAgBcA,OAAO,CAAC3D,IAAR,CAAa0D,WAAb,CAAyBhD,OAAzB,CAAiCR,MAAjC,GAA0C,CAhBxD;AAAA;AAAA;AAAA;;AAiBqB0D,gBAAAA,WAjBrB,GAiBmCD,OAAO,CAAC3D,IAAR,CAAa0D,WAAb,CAAyBhD,OAjB5D;AAkBqBmD,gBAAAA,cAlBrB,gCAkB0CD,WAlB1C,IAkBsD7B,IAlBtD;AAAA;AAAA,uBAmBsClD,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACE,SAAS,CAAC8E,cAAX,EACnD;AACA5B,kBAAAA,KAAK,EAAC;AACF9B,oBAAAA,MAAM,EAAG,MAAKe,KAAL,CAAWiC,QADlB;AAEF1C,oBAAAA,OAAO,EAAGmD;AAFR;AADN,iBADmD,CAA5B,CAnBtC;;AAAA;AAmBqBE,gBAAAA,QAnBrB;AAAA;AAAA,uBA0BqBlF,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACE,SAAS,CAACgF,oBAAX,EAC9B;AACI9B,kBAAAA,KAAK,EAAC;AACFW,oBAAAA,MAAM,EAAG,MAAK1B,KAAL,CAAWiC,QADlB;AAEF1C,oBAAAA,OAAO,EAAGmD;AAFR;AADV,iBAD8B,CAA5B,CA1BrB;;AAAA;AAiCqBI,gBAAAA,EAjCrB,GAiC0B,MAAK9C,KAAL,CAAWiC,QAjCrC;AAkCmBc,gBAAAA,IAlCnB,GAkC0B;AACXC,kBAAAA,QAAQ,EAAE,OADC;AAEXC,kBAAAA,KAAK,EAAEH;AAFI,iBAlC1B;;AAsCe,sBAAK7C,KAAL,CAAWiD,OAAX,CAAmBlE,IAAnB,CAAwB+D,IAAxB;;AAtCf;;AAAA;AA2CeI,gBAAAA,KAAK,CAAC,cAAD,CAAL;AA3Cf;;AAAA;AA+CO,oBAAGvE,CAAC,IAAK0D,OAAO,CAACzD,IAAR,CAAaH,aAAb,CAA2BI,KAA3B,CAAiCC,MAAjC,GAAwC,CAAjD,EAAoD;AAChDoE,kBAAAA,KAAK,CAAC,qBAAD,CAAL;AACH;;AACDvE,gBAAAA,CAAC;AAlDR;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;AA0DH,KA/YY;;AAET,UAAKoB,KAAL,GAAW;AACPb,MAAAA,GAAG,EAAE,EADE;AAEPe,MAAAA,YAAY,EAAE,EAFP;AAGPC,MAAAA,SAAS,EAAEiD,MAHJ;AAIP9C,MAAAA,MAAM,EAAE,EAJD;AAKP2B,MAAAA,QAAQ,EAACmB,MALF;AAMPf,MAAAA,KAAK,EAAGe;AAND,KAAX;AAQA,UAAKC,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBC,IAAxB,+BAA1B;AACA,UAAKC,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBD,IAAzB,+BAA3B;AACA,UAAKE,eAAL,GAAuB,MAAKA,eAAL,CAAqBF,IAArB,+BAAvB;AACA,UAAKG,iBAAL,GAAuB,MAAKA,iBAAL,CAAuBH,IAAvB,+BAAvB;AAbS;AAcZ;;;;wCAEe;AAAA;;AACZ;AACA,WAAK/E,OAAL;AACA,WAAKa,eAAL;AACA,WAAKgB,SAAL;AACA,WAAKsD,IAAL,GAAYhG,GAAG,CAACe,OAAJ,CACRd,gBAAgB,CAACQ,aAAD,CADR,EAEVwF,SAFU,CAEA;AACRC,QAAAA,IAAI,EAAE,cAACC,QAAD,EAAa;AACf/D,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6B8D,QAAQ,CAAC1B,KAAT,CAAetD,IAAf,CAAoBiF,gBAApB,CAAqCvE,OAArC,CAA6CR,MAAtF;AACAe,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B8D,QAAQ,CAAC1B,KAAT,CAAetD,IAAf,CAAoBiF,gBAApB,CAAqC7E,MAApE,EAFe,CAGf;;AACA,cAAM8E,cAAc,GAAGF,QAAQ,CAAC1B,KAAT,CAAetD,IAAf,CAAoBiF,gBAApB,CAAqCvE,OAArC,CAA6CR,MAApE;AACA,cAAMiF,gBAAgB,GAAG,MAAI,CAAChE,KAAL,CAAWE,YAApC;AACA,cAAM+D,mBAAmB,gCAAOD,gBAAP,IAAwBD,cAAxB,EAAzB;;AACA,UAAA,MAAI,CAAC7E,QAAL,CAAc;AAACgB,YAAAA,YAAY,EAAG+D;AAAhB,WAAd,EAPe,CAQf;;;AACA,cAAMC,OAAO,GAAGL,QAAQ,CAAC1B,KAAT,CAAetD,IAAf,CAAoBiF,gBAApB,CAAqC7E,MAArD;AACA,cAAMkF,SAAS,GAAG,MAAI,CAACnE,KAAL,CAAWb,GAA7B;AACA,cAAMiF,YAAY,gCAAOD,SAAP,IAAiBD,OAAjB,EAAlB;;AACA,UAAA,MAAI,CAAChF,QAAL,CAAc;AAACC,YAAAA,GAAG,EAAGiF;AAAP,WAAd;AACH;AAdO,OAFA,CAAZ;AAkBA,WAAKC,IAAL,GAAY3G,GAAG,CAACe,OAAJ,CACRd,gBAAgB,CAACU,cAAD,CADR,EAEVsF,SAFU,CAEA;AACRC,QAAAA,IAAI,EAAE,cAACC,QAAD,EAAa;AACnB,cAAMS,SAAS,GAAGT,QAAQ,CAAC1B,KAAT,CAAetD,IAAf,CAAoB0F,gBAApB,CAAqCtF,MAAvD;AACAa,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAsBuE,SAAlC;;AACA,cAAMF,YAAY,GAAG,MAAI,CAACpE,KAAL,CAAWb,GAAX,CAAeqF,MAAf,CAAsB,UAAAC,KAAK;AAAA,mBAAIA,KAAK,KAAKH,SAAd;AAAA,WAA3B,CAArB;;AACA,UAAA,MAAI,CAACpF,QAAL,CAAc;AAACC,YAAAA,GAAG,EAAGiF;AAAP,WAAd;AACC;AANO,OAFA,CAAZ,CAvBY,CAiCZ;;AACA,WAAKM,IAAL,GAAYhH,GAAG,CAACe,OAAJ,CACRd,gBAAgB,CAACS,cAAD,CADR,EAEVuF,SAFU,CAEA;AACRC,QAAAA,IAAI,EAAE,cAACC,QAAD,EAAa;AACf;AACA,cAAMxD,WAAW,GAAG,EAApB;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgC8D,QAAQ,CAAC1B,KAAT,CAAetD,IAAf,CAAoB8F,gBAApB,CAAqCpF,OAArC,CAA6CR,MAAzF;AACAe,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgC8D,QAAQ,CAAC1B,KAAT,CAAetD,IAAf,CAAoB8F,gBAApB,CAAqC1F,MAAjF;AACA,cAAM8E,cAAc,GAAGF,QAAQ,CAAC1B,KAAT,CAAetD,IAAf,CAAoB8F,gBAApB,CAAqCpF,OAArC,CAA6CR,MAApE;AACA,cAAMiF,gBAAgB,GAAG,MAAI,CAAChE,KAAL,CAAWE,YAApC;AACA,cAAM0E,SAAS,GAAGf,QAAQ,CAAC1B,KAAT,CAAetD,IAAf,CAAoB8F,gBAApB,CAAqC1F,MAAvD;AACA,cAAM4F,QAAQ,GAAG,MAAI,CAAC7E,KAAL,CAAWb,GAA5B;AACA,cAAM2F,KAAK,GAAGD,QAAQ,CAACE,SAAT,CAAmB,UAAAC,GAAG;AAAA,mBAAIA,GAAG,KAAKJ,SAAZ;AAAA,WAAtB,CAAd;AACA9E,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuB+E,KAAnC;AACA,cAAMb,mBAAmB,GAAGD,gBAA5B;AACAC,UAAAA,mBAAmB,CAACa,KAAD,CAAnB,GAA6Bf,cAA7B;;AAEA,eAAI,IAAInF,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACqF,mBAAmB,CAAClF,MAAlC,EAAyCH,CAAC,EAA1C,EAA6C;AACzC,gBAAGqF,mBAAmB,CAACrF,CAAD,CAAnB,GAAuB,CAA1B,EAA4B;AACxByB,cAAAA,WAAW,CAACrB,IAAZ,CAAiB,MAAjB;AACH;;AACD,gBAAGiF,mBAAmB,CAACrF,CAAD,CAAnB,IAAwB,CAA3B,EAA6B;AACzByB,cAAAA,WAAW,CAACrB,IAAZ,CAAiB,OAAjB;AACH;AACJ;;AACD,UAAA,MAAI,CAACE,QAAL,CAAc;AAACgB,YAAAA,YAAY,EAAG+D,mBAAhB;AACE3D,YAAAA,MAAM,EAAGD;AADX,WAAd;AAEH;AAzBO,OAFA,CAAZ;AA8BA,WAAK4E,cAAL;AACL;;;2CACuB;AACrB,WAAKvB,IAAL,CAAUwB,WAAV;AACA,WAAKR,IAAL,CAAUQ,WAAV;AACA,WAAKb,IAAL,CAAUa,WAAV;AACD;;;;;;;;;;;AAEApF,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;uBACM,KAAKoF,KAAL,CAAW,IAAX,C;;;AACNrF,gBAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,qBAAKxB,OAAL;AACA,qBAAKa,eAAL;AACA,qBAAKgB,SAAL;;;;;;;;;;;;;;;;;;0BAEIgF,E,EAAI;AACR,aAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,eAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAd;AAAA,OAAnB,CAAP;AACD,K,CAGH;;;;uCAgIuBI,C,EAAG;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKxF,KAAL,CAAWiD,OAAX,CAAmBlE,IAAnB,CAAwB,aAAxB;AACH;;;wCAEmBwG,C,EAAG;AACnBA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKxF,KAAL,CAAWiD,OAAX,CAAmBlE,IAAnB,CAAwB,YAAxB;AACH,K,CAED;;;;oCACgBwG,C,EAAG5G,C,EAAG;AAAA;;AAClB,UAAG,KAAKoB,KAAL,CAAWM,MAAX,CAAkB1B,CAAlB,KAAwB,OAA3B,EAAmC;AAC/B;AAAA;AAAA,iCAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEyBpB,IAAI,CAACkD,wBAAL,EAFzB;;AAAA;AAESC,kBAAAA,OAFT;AAGSC,kBAAAA,IAHT,GAGgBD,OAAO,CAACE,QAHxB;AAIGf,kBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwB,OAAO,MAAI,CAACC,KAAL,CAAWb,GAAX,CAAeP,CAAf,CAA3C;AACI8G,kBAAAA,OALP,GAKiB,MAAI,CAAC1F,KAAL,CAAWb,GAAX,CAAeP,CAAf,CALjB;AAMGkB,kBAAAA,OAAO,CAACC,GAAR,CAAY2F,OAAZ;AACA5F,kBAAAA,OAAO,CAACC,GAAR,CAAY,4CAA4Ca,IAA5C,GAAmD,gBAAnD,GAAqE,MAAI,CAACZ,KAAL,CAAWb,GAAX,CAAeP,CAAf,CAAjF;AAPH;AAAA,yBAQ4BlB,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACC,OAAO,CAACc,aAAT,CAA5B,CAR5B;;AAAA;AAQSiH,kBAAAA,UART;AASSlD,kBAAAA,WATT,GASuBkD,UAAU,CAAC9G,IAAX,CAAgBH,aAAhB,CAA8BI,KAA9B,CAAoCF,CAApC,EAAuCW,OAT9D;AAUSmD,kBAAAA,cAVT,gCAU8BD,WAV9B,IAU0C7B,IAV1C;AAAA;AAAA,yBAW0BlD,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACE,SAAS,CAAC8E,cAAX,EAC/C;AACI5B,oBAAAA,KAAK,EAAC;AACF9B,sBAAAA,MAAM,EAAGyG,OADP;AAEFnG,sBAAAA,OAAO,EAAGmD;AAFR;AADV,mBAD+C,CAA5B,CAX1B;;AAAA;AAWSE,kBAAAA,QAXT;AAAA;AAAA,yBAkBalF,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACE,SAAS,CAACgF,oBAAX,EAC9B;AACI9B,oBAAAA,KAAK,EAAC;AACFW,sBAAAA,MAAM,EAAGgE,OADP;AAEFnG,sBAAAA,OAAO,EAAGmD;AAFR;AADV,mBAD8B,CAA5B,CAlBb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAD;;AA0BI,YAAMhB,MAAM,GAAG,KAAK1B,KAAL,CAAWb,GAAX,CAAeP,CAAf,CAAf;AAEA,YAAImE,IAAI,GAAG;AACPC,UAAAA,QAAQ,EAAE,OADH;AAEPC,UAAAA,KAAK,EAAEvB;AAFA,SAAX;AAIA,aAAKzB,KAAL,CAAWiD,OAAX,CAAmBlE,IAAnB,CAAwB+D,IAAxB;AACP,OAlCD,MAmCK;AACDI,QAAAA,KAAK,CAAC,yDAAD,CAAL;AACH;AACJ,K,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;sCAGmBqC,C,EAAE;AACjBA,MAAAA,CAAC,CAACC,cAAF;AACA,UAAIG,GAAG,GAAC,CAAR;AACA,UAAIC,GAAG,GAAC,IAAR;AACA,UAAIpF,MAAM,GAAEY,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACZ,MAAL,MAAiB,CAACoF,GAAD,GAAO,CAACD,GAAzB,CAAX,IAA4C,CAACA,GAAzD;AACA9F,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+BU,MAA3C;AACA,WAAKD,gBAAL,CAAsBC,MAAtB;AACA,UAAIsC,IAAI,GAAG;AACPC,QAAAA,QAAQ,EAAE,OADH;AAEPC,QAAAA,KAAK,EAAExC;AAFA,OAAX;AAIA,WAAKR,KAAL,CAAWiD,OAAX,CAAmBlE,IAAnB,CAAwB+D,IAAxB;AAGA;;;;;;;;;;;;;;;AAgBH;;;kCAwEY;AAAA;;AACT,aAAOrD,MAAM,CAACoG,OAAP,CAAe,KAAK9F,KAAL,CAAWb,GAA1B,EAA+B4G,GAA/B,CAAmC,UAACC,CAAD,EAAIpH,CAAJ,EAAU;AAChD,eACA;AAAM,UAAA,SAAS,EAAC,WAAhB;AAA4B,UAAA,GAAG,EAAEA,CAAjC;AAAoC,UAAA,KAAK,EAAEA,CAA3C;AAA8C,UAAA,OAAO,EAAE,iBAAC4G,CAAD,EAAQ;AAAC,YAAA,MAAI,CAAChC,eAAL,CAAqBgC,CAArB,EAAuB5G,CAAvB;AAA0B,WAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFA,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAI,UAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAoB,MAAI,CAACoB,KAAL,CAAWb,GAAX,CAAeP,CAAf,CAApB,CADJ,EAEI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAuB,MAAI,CAACoB,KAAL,CAAWE,YAAX,CAAwBtB,CAAxB,CAAvB,OAFJ,EAGI;AAAI,UAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAwB,MAAI,CAACoB,KAAL,CAAWM,MAAX,CAAkB1B,CAAlB,CAAxB,CAHJ,CAHJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAVJ,CADA;AAcH,OAfM,CAAP;AAgBH;;;6BAGQ;AACL,aACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI;AAAQ,QAAA,SAAS,EAAC,kBAAlB;AAAqC,QAAA,OAAO,EAAE,KAAK2E,mBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,EAGI;AAAQ,QAAA,SAAS,EAAC,gBAAlB;AAAmC,QAAA,OAAO,EAAE,KAAKF,kBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,EAII;AAAK,QAAA,GAAG,EAAElG,GAAV;AAAe,QAAA,SAAS,EAAC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoC;AAAO,QAAA,QAAQ,EAAE,KAAK4E,WAAtB;AAAmC,QAAA,IAAI,EAAC,QAAxC;AAAiD,QAAA,SAAS,EAAC,gBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAApC,CADJ,EAEI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,OAA3B;AAAmC,QAAA,SAAS,EAAC,cAA7C;AAA4D,QAAA,OAAO,EAAE,KAAKK,eAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CALJ,EASI;AAAQ,QAAA,SAAS,EAAC,eAAlB;AAAkC,QAAA,OAAO,EAAE,KAAKqB,iBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BATJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI;AAAI,QAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFJ,EAGI;AAAI,QAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,CADJ,CADJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKwC,WAAL,EADL,CARJ,CAVJ,EAuBI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvBJ,CADJ;AA2BH;;;;EAlcsBhJ,KAAK,CAACC,S;;AAycjC,eAAeK,UAAU,CAACe,YAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\r\nimport img from '../img/background.png';\r\nimport './RoomListPage.css';\r\nimport RoomPage from './RoomPage';\r\nimport GameRulePage from './GameRulePage';\r\nimport ProfilePage from './ProfilePage';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Auth } from 'aws-amplify';\r\nimport Amplify, { API, graphqlOperation } from \"aws-amplify\";\r\nimport * as queries from './phaser/../../graphql/queries';\r\nimport * as mutations from '../graphql/mutations';\r\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\r\nimport aws_config from '../aws-exports';\r\nimport gql from 'graphql-tag';\r\nimport { Table } from 'react-bootstrap';\r\n\r\n  const subtoRoomData = `\r\n  subscription{\r\n    onCreateRoompage{\r\n        roomid players\r\n    }\r\n  }\r\n  `\r\n  const subtoRoomData2 = `\r\n  subscription{\r\n    onUpdateRoompage{\r\n        roomid players\r\n    }\r\n  }\r\n  `\r\n  const subtoRoomData3 = `\r\n  subscription{\r\n    onDeleteRoompage{\r\n        roomid players\r\n    }\r\n  }\r\n  `\r\n  \r\n\r\nclass RoomListPage extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            rID: '',\r\n            player_count: [],\r\n            roomCount: Number,\r\n            status: '',\r\n            inputNum:Number,\r\n            check : Number       \r\n        };\r\n        this.handleProfileClick = this.handleProfileClick.bind(this);\r\n        this.handleGameRuleClick = this.handleGameRuleClick.bind(this);\r\n        this.handleRoomClick = this.handleRoomClick.bind(this);\r\n        this.handleCreateClick=this.handleCreateClick.bind(this);\r\n    }\r\n           \r\ncomponentDidMount() {\r\n        //create\r\n        this.getRoom();\r\n        this.getPlayersCount();\r\n        this.getStatus();\r\n        this.subC = API.graphql(\r\n            graphqlOperation(subtoRoomData)\r\n        ).subscribe({\r\n            next: (roomData) =>{\r\n                console.log('we got the playerscount ' + roomData.value.data.onCreateRoompage.players.length);\r\n                console.log('we got the data', roomData.value.data.onCreateRoompage.roomid);\r\n                //players create sub\r\n                const newPlyersCount = roomData.value.data.onCreateRoompage.players.length;\r\n                const prevPlayersCount = this.state.player_count;\r\n                const updatedPlayersCount = [...prevPlayersCount,newPlyersCount];\r\n                this.setState({player_count : updatedPlayersCount});\r\n                //rid create sub\r\n                const newRoom = roomData.value.data.onCreateRoompage.roomid;\r\n                const prevRooms = this.state.rID;\r\n                const updatedRooms = [...prevRooms,newRoom];\r\n                this.setState({rID : updatedRooms });\r\n            }\r\n        });\r\n        this.subD = API.graphql(\r\n            graphqlOperation(subtoRoomData3)\r\n        ).subscribe({\r\n            next: (roomData) =>{\r\n            const deleterID = roomData.value.data.onDeleteRoompage.roomid;\r\n            console.log('the missing one is '+deleterID);\r\n            const updatedRooms = this.state.rID.filter(rooms => rooms !== deleterID)\r\n            this.setState({rID : updatedRooms});\r\n            }\r\n        })\r\n        //update\r\n        this.subU = API.graphql(\r\n            graphqlOperation(subtoRoomData2)\r\n        ).subscribe({\r\n            next: (roomData) =>{\r\n                //players update sub\r\n                const storeStatus = [];\r\n                console.log('we update the playerscount ' + roomData.value.data.onUpdateRoompage.players.length);\r\n                console.log('we update the playerscount ' + roomData.value.data.onUpdateRoompage.roomid);\r\n                const newPlyersCount = roomData.value.data.onUpdateRoompage.players.length;\r\n                const prevPlayersCount = this.state.player_count;\r\n                const newRoomID = roomData.value.data.onUpdateRoompage.roomid;\r\n                const roomlist = this.state.rID;\r\n                const index = roomlist.findIndex(num => num === newRoomID);\r\n                console.log('show me the index ' + index);\r\n                const updatedPlayersCount = prevPlayersCount;\r\n                updatedPlayersCount[index] = newPlyersCount; \r\n\r\n                for(let i=0;i<updatedPlayersCount.length;i++){\r\n                    if(updatedPlayersCount[i]<4){\r\n                        storeStatus.push('open');\r\n                    }\r\n                    if(updatedPlayersCount[i]>=4){\r\n                        storeStatus.push('close');\r\n                    }\r\n                }\r\n                this.setState({player_count : updatedPlayersCount,\r\n                                status : storeStatus});\r\n            }\r\n        });\r\n        \r\n        this.waitAndGetList();\r\n  }\r\n   componentWillUnmount() {\r\n     this.subC.unsubscribe();\r\n     this.subU.unsubscribe();\r\n     this.subD.unsubscribe();\r\n   }\r\nasync waitAndGetList() {\r\n    console.log('Just~~~~~~~~')\r\n    await this.sleep(1000)\r\n    console.log('wait 1 second');\r\n    this.getRoom();\r\n    this.getPlayersCount();\r\n    this.getStatus();\r\n  }\r\n  sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n  }\r\n\r\n\r\n//appsync get room (query)\r\ngetRoom = async () => {\r\n    var storeRoom = [];\r\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\r\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\r\n        storeRoom.push(result.data.listRoompages.items[i].roomid);\r\n        }\r\n    this.setState({rID : storeRoom });\r\n    }\r\n\r\ngetPlayersCount = async ()=>{\r\n    var playercount = [];\r\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\r\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\r\n        const obj = result.data.listRoompages.items[i].players;\r\n        var count = 0;\r\n        for (var property in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, property)) {\r\n            count++;\r\n        }\r\n    }\r\n         console.log('show the obj ' + count);\r\n        playercount.push(count);\r\n        \r\n    }\r\n    \r\n    this.setState(function (state, props) {\r\n        return {\r\n         player_count: playercount\r\n        }\r\n       });\r\n    //this.setState({player_count:playercount});\r\n    const roomCount = this.state.player_count.length;\r\n\r\n    console.log('TEST FOR playercount ' + this.state.player_count.length);\r\n    console.log('show the roomCount ' + roomCount);\r\n    \r\n}\r\n\r\n\r\n//appsync get status\r\ngetStatus = async() => {\r\n    var storeStatus = [];\r\n    var playercount = [];\r\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\r\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\r\n        const obj = result.data.listRoompages.items[i].players;\r\n        var count = 0;\r\n        for (var property in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, property)) {\r\n            count++;\r\n        }\r\n    }\r\n         console.log('show the obj ' + count);\r\n        playercount.push(count);\r\n        \r\n    }\r\n    console.log('get status check '+playercount);\r\n    for(let i=0;i<playercount.length;i++){\r\n        if(playercount[i]<4){\r\n            storeStatus.push('open');\r\n        }\r\n        if(playercount[i]>=4){\r\n            storeStatus.push('close');\r\n        }\r\n    }\r\n    this.setState({status : storeStatus});\r\n\r\n}  \r\n\r\n//appsync get the playerCount in each room \r\n// getPlayerCount = async () =>{\r\n//     var storePlayerCount = [];\r\n//     const result = await API.graphql(graphqlOperation(queries.getRoompage, {roomid : rID});\r\n// }\r\nhandleRanDomRoom = async () =>{\r\n    var storeRoom = [];\r\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\r\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\r\n        console.log(result.data.listRoompages.items[i].roomid);\r\n        storeRoom.push(result.data.listRoompages.items[i].roomid);\r\n        }\r\n    \r\n   \r\n}\r\n\r\nhandleCreateRoom = async (random) =>{\r\n    \r\n    const getUser = await Auth.currentAuthenticatedUser();\r\n                const name = getUser.username;\r\n    const result = await API.graphql(graphqlOperation(mutations.createRoompage,{\r\n        input : {\r\n            roomid : random,\r\n            players : name\r\n        }\r\n        }));\r\n        var nums=[];\r\n\t\tvar ranNums = [];\r\n\t\tfor(var k=0;k<52;k++){\r\n\t\t   nums.push(k);\r\n        }\r\n        console.log('show me the card '+ nums);\r\n\t\t   let m = nums.length,\r\n               n = 0;\r\n               \r\n\t    while (m--) {\r\n           n = Math.floor(Math.random() * (m+1));\r\n           \r\n\t\t   ranNums.push(nums[n]);\r\n\t\t   nums.splice(n,1);\r\n        }\r\n         console.log('show me the card '+ ranNums.slice(0,35));\r\n         ranNums = ranNums.slice(0,36);\r\n         console.log('show me the card '+ ranNums.length);\r\n            await API.graphql(graphqlOperation(mutations.createReadyPageTable, \r\n                {\r\n                    input:{\r\n                    roomID : random,\r\n                    players : name,\r\n                    cards : ranNums,\r\n                    readyStatus : ['Not Ready ....','Not Ready ....','Not Ready ....','Not Ready ....'],\r\n                    GameStart : false,\r\n                    readyNum : 0\r\n                    }}\r\n                ));\r\n}\r\n\r\n\r\n    handleProfileClick(e) {\r\n        e.preventDefault();\r\n        this.props.history.push('/my-account');\r\n    }\r\n\r\n    handleGameRuleClick(e) {\r\n        e.preventDefault();\r\n        this.props.history.push('/game-rule');\r\n    }\r\n    \r\n    //user allowed to enter the room only when the status of the room is not 'playing'\r\n    handleRoomClick(e, i) {\r\n        if(this.state.status[i] != 'close'){\r\n            (async () => {\r\n                //get current user name\r\n                const getUser = await Auth.currentAuthenticatedUser();\r\n                const name = getUser.username;\r\n                console.log('you click the room ' + typeof(this.state.rID[i]));\r\n                var roomnum = this.state.rID[i];\r\n                console.log(roomnum);\r\n                console.log('test for who click into a room , user :' + name + ' into a room #' +this.state.rID[i]);\r\n                const getPlayers = await API.graphql(graphqlOperation(queries.listRoompages));\r\n                const prevPlayers = getPlayers.data.listRoompages.items[i].players;\r\n                const updatedPlayers = [...prevPlayers,name];\r\n                const newThing = await API.graphql(graphqlOperation(mutations.updateRoompage, \r\n                    {\r\n                        input:{\r\n                            roomid : roomnum,\r\n                            players : updatedPlayers\r\n                        }\r\n                    }));\r\n                    await API.graphql(graphqlOperation(mutations.updateReadyPageTable, \r\n                        {\r\n                            input:{\r\n                                roomID : roomnum,\r\n                                players : updatedPlayers\r\n                            }\r\n                        }));\r\n            })();\r\n                const roomID = this.state.rID[i];\r\n                \r\n                let path = {\r\n                    pathname: '/room',\r\n                    query: roomID,\r\n                }\r\n                this.props.history.push(path);\r\n        }\r\n        else {\r\n            alert('This room is full. Please select to enter another room.');\r\n        }\r\n    }\r\n\r\n    //render the room button only when the room id is available\r\n    // renderRoom(i){\r\n    //     if (this.state.rID[i]){\r\n    //         return(\r\n    //             <button className=\"room-button\" onClick={(e) => {this.handleRoomClick(e,i)}}>\r\n    //                     Room {this.state.rID[i]} <br />\r\n    //                     {this.state.player_count[i]}/4 <br />\r\n    //                     {this.state.status[i]}\r\n    //             </button>\r\n    //         );\r\n    //     }\r\n    //     else {\r\n    //         return(\r\n    //             <button className=\"empty-room-button\"></button>\r\n    //         )\r\n    //     }\r\n    // }\r\n    \r\n\r\n    handleCreateClick (e){\r\n        e.preventDefault();\r\n        var min=1; \r\n        var max=9999;  \r\n        var random =Math.floor(Math.random() * (+max - +min)) + +min; \r\n        console.log(\"Random Number Generated : \" + random ); \r\n        this.handleCreateRoom(random);\r\n        let path = {\r\n            pathname: '/room',\r\n            query: random,\r\n        }\r\n        this.props.history.push(path);\r\n        \r\n        \r\n        /*\r\n        for(let i = 0; i < this.state.status.length; i++) {\r\n            if(this.state.status[i] == 'closed') {\r\n                let temp_status = this.state.status;\r\n                temp_status[i] = 'open';\r\n                let temp_player_count = this.state.player_count;\r\n                temp_player_count[i] = 1;\r\n                this.setState({\r\n                    status: temp_status,\r\n                    player_count: temp_player_count\r\n                });\r\n        \r\n            }\r\n        }\r\n        */\r\n       \r\n    }\r\n    inputChange=(number)=>{\r\n        this.setState({\r\n            inputNum : number.target.value\r\n        })\r\n    }\r\n\r\n    handleEnterRoom=()=>{\r\n        var value = 0;\r\n        var check = 0;\r\n        console.log('show me the rooms you have ' + this.state.rID);\r\n        console.log('show me what you typed ' + this.state.inputNum);\r\n        (async () => {\r\n            //get current user name\r\n            var i = 0;\r\n            const getUser = await Auth.currentAuthenticatedUser();\r\n            const name = getUser.username;\r\n            \r\n            const result1 = await API.graphql(graphqlOperation(queries.listRoompages));\r\n            console.log(result1.data.listRoompages.items.length);\r\n\r\n             while(i<result1.data.listRoompages.items.length){\r\n                 \r\n                  console.log('check ' + i + ' time'); \r\n                if(result1.data.listRoompages.items[i].roomid == this.state.inputNum){\r\n                    const result2 = await API.graphql(graphqlOperation(queries.getRoompage,{\r\n                        roomid : this.state.inputNum\r\n                        }))\r\n                    if(result2.data.getRoompage.players.length < 4){\r\n                        const prevPlayers = result2.data.getRoompage.players;\r\n                        const updatedPlayers = [...prevPlayers,name];\r\n                        const newThing = await API.graphql(graphqlOperation(mutations.updateRoompage, \r\n                        {\r\n                        input:{\r\n                            roomid : this.state.inputNum,\r\n                            players : updatedPlayers\r\n                        }\r\n                        }));\r\n                        await API.graphql(graphqlOperation(mutations.updateReadyPageTable, \r\n                            {\r\n                                input:{\r\n                                    roomID : this.state.inputNum,\r\n                                    players : updatedPlayers\r\n                                }\r\n                            }));\r\n                        const ID = this.state.inputNum;\r\n                        let path = {\r\n                        pathname: '/room',\r\n                        query: ID,\r\n                        }\r\n                        this.props.history.push(path);\r\n                        break;\r\n                        }\r\n                    \r\n                    else{\r\n                        alert('room is full');\r\n                        break;\r\n                    }\r\n                }\r\n                if(i == (result1.data.listRoompages.items.length-1)){\r\n                    alert(\"room does not exist\");\r\n                }\r\n                i++;\r\n            }\r\n            \r\n            \r\n\r\n            \r\n        })();\r\n       \r\n    }\r\n\r\n    _renderRoom(){\r\n        return Object.entries(this.state.rID).map((r, i) => {\r\n            return (\r\n            <div  className=\"table-row\" key={i} value={i} onClick={(e)  => {this.handleRoomClick(e,i)}}>\r\n            <br />\r\n            <br />\r\n                <tr>\r\n                    <th className=\"id\">{this.state.rID[i]}</th>\r\n                    <th className=\"count\">{this.state.player_count[i]}/4</th>\r\n                    <th className=\"status\">{this.state.status[i]}</th>\r\n                    \r\n                </tr>\r\n                <br />\r\n                <br />\r\n            </div>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"room-list\">\r\n                <h1 className=\"room-list-header\">SWITCH</h1>\r\n                <button className=\"game-rule-button\" onClick={this.handleGameRuleClick}>Game Rule</button>\r\n                <button className=\"profile-button\" onClick={this.handleProfileClick}>My Account</button>\r\n                <img src={img} className=\"room-img\" />\r\n                <form>\r\n                    <label className=\"room-num\">Room #: <input onChange={this.inputChange} type=\"number\" className=\"room-num-input\" /></label>\r\n                    <input type='button' value=\"ENTER\" className=\"enter-button\" onClick={this.handleEnterRoom} />\r\n                </form>\r\n                <button className=\"create-button\" onClick={this.handleCreateClick}>Create New Room</button>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"id\">Room ID</th>\r\n                            <th className=\"count\">Player Number</th>\r\n                            <th className=\"status\">Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this._renderRoom()}\r\n                        \r\n                    </tbody>\r\n                </table>\r\n                <div className=\"block\"></div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default withRouter(RoomListPage);\r\n\r\n"]},"metadata":{},"sourceType":"module"}