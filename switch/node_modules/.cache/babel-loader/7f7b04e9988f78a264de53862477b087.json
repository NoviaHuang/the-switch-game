{"ast":null,"code":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2019 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nvar CircleContains = require('../../geom/circle/Contains');\n\nvar Class = require('../../utils/Class');\n\nvar CONST = require('./const');\n\nvar RectangleContains = require('../../geom/rectangle/Contains');\n\nvar Vector2 = require('../../math/Vector2');\n/**\n * @classdesc\n * A Static Arcade Physics Body.\n *\n * A Static Body never moves, and isn't automatically synchronized with its parent Game Object.\n * That means if you make any change to the parent's origin, position, or scale after creating or adding the body, you'll need to update the Body manually.\n *\n * A Static Body can collide with other Bodies, but is never moved by collisions.\n *\n * Its dynamic counterpart is {@link Phaser.Physics.Arcade.Body}.\n *\n * @class StaticBody\n * @memberof Phaser.Physics.Arcade\n * @constructor\n * @since 3.0.0\n *\n * @param {Phaser.Physics.Arcade.World} world - The Arcade Physics simulation this Static Body belongs to.\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object this Static Body belongs to.\n */\n\n\nvar StaticBody = new Class({\n  initialize: function StaticBody(world, gameObject) {\n    var width = gameObject.width ? gameObject.width : 64;\n    var height = gameObject.height ? gameObject.height : 64;\n    /**\n     * The Arcade Physics simulation this Static Body belongs to.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#world\n     * @type {Phaser.Physics.Arcade.World}\n     * @since 3.0.0\n     */\n\n    this.world = world;\n    /**\n     * The Game Object this Static Body belongs to.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#gameObject\n     * @type {Phaser.GameObjects.GameObject}\n     * @since 3.0.0\n     */\n\n    this.gameObject = gameObject;\n    /**\n     * Whether the Static Body's boundary is drawn to the debug display.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#debugShowBody\n     * @type {boolean}\n     * @since 3.0.0\n     */\n\n    this.debugShowBody = world.defaults.debugShowStaticBody;\n    /**\n     * The color of this Static Body on the debug display.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#debugBodyColor\n     * @type {integer}\n     * @since 3.0.0\n     */\n\n    this.debugBodyColor = world.defaults.staticBodyDebugColor;\n    /**\n     * Whether this Static Body is updated by the physics simulation.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#enable\n     * @type {boolean}\n     * @default true\n     * @since 3.0.0\n     */\n\n    this.enable = true;\n    /**\n     * Whether this Static Body's boundary is circular (`true`) or rectangular (`false`).\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#isCircle\n     * @type {boolean}\n     * @default false\n     * @since 3.0.0\n     */\n\n    this.isCircle = false;\n    /**\n     * If this Static Body is circular, this is the unscaled radius of the Static Body's boundary, as set by {@link #setCircle}, in source pixels.\n     * The true radius is equal to `halfWidth`.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#radius\n     * @type {number}\n     * @default 0\n     * @since 3.0.0\n     */\n\n    this.radius = 0;\n    /**\n     * The offset of this Static Body's actual position from any updated position.\n     *\n     * Unlike a dynamic Body, a Static Body does not follow its Game Object. As such, this offset is only applied when resizing the Static Body.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#offset\n     * @type {Phaser.Math.Vector2}\n     * @since 3.0.0\n     */\n\n    this.offset = new Vector2();\n    /**\n     * The position of this Static Body within the simulation.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#position\n     * @type {Phaser.Math.Vector2}\n     * @since 3.0.0\n     */\n\n    this.position = new Vector2(gameObject.x - gameObject.displayOriginX, gameObject.y - gameObject.displayOriginY);\n    /**\n     * The width of the Static Body's boundary, in pixels.\n     * If the Static Body is circular, this is also the Static Body's diameter.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#width\n     * @type {number}\n     * @since 3.0.0\n     */\n\n    this.width = width;\n    /**\n     * The height of the Static Body's boundary, in pixels.\n     * If the Static Body is circular, this is also the Static Body's diameter.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#height\n     * @type {number}\n     * @since 3.0.0\n     */\n\n    this.height = height;\n    /**\n     * Half the Static Body's width, in pixels.\n     * If the Static Body is circular, this is also the Static Body's radius.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#halfWidth\n     * @type {number}\n     * @since 3.0.0\n     */\n\n    this.halfWidth = Math.abs(this.width / 2);\n    /**\n     * Half the Static Body's height, in pixels.\n     * If the Static Body is circular, this is also the Static Body's radius.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#halfHeight\n     * @type {number}\n     * @since 3.0.0\n     */\n\n    this.halfHeight = Math.abs(this.height / 2);\n    /**\n     * The center of the Static Body's boundary.\n     * This is the midpoint of its `position` (top-left corner) and its bottom-right corner.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#center\n     * @type {Phaser.Math.Vector2}\n     * @since 3.0.0\n     */\n\n    this.center = new Vector2(gameObject.x + this.halfWidth, gameObject.y + this.halfHeight);\n    /**\n     * A constant zero velocity used by the Arcade Physics simulation for calculations.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#velocity\n     * @type {Phaser.Math.Vector2}\n     * @readonly\n     * @since 3.0.0\n     */\n\n    this.velocity = Vector2.ZERO;\n    /**\n     * A constant `false` value expected by the Arcade Physics simulation.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#allowGravity\n     * @type {boolean}\n     * @readonly\n     * @default false\n     * @since 3.0.0\n     */\n\n    this.allowGravity = false;\n    /**\n     * Gravitational force applied specifically to this Body. Values are in pixels per second squared. Always zero for a Static Body.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#gravity\n     * @type {Phaser.Math.Vector2}\n     * @readonly\n     * @since 3.0.0\n     */\n\n    this.gravity = Vector2.ZERO;\n    /**\n     * Rebound, or restitution, following a collision, relative to 1. Always zero for a Static Body.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#bounce\n     * @type {Phaser.Math.Vector2}\n     * @readonly\n     * @since 3.0.0\n     */\n\n    this.bounce = Vector2.ZERO; //  If true this Body will dispatch events\n\n    /**\n     * Whether the simulation emits a `worldbounds` event when this StaticBody collides with the world boundary.\n     * Always false for a Static Body. (Static Bodies never collide with the world boundary and never trigger a `worldbounds` event.)\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#onWorldBounds\n     * @type {boolean}\n     * @readonly\n     * @default false\n     * @since 3.0.0\n     */\n\n    this.onWorldBounds = false;\n    /**\n     * Whether the simulation emits a `collide` event when this StaticBody collides with another.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#onCollide\n     * @type {boolean}\n     * @default false\n     * @since 3.0.0\n     */\n\n    this.onCollide = false;\n    /**\n     * Whether the simulation emits an `overlap` event when this StaticBody overlaps with another.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#onOverlap\n     * @type {boolean}\n     * @default false\n     * @since 3.0.0\n     */\n\n    this.onOverlap = false;\n    /**\n     * The StaticBody's inertia, relative to a default unit (1). With `bounce`, this affects the exchange of momentum (velocities) during collisions.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#mass\n     * @type {number}\n     * @default 1\n     * @since 3.0.0\n     */\n\n    this.mass = 1;\n    /**\n     * Whether this object can be moved by collisions with another body.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#immovable\n     * @type {boolean}\n     * @default true\n     * @since 3.0.0\n     */\n\n    this.immovable = true;\n    /**\n     * A flag disabling the default horizontal separation of colliding bodies. Pass your own `collideHandler` to the collider.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#customSeparateX\n     * @type {boolean}\n     * @default false\n     * @since 3.0.0\n     */\n\n    this.customSeparateX = false;\n    /**\n     * A flag disabling the default vertical separation of colliding bodies. Pass your own `collideHandler` to the collider.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#customSeparateY\n     * @type {boolean}\n     * @default false\n     * @since 3.0.0\n     */\n\n    this.customSeparateY = false;\n    /**\n     * The amount of horizontal overlap (before separation), if this Body is colliding with another.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#overlapX\n     * @type {number}\n     * @default 0\n     * @since 3.0.0\n     */\n\n    this.overlapX = 0;\n    /**\n     * The amount of vertical overlap (before separation), if this Body is colliding with another.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#overlapY\n     * @type {number}\n     * @default 0\n     * @since 3.0.0\n     */\n\n    this.overlapY = 0;\n    /**\n     * The amount of overlap (before separation), if this StaticBody is circular and colliding with another circular body.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#overlapR\n     * @type {number}\n     * @default 0\n     * @since 3.0.0\n     */\n\n    this.overlapR = 0;\n    /**\n     * Whether this StaticBody has ever overlapped with another while both were not moving.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#embedded\n     * @type {boolean}\n     * @default false\n     * @since 3.0.0\n     */\n\n    this.embedded = false;\n    /**\n     * Whether this StaticBody interacts with the world boundary.\n     * Always false for a Static Body. (Static Bodies never collide with the world boundary.)\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#collideWorldBounds\n     * @type {boolean}\n     * @readonly\n     * @default false\n     * @since 3.0.0\n     */\n\n    this.collideWorldBounds = false;\n    /**\n     * Whether this StaticBody is checked for collisions and for which directions. You can set `checkCollision.none = false` to disable collision checks.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#checkCollision\n     * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\n     * @since 3.0.0\n     */\n\n    this.checkCollision = {\n      none: false,\n      up: true,\n      down: true,\n      left: true,\n      right: true\n    };\n    /**\n     * Whether this StaticBody has ever collided with another body and in which direction.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#touching\n     * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\n     * @since 3.0.0\n     */\n\n    this.touching = {\n      none: true,\n      up: false,\n      down: false,\n      left: false,\n      right: false\n    };\n    /**\n     * Whether this StaticBody was colliding with another body during the last step or any previous step, and in which direction.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#wasTouching\n     * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\n     * @since 3.0.0\n     */\n\n    this.wasTouching = {\n      none: true,\n      up: false,\n      down: false,\n      left: false,\n      right: false\n    };\n    /**\n     * Whether this StaticBody has ever collided with a tile or the world boundary.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#blocked\n     * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\n     * @since 3.0.0\n     */\n\n    this.blocked = {\n      none: true,\n      up: false,\n      down: false,\n      left: false,\n      right: false\n    };\n    /**\n     * The StaticBody's physics type (static by default).\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#physicsType\n     * @type {integer}\n     * @default Phaser.Physics.Arcade.STATIC_BODY\n     * @since 3.0.0\n     */\n\n    this.physicsType = CONST.STATIC_BODY;\n    /**\n     * The calculated change in the Body's horizontal position during the current step.\n     * For a static body this is always zero.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#_dx\n     * @type {number}\n     * @private\n     * @default 0\n     * @since 3.10.0\n     */\n\n    this._dx = 0;\n    /**\n     * The calculated change in the Body's vertical position during the current step.\n     * For a static body this is always zero.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#_dy\n     * @type {number}\n     * @private\n     * @default 0\n     * @since 3.10.0\n     */\n\n    this._dy = 0;\n  },\n\n  /**\n   * Changes the Game Object this Body is bound to.\n   * First it removes its reference from the old Game Object, then sets the new one.\n   * You can optionally update the position and dimensions of this Body to reflect that of the new Game Object.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#setGameObject\n   * @since 3.1.0\n   *\n   * @param {Phaser.GameObjects.GameObject} gameObject - The new Game Object that will own this Body.\n   * @param {boolean} [update=true] - Reposition and resize this Body to match the new Game Object?\n   *\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n   *\n   * @see Phaser.Physics.Arcade.StaticBody#updateFromGameObject\n   */\n  setGameObject: function setGameObject(gameObject, update) {\n    if (gameObject && gameObject !== this.gameObject) {\n      //  Remove this body from the old game object\n      this.gameObject.body = null;\n      gameObject.body = this; //  Update our reference\n\n      this.gameObject = gameObject;\n    }\n\n    if (update) {\n      this.updateFromGameObject();\n    }\n\n    return this;\n  },\n\n  /**\n   * Updates this Static Body so that its position and dimensions are updated\n   * based on the current Game Object it is bound to.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#updateFromGameObject\n   * @since 3.1.0\n   *\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n   */\n  updateFromGameObject: function updateFromGameObject() {\n    this.world.staticTree.remove(this);\n    var gameObject = this.gameObject;\n    gameObject.getTopLeft(this.position);\n    this.width = gameObject.displayWidth;\n    this.height = gameObject.displayHeight;\n    this.halfWidth = Math.abs(this.width / 2);\n    this.halfHeight = Math.abs(this.height / 2);\n    this.center.set(this.position.x + this.halfWidth, this.position.y + this.halfHeight);\n    this.world.staticTree.insert(this);\n    return this;\n  },\n\n  /**\n   * Sets the offset of the body.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#setOffset\n   * @since 3.4.0\n   *\n   * @param {number} x - The horizontal offset of the Body from the Game Object's center.\n   * @param {number} y - The vertical offset of the Body from the Game Object's center.\n   *\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n   */\n  setOffset: function setOffset(x, y) {\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.world.staticTree.remove(this);\n    this.position.x -= this.offset.x;\n    this.position.y -= this.offset.y;\n    this.offset.set(x, y);\n    this.position.x += this.offset.x;\n    this.position.y += this.offset.y;\n    this.updateCenter();\n    this.world.staticTree.insert(this);\n    return this;\n  },\n\n  /**\n   * Sets the size of the body.\n   * Resets the width and height to match current frame, if no width and height provided and a frame is found.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#setSize\n   * @since 3.0.0\n   *\n   * @param {integer} [width] - The width of the Body in pixels. Cannot be zero. If not given, and the parent Game Object has a frame, it will use the frame width.\n   * @param {integer} [height] - The height of the Body in pixels. Cannot be zero. If not given, and the parent Game Object has a frame, it will use the frame height.\n   * @param {number} [offsetX] - The horizontal offset of the Body from the Game Object's center.\n   * @param {number} [offsetY] - The vertical offset of the Body from the Game Object's center.\n   *\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n   */\n  setSize: function setSize(width, height, offsetX, offsetY) {\n    if (offsetX === undefined) {\n      offsetX = this.offset.x;\n    }\n\n    if (offsetY === undefined) {\n      offsetY = this.offset.y;\n    }\n\n    var gameObject = this.gameObject;\n\n    if (!width && gameObject.frame) {\n      width = gameObject.frame.realWidth;\n    }\n\n    if (!height && gameObject.frame) {\n      height = gameObject.frame.realHeight;\n    }\n\n    this.world.staticTree.remove(this);\n    this.width = width;\n    this.height = height;\n    this.halfWidth = Math.floor(width / 2);\n    this.halfHeight = Math.floor(height / 2);\n    this.offset.set(offsetX, offsetY);\n    this.updateCenter();\n    this.isCircle = false;\n    this.radius = 0;\n    this.world.staticTree.insert(this);\n    return this;\n  },\n\n  /**\n   * Sets this Static Body to have a circular body and sets its sizes and position.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#setCircle\n   * @since 3.0.0\n   *\n   * @param {number} radius - The radius of the StaticBody, in pixels.\n   * @param {number} [offsetX] - The horizontal offset of the StaticBody from its Game Object, in pixels.\n   * @param {number} [offsetY] - The vertical offset of the StaticBody from its Game Object, in pixels.\n   *\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n   */\n  setCircle: function setCircle(radius, offsetX, offsetY) {\n    if (offsetX === undefined) {\n      offsetX = this.offset.x;\n    }\n\n    if (offsetY === undefined) {\n      offsetY = this.offset.y;\n    }\n\n    if (radius > 0) {\n      this.world.staticTree.remove(this);\n      this.isCircle = true;\n      this.radius = radius;\n      this.width = radius * 2;\n      this.height = radius * 2;\n      this.halfWidth = Math.floor(this.width / 2);\n      this.halfHeight = Math.floor(this.height / 2);\n      this.offset.set(offsetX, offsetY);\n      this.updateCenter();\n      this.world.staticTree.insert(this);\n    } else {\n      this.isCircle = false;\n    }\n\n    return this;\n  },\n\n  /**\n   * Updates the StaticBody's `center` from its `position` and dimensions.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#updateCenter\n   * @since 3.0.0\n   */\n  updateCenter: function updateCenter() {\n    this.center.set(this.position.x + this.halfWidth, this.position.y + this.halfHeight);\n  },\n\n  /**\n   * Resets this Body to the given coordinates. Also positions its parent Game Object to the same coordinates.\n   * Similar to `updateFromGameObject`, but doesn't modify the Body's dimensions.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#reset\n   * @since 3.0.0\n   *\n   * @param {number} [x] - The x coordinate to reset the body to. If not given will use the parent Game Object's coordinate.\n   * @param {number} [y] - The y coordinate to reset the body to. If not given will use the parent Game Object's coordinate.\n   */\n  reset: function reset(x, y) {\n    var gameObject = this.gameObject;\n\n    if (x === undefined) {\n      x = gameObject.x;\n    }\n\n    if (y === undefined) {\n      y = gameObject.y;\n    }\n\n    this.world.staticTree.remove(this);\n    gameObject.setPosition(x, y);\n    gameObject.getTopLeft(this.position);\n    this.updateCenter();\n    this.world.staticTree.insert(this);\n  },\n\n  /**\n   * NOOP function. A Static Body cannot be stopped.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#stop\n   * @since 3.0.0\n   *\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n   */\n  stop: function stop() {\n    return this;\n  },\n\n  /**\n   * Returns the x and y coordinates of the top left and bottom right points of the StaticBody.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#getBounds\n   * @since 3.0.0\n   *\n   * @param {Phaser.Types.Physics.Arcade.ArcadeBodyBounds} obj - The object which will hold the coordinates of the bounds.\n   *\n   * @return {Phaser.Types.Physics.Arcade.ArcadeBodyBounds} The same object that was passed with `x`, `y`, `right` and `bottom` values matching the respective values of the StaticBody.\n   */\n  getBounds: function getBounds(obj) {\n    obj.x = this.x;\n    obj.y = this.y;\n    obj.right = this.right;\n    obj.bottom = this.bottom;\n    return obj;\n  },\n\n  /**\n   * Checks to see if a given x,y coordinate is colliding with this Static Body.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#hitTest\n   * @since 3.0.0\n   *\n   * @param {number} x - The x coordinate to check against this body.\n   * @param {number} y - The y coordinate to check against this body.\n   *\n   * @return {boolean} `true` if the given coordinate lies within this body, otherwise `false`.\n   */\n  hitTest: function hitTest(x, y) {\n    return this.isCircle ? CircleContains(this, x, y) : RectangleContains(this, x, y);\n  },\n\n  /**\n   * NOOP\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#postUpdate\n   * @since 3.12.0\n   */\n  postUpdate: function postUpdate() {},\n\n  /**\n   * The absolute (non-negative) change in this StaticBody's horizontal position from the previous step. Always zero.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#deltaAbsX\n   * @since 3.0.0\n   *\n   * @return {number} Always zero for a Static Body.\n   */\n  deltaAbsX: function deltaAbsX() {\n    return 0;\n  },\n\n  /**\n   * The absolute (non-negative) change in this StaticBody's vertical position from the previous step. Always zero.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#deltaAbsY\n   * @since 3.0.0\n   *\n   * @return {number} Always zero for a Static Body.\n   */\n  deltaAbsY: function deltaAbsY() {\n    return 0;\n  },\n\n  /**\n   * The change in this StaticBody's horizontal position from the previous step. Always zero.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#deltaX\n   * @since 3.0.0\n   *\n   * @return {number} The change in this StaticBody's velocity from the previous step. Always zero.\n   */\n  deltaX: function deltaX() {\n    return 0;\n  },\n\n  /**\n   * The change in this StaticBody's vertical position from the previous step. Always zero.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#deltaY\n   * @since 3.0.0\n   *\n   * @return {number} The change in this StaticBody's velocity from the previous step. Always zero.\n   */\n  deltaY: function deltaY() {\n    return 0;\n  },\n\n  /**\n   * The change in this StaticBody's rotation from the previous step. Always zero.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#deltaZ\n   * @since 3.0.0\n   *\n   * @return {number} The change in this StaticBody's rotation from the previous step. Always zero.\n   */\n  deltaZ: function deltaZ() {\n    return 0;\n  },\n\n  /**\n   * Disables this Body and marks it for destruction during the next step.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#destroy\n   * @since 3.0.0\n   */\n  destroy: function destroy() {\n    this.enable = false;\n    this.world.pendingDestroy.set(this);\n  },\n\n  /**\n   * Draws a graphical representation of the StaticBody for visual debugging purposes.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#drawDebug\n   * @since 3.0.0\n   *\n   * @param {Phaser.GameObjects.Graphics} graphic - The Graphics object to use for the debug drawing of the StaticBody.\n   */\n  drawDebug: function drawDebug(graphic) {\n    var pos = this.position;\n    var x = pos.x + this.halfWidth;\n    var y = pos.y + this.halfHeight;\n\n    if (this.debugShowBody) {\n      graphic.lineStyle(1, this.debugBodyColor, 1);\n\n      if (this.isCircle) {\n        graphic.strokeCircle(x, y, this.width / 2);\n      } else {\n        graphic.strokeRect(pos.x, pos.y, this.width, this.height);\n      }\n    }\n  },\n\n  /**\n   * Indicates whether the StaticBody is going to be showing a debug visualization during postUpdate.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#willDrawDebug\n   * @since 3.0.0\n   *\n   * @return {boolean} Whether or not the StaticBody is going to show the debug visualization during postUpdate.\n   */\n  willDrawDebug: function willDrawDebug() {\n    return this.debugShowBody;\n  },\n\n  /**\n   * Sets the Mass of the StaticBody. Will set the Mass to 0.1 if the value passed is less than or equal to zero.\n   *\n   * @method Phaser.Physics.Arcade.StaticBody#setMass\n   * @since 3.0.0\n   *\n   * @param {number} value - The value to set the Mass to. Values of zero or less are changed to 0.1.\n   *\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n   */\n  setMass: function setMass(value) {\n    if (value <= 0) {\n      //  Causes havoc otherwise\n      value = 0.1;\n    }\n\n    this.mass = value;\n    return this;\n  },\n\n  /**\n   * The x coordinate of the StaticBody.\n   *\n   * @name Phaser.Physics.Arcade.StaticBody#x\n   * @type {number}\n   * @since 3.0.0\n   */\n  x: {\n    get: function get() {\n      return this.position.x;\n    },\n    set: function set(value) {\n      this.world.staticTree.remove(this);\n      this.position.x = value;\n      this.world.staticTree.insert(this);\n    }\n  },\n\n  /**\n   * The y coordinate of the StaticBody.\n   *\n   * @name Phaser.Physics.Arcade.StaticBody#y\n   * @type {number}\n   * @since 3.0.0\n   */\n  y: {\n    get: function get() {\n      return this.position.y;\n    },\n    set: function set(value) {\n      this.world.staticTree.remove(this);\n      this.position.y = value;\n      this.world.staticTree.insert(this);\n    }\n  },\n\n  /**\n   * Returns the left-most x coordinate of the area of the StaticBody.\n   *\n   * @name Phaser.Physics.Arcade.StaticBody#left\n   * @type {number}\n   * @readonly\n   * @since 3.0.0\n   */\n  left: {\n    get: function get() {\n      return this.position.x;\n    }\n  },\n\n  /**\n   * The right-most x coordinate of the area of the StaticBody.\n   *\n   * @name Phaser.Physics.Arcade.StaticBody#right\n   * @type {number}\n   * @readonly\n   * @since 3.0.0\n   */\n  right: {\n    get: function get() {\n      return this.position.x + this.width;\n    }\n  },\n\n  /**\n   * The highest y coordinate of the area of the StaticBody.\n   *\n   * @name Phaser.Physics.Arcade.StaticBody#top\n   * @type {number}\n   * @readonly\n   * @since 3.0.0\n   */\n  top: {\n    get: function get() {\n      return this.position.y;\n    }\n  },\n\n  /**\n   * The lowest y coordinate of the area of the StaticBody. (y + height)\n   *\n   * @name Phaser.Physics.Arcade.StaticBody#bottom\n   * @type {number}\n   * @readonly\n   * @since 3.0.0\n   */\n  bottom: {\n    get: function get() {\n      return this.position.y + this.height;\n    }\n  }\n});\nmodule.exports = StaticBody;","map":null,"metadata":{},"sourceType":"script"}