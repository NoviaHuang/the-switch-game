{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CSSBlendModes = require('./CSSBlendModes');\n\nvar GameObject = require('../GameObject');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.DOMElement#renderWebGL\r\n * @since 3.17.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active renderer.\r\n * @param {Phaser.GameObjects.DOMElement} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar DOMElementCSSRenderer = function DOMElementCSSRenderer(renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var node = src.node;\n  var style = node.style;\n\n  if (!node || !style || GameObject.RENDER_MASK !== src.renderFlags || src.cameraFilter !== 0 && src.cameraFilter & camera.id || src.parentContainer && !src.parentContainer.willRender()) {\n    if (node) {\n      style.display = 'none';\n    }\n\n    return;\n  }\n\n  var parent = src.parentContainer;\n  var alpha = camera.alpha * src.alpha;\n\n  if (parent) {\n    alpha *= parent.alpha;\n  }\n\n  var camMatrix = renderer._tempMatrix1;\n  var srcMatrix = renderer._tempMatrix2;\n  var calcMatrix = renderer._tempMatrix3;\n  var dx = 0;\n  var dy = 0;\n  var tx = '0%';\n  var ty = '0%';\n\n  if (parentMatrix) {\n    dx = src.width * src.scaleX * src.originX;\n    dy = src.height * src.scaleY * src.originY;\n    srcMatrix.applyITRS(src.x - dx, src.y - dy, src.rotation, src.scaleX, src.scaleY);\n    camMatrix.copyFrom(camera.matrix); //  Multiply the camera by the parent matrix\n\n    camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY); //  Undo the camera scroll\n\n    srcMatrix.e = src.x - dx;\n    srcMatrix.f = src.y - dy; //  Multiply by the src matrix, store result in calcMatrix\n\n    camMatrix.multiply(srcMatrix, calcMatrix);\n  } else {\n    dx = src.width * src.originX;\n    dy = src.height * src.originY;\n    srcMatrix.applyITRS(src.x - dx, src.y - dy, src.rotation, src.scaleX, src.scaleY);\n    camMatrix.copyFrom(camera.matrix);\n    tx = 100 * src.originX + '%';\n    ty = 100 * src.originY + '%';\n    srcMatrix.e -= camera.scrollX * src.scrollFactorX;\n    srcMatrix.f -= camera.scrollY * src.scrollFactorY; //  Multiply by the src matrix, store result in calcMatrix\n\n    camMatrix.multiply(srcMatrix, calcMatrix);\n  }\n\n  if (!src.transformOnly) {\n    style.display = 'block';\n    style.opacity = alpha;\n    style.zIndex = src._depth;\n    style.pointerEvents = 'auto';\n    style.mixBlendMode = CSSBlendModes[src._blendMode];\n  } // https://developer.mozilla.org/en-US/docs/Web/CSS/transform\n\n\n  style.transform = calcMatrix.getCSSMatrix() + ' skew(' + src.skewX + 'rad, ' + src.skewY + 'rad)' + ' rotate3d(' + src.rotate3d.x + ',' + src.rotate3d.y + ',' + src.rotate3d.z + ',' + src.rotate3d.w + src.rotate3dAngle + ')';\n  style.transformOrigin = tx + ' ' + ty;\n  var nodeBounds = node.getBoundingClientRect();\n  src.displayWidth = nodeBounds.width;\n  src.displayHeight = nodeBounds.height;\n};\n\nmodule.exports = DOMElementCSSRenderer;","map":null,"metadata":{},"sourceType":"script"}