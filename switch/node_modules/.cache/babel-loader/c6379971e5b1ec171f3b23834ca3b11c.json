{"ast":null,"code":"/**\r\n * This method will search the given rectangular area and return an array of all physics bodies that\r\n * overlap with it. It can return either Dynamic, Static bodies or a mixture of both.\r\n * \r\n * A body only has to intersect with the search area to be considered, it doesn't have to be fully\r\n * contained within it.\r\n * \r\n * If Arcade Physics is set to use the RTree (which it is by default) then the search for is extremely fast,\r\n * otherwise the search is O(N) for Dynamic Bodies.\r\n *\r\n * @function Phaser.Physics.Arcade.Components.OverlapRect\r\n * @since 3.17.0\r\n *\r\n * @param {number} x - The top-left x coordinate of the area to search within.\r\n * @param {number} y - The top-left y coordinate of the area to search within.\r\n * @param {number} width - The width of the area to search within.\r\n * @param {number} height - The height of the area to search within.\r\n * @param {boolean} [includeDynamic=true] - Should the search include Dynamic Bodies?\r\n * @param {boolean} [includeStatic=false] - Should the search include Static Bodies?\r\n *\r\n * @return {(Phaser.Physics.Arcade.Body[]|Phaser.Physics.Arcade.StaticBody[])} An array of bodies that overlap with the given area.\r\n */\nvar OverlapRect = function OverlapRect(world, x, y, width, height, includeDynamic, includeStatic) {\n  if (includeDynamic === undefined) {\n    includeDynamic = true;\n  }\n\n  if (includeStatic === undefined) {\n    includeStatic = false;\n  }\n\n  var dynamicBodies = [];\n  var staticBodies = [];\n  var minMax = world.treeMinMax;\n  minMax.minX = x;\n  minMax.minY = y;\n  minMax.maxX = x + width;\n  minMax.maxY = y + height;\n\n  if (includeStatic) {\n    staticBodies = world.staticTree.search(minMax);\n  }\n\n  if (includeDynamic && world.useTree) {\n    dynamicBodies = world.tree.search(minMax);\n  } else if (includeDynamic) {\n    var bodies = world.bodies;\n    var fakeBody = {\n      position: {\n        x: x,\n        y: y\n      },\n      left: x,\n      top: y,\n      right: x + width,\n      bottom: y + height,\n      isCircle: false\n    };\n    var intersects = world.intersects;\n    bodies.iterate(function (target) {\n      if (intersects(target, fakeBody)) {\n        dynamicBodies.push(target);\n      }\n    });\n  }\n\n  return staticBodies.concat(dynamicBodies);\n};\n\nmodule.exports = OverlapRect;","map":null,"metadata":{},"sourceType":"script"}