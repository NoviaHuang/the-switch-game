{"ast":null,"code":"/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point');\n\nvar LineToLine = require('./LineToLine');\n\nvar LineToRectangle = require('./LineToRectangle');\n/**\r\n * Checks for intersection between the Line and a Rectangle shape,\r\n * and returns the intersection points as a Point object array.\r\n *\r\n * @function Phaser.Geom.Intersects.GetLineToRectangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The Line to check for intersection.\r\n * @param {(Phaser.Geom.Rectangle|object)} rect - The Rectangle to check for intersection.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\n\n\nvar GetLineToRectangle = function GetLineToRectangle(line, rect, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (LineToRectangle(line, rect)) {\n    var lineA = rect.getLineA();\n    var lineB = rect.getLineB();\n    var lineC = rect.getLineC();\n    var lineD = rect.getLineD();\n    var output = [new Point(), new Point(), new Point(), new Point()];\n    var result = [LineToLine(lineA, line, output[0]), LineToLine(lineB, line, output[1]), LineToLine(lineC, line, output[2]), LineToLine(lineD, line, output[3])];\n\n    for (var i = 0; i < 4; i++) {\n      if (result[i]) {\n        out.push(output[i]);\n      }\n    }\n  }\n\n  return out;\n};\n\nmodule.exports = GetLineToRectangle;","map":null,"metadata":{},"sourceType":"script"}