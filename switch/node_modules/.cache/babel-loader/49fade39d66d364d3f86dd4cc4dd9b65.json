{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n/**\r\n * @classdesc\r\n * A BaseShader is a small resource class that contains the data required for a WebGL Shader to be created.\r\n * \r\n * It contains the raw source code to the fragment and vertex shader, as well as an object that defines\r\n * the uniforms the shader requires, if any.\r\n * \r\n * BaseShaders are stored in the Shader Cache, available in a Scene via `this.cache.shaders` and are referenced\r\n * by a unique key-based string. Retrieve them via `this.cache.shaders.get(key)`.\r\n * \r\n * BaseShaders are created automatically by the GLSL File Loader when loading an external shader resource.\r\n * They can also be created at runtime, allowing you to use dynamically generated shader source code.\r\n * \r\n * Default fragment and vertex source is used if not provided in the constructor, setting-up a basic shader,\r\n * suitable for debug rendering.\r\n *\r\n * @class BaseShader\r\n * @memberof Phaser.Display\r\n * @constructor\r\n * @since 3.17.0\r\n *\r\n * @param {string} key - The key of this shader. Must be unique within the shader cache.\r\n * @param {string} [fragmentSrc] - The fragment source for the shader.\r\n * @param {string} [vertexSrc] - The vertex source for the shader.\r\n * @param {any} [uniforms] - Optional object defining the uniforms the shader uses.\r\n */\n\n\nvar BaseShader = new Class({\n  initialize: function BaseShader(key, fragmentSrc, vertexSrc, uniforms) {\n    if (!fragmentSrc || fragmentSrc === '') {\n      fragmentSrc = ['precision mediump float;', 'uniform vec2 resolution;', 'varying vec2 fragCoord;', 'void main () {', '    vec2 uv = fragCoord / resolution.xy;', '    gl_FragColor = vec4(uv.xyx, 1.0);', '}'].join('\\n');\n    }\n\n    if (!vertexSrc || vertexSrc === '') {\n      vertexSrc = ['precision mediump float;', 'uniform mat4 uProjectionMatrix;', 'uniform mat4 uViewMatrix;', 'attribute vec2 inPosition;', 'varying vec2 fragCoord;', 'void main () {', 'gl_Position = uProjectionMatrix * uViewMatrix * vec4(inPosition, 1.0, 1.0);', 'fragCoord = inPosition;', '}'].join('\\n');\n    }\n\n    if (uniforms === undefined) {\n      uniforms = null;\n    }\n    /**\r\n     * The key of this shader, unique within the shader cache of this Phaser game instance.\r\n     *\r\n     * @name Phaser.Display.BaseShader#key\r\n     * @type {string}\r\n     * @since 3.17.0\r\n     */\n\n\n    this.key = key;\n    /**\r\n     * The source code, as a string, of the fragment shader being used.\r\n     *\r\n     * @name Phaser.Display.BaseShader#fragmentSrc\r\n     * @type {string}\r\n     * @since 3.17.0\r\n     */\n\n    this.fragmentSrc = fragmentSrc;\n    /**\r\n     * The source code, as a string, of the vertex shader being used.\r\n     *\r\n     * @name Phaser.Display.BaseShader#vertexSrc\r\n     * @type {string}\r\n     * @since 3.17.0\r\n     */\n\n    this.vertexSrc = vertexSrc;\n    /**\r\n     * The default uniforms for this shader.\r\n     *\r\n     * @name Phaser.Display.BaseShader#uniforms\r\n     * @type {?any}\r\n     * @since 3.17.0\r\n     */\n\n    this.uniforms = uniforms;\n  }\n});\nmodule.exports = BaseShader;","map":null,"metadata":{},"sourceType":"script"}