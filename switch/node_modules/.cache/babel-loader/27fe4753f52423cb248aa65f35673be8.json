{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n\nvar MultiFile = require('../MultiFile.js');\n\nvar ScriptFile = require('./ScriptFile.js');\n/**\r\n * @classdesc\r\n * A Multi Script File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#scripts method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#scripts.\r\n *\r\n * @class MultiScriptFile\r\n * @extends Phaser.Loader.MultiFile\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.17.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.MultiScriptFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string[]} [url] - An array of absolute or relative URLs to load the script files from. They are processed in the order given in the array.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object for the script files. Used in replacement of the Loaders default XHR Settings.\r\n */\n\n\nvar MultiScriptFile = new Class({\n  Extends: MultiFile,\n  initialize: function MultiScriptFile(loader, key, url, xhrSettings) {\n    var extension = 'js';\n    var files = [];\n\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      url = GetFastValue(config, 'url');\n      xhrSettings = GetFastValue(config, 'xhrSettings');\n      extension = GetFastValue(config, 'extension', extension);\n    }\n\n    if (!Array.isArray(url)) {\n      url = [url];\n    }\n\n    for (var i = 0; i < url.length; i++) {\n      var scriptFile = new ScriptFile(loader, {\n        key: key + '_' + i.toString(),\n        url: url[i],\n        extension: extension,\n        xhrSettings: xhrSettings\n      }); //  Override the default onProcess function\n\n      scriptFile.onProcess = function () {\n        this.onProcessComplete();\n      };\n\n      files.push(scriptFile);\n    }\n\n    MultiFile.call(this, loader, 'scripts', key, files);\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.MultiScriptFile#addToCache\r\n   * @since 3.17.0\r\n   */\n  addToCache: function addToCache() {\n    if (this.isReadyToProcess()) {\n      for (var i = 0; i < this.files.length; i++) {\n        var file = this.files[i];\n        file.data = document.createElement('script');\n        file.data.language = 'javascript';\n        file.data.type = 'text/javascript';\n        file.data.defer = false;\n        file.data.text = file.xhrLoader.responseText;\n        document.head.appendChild(file.data);\n      }\n\n      this.complete = true;\n    }\n  }\n});\n/**\r\n * Adds an array of Script files to the current load queue.\r\n * \r\n * The difference between this and the `ScriptFile` file type is that you give an array of scripts to this method,\r\n * and the scripts are then processed _exactly_ in that order. This allows you to load a bunch of scripts that\r\n * may have dependancies on each other without worrying about the async nature of traditional script loading.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.scripts('PostProcess', [\r\n *         'libs/shaders/CopyShader.js',\r\n *         'libs/postprocessing/EffectComposer.js',\r\n *         'libs/postprocessing/RenderPass.js',\r\n *         'libs/postprocessing/MaskPass.js',\r\n *         'libs/postprocessing/ShaderPass.js',\r\n *         'libs/postprocessing/AfterimagePass.js'\r\n *    ]);\r\n * }\r\n * ```\r\n * \r\n * In the code above the script files will all be loaded in parallel but only processed (i.e. invoked) in the exact\r\n * order given in the array.\r\n *\r\n * The files are **not** loaded right away. They are added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the files are queued\r\n * it means you cannot use the files immediately after calling this method, but must wait for the files to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String and not already in-use by another file in the Loader.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.scripts({\r\n *     key: 'PostProcess',\r\n *     url: [\r\n *         'libs/shaders/CopyShader.js',\r\n *         'libs/postprocessing/EffectComposer.js',\r\n *         'libs/postprocessing/RenderPass.js',\r\n *         'libs/postprocessing/MaskPass.js',\r\n *         'libs/postprocessing/ShaderPass.js',\r\n *         'libs/postprocessing/AfterimagePass.js'\r\n *        ]\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.MultiScriptFileConfig` for more details.\r\n *\r\n * Once all the files have finished loading they will automatically be converted into a script element\r\n * via `document.createElement('script')`. They will have their language set to JavaScript, `defer` set to\r\n * false and then the resulting element will be appended to `document.head`. Any code then in the\r\n * script will be executed. This is done in the exact order the files are specified in the url array.\r\n *\r\n * The URLs can be relative or absolute. If the URLs are relative the `Loader.baseURL` and `Loader.path` values will be prepended to them.\r\n *\r\n * Note: The ability to load this type of file will only be available if the MultiScript File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#scripts\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.17.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.MultiScriptFileConfig|Phaser.Types.Loader.FileTypes.MultiScriptFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string[]} [url] - An array of absolute or relative URLs to load the script files from. They are processed in the order given in the array.\r\n * @param {string} [extension='js'] - The default file extension to use if no url is provided.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for these files.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\nFileTypesManager.register('scripts', function (key, url, xhrSettings) {\n  var multifile; //  Supports an Object file definition in the key argument\n  //  Or an array of objects in the key argument\n  //  Or a single entry where all arguments have been defined\n\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      multifile = new MultiScriptFile(this, key[i]);\n      this.addFile(multifile.files);\n    }\n  } else {\n    multifile = new MultiScriptFile(this, key, url, xhrSettings);\n    this.addFile(multifile.files);\n  }\n\n  return this;\n});\nmodule.exports = MultiScriptFile;","map":null,"metadata":{},"sourceType":"script"}