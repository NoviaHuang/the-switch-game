{"ast":null,"code":"/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetLineToCircle = require('./GetLineToCircle');\n\nvar CircleToRectangle = require('./CircleToRectangle');\n/**\r\n * Checks for intersection between a circle and a rectangle,\r\n * and returns the intersection points as a Point object array.\r\n *\r\n * @function Phaser.Geom.Intersects.GetCircleToRectangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The circle to be checked.\r\n * @param {Phaser.Geom.Rectangle} rect - The rectangle to be checked.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\n\n\nvar GetCircleToRectangle = function GetCircleToRectangle(circle, rect, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (CircleToRectangle(circle, rect)) {\n    var lineA = rect.getLineA();\n    var lineB = rect.getLineB();\n    var lineC = rect.getLineC();\n    var lineD = rect.getLineD();\n    GetLineToCircle(lineA, circle, out);\n    GetLineToCircle(lineB, circle, out);\n    GetLineToCircle(lineC, circle, out);\n    GetLineToCircle(lineD, circle, out);\n  }\n\n  return out;\n};\n\nmodule.exports = GetCircleToRectangle;","map":null,"metadata":{},"sourceType":"script"}