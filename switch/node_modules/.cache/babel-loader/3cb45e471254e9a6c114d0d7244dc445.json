{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\src\\\\Pages\\\\RoomListPage.js\";\nimport React, { Component } from 'react';\nimport img from '../img/background.png';\nimport './RoomListPage.css';\nimport RoomPage from './RoomPage';\nimport GameRulePage from './GameRulePage';\nimport ProfilePage from './ProfilePage';\nimport { withRouter } from \"react-router-dom\";\nimport { Auth } from 'aws-amplify';\nimport Amplify, { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from './phaser/../../graphql/queries';\nimport * as subscriptions from './phaser/../../graphql/subscriptions';\nimport * as mutations from '../graphql/mutations';\n\nvar RoomListPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RoomListPage, _React$Component);\n\n  function RoomListPage() {\n    var _this;\n\n    _classCallCheck(this, RoomListPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RoomListPage).call(this));\n    _this.getRoom =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var storeRoom, result, i;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              storeRoom = [];\n              _context.next = 3;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 3:\n              result = _context.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                console.log(result.data.listRoompages.items[i].roomid);\n                storeRoom.push(result.data.listRoompages.items[i].roomid);\n              }\n\n              _this.setState({\n                rID: storeRoom\n              });\n\n              console.log('TEST FOR QUERY ' + _this.state.rID);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.getPlayersCount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var playercount, result, i, obj, count, property;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              playercount = [];\n              _context2.next = 3;\n              return API.graphql(graphqlOperation(queries.listRoompages));\n\n            case 3:\n              result = _context2.sent;\n\n              for (i = 0; i < result.data.listRoompages.items.length; i++) {\n                obj = result.data.listRoompages.items[i].players;\n                count = 0;\n\n                for (property in obj) {\n                  if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                    count++;\n                  }\n                }\n\n                console.log('show the obj ' + count);\n                playercount.push(count);\n              }\n\n              _this.setState({\n                player_count: playercount\n              });\n\n              console.log('TEST FOR playercount ' + _this.state.player_count);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    _this.handleCreateRoom =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var min, max, random, getUser, name, result;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              min = 1;\n              max = 9999;\n              random = Math.floor(Math.random() * (+max - +min)) + +min;\n              console.log(\"Random Number Generated : \" + random);\n              _context3.next = 6;\n              return Auth.currentAuthenticatedUser();\n\n            case 6:\n              getUser = _context3.sent;\n              name = getUser.username;\n              _context3.next = 10;\n              return API.graphql(graphqlOperation(mutations.createRoompage, {\n                input: {\n                  roomid: random,\n                  players: name\n                }\n              }));\n\n            case 10:\n              result = _context3.sent;\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    _this.state = {\n      /* \r\n      ************************\r\n      READ!!!!!!\r\n      ***********************\r\n        roomID -> rID, I am using roomID in DB, and these 2 roomID mess me up\r\n        */\n      rID: '',\n      player_count: getPlayerCount(),\n      status: getStatus(),\n      page: 1\n    };\n    _this.handleProfileClick = _this.handleProfileClick.bind(_assertThisInitialized(_this));\n    _this.handleGameRuleClick = _this.handleGameRuleClick.bind(_assertThisInitialized(_this));\n    _this.handleRoomClick = _this.handleRoomClick.bind(_assertThisInitialized(_this));\n    _this.handlePrevClick = _this.handlePrevClick.bind(_assertThisInitialized(_this));\n    _this.handleNextClick = _this.handleNextClick.bind(_assertThisInitialized(_this));\n    _this.handleCreateClick = _this.handleCreateClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(RoomListPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.getRoom();\n                this.getPlayersCount();\n                /*\r\n                  this.listenOnRoom = await API.graphql(graphqlOperation(subscriptions.onCreateRoompage)\r\n                ).subscribe({\r\n                  next: (roomData) =>console.log('sub test '+roomData.value.data.onCreateRoompage.roomid) \r\n                  //this.createTodo(todoData.value.data.onCreateTodo)\r\n                });      \r\n                }\r\n                componentWillUnmount() {\r\n                this.listenOnRoom.unsubscribe();\r\n                }\r\n                */\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() //appsync get room (query)\n\n  }, {\n    key: \"handleProfileClick\",\n    value: function handleProfileClick(e) {\n      e.preventDefault();\n      this.props.history.push('/my-account');\n    }\n  }, {\n    key: \"handleGameRuleClick\",\n    value: function handleGameRuleClick(e) {\n      e.preventDefault();\n      this.props.history.push('/game-rule');\n    } //user allowed to enter the room only when the status of the room is not 'playing'\n\n  }, {\n    key: \"handleRoomClick\",\n    value: function handleRoomClick(e, i) {\n      var _this2 = this;\n\n      if (this.state.status[i] != 'playing') {\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee5() {\n          var getUser, name, num, newThing;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return Auth.currentAuthenticatedUser();\n\n                case 2:\n                  getUser = _context5.sent;\n                  name = getUser.username;\n                  console.log(_this2.state.rID[i]);\n                  num = _this2.state.rID[i];\n                  console.log(num);\n                  console.log('test for who click into a room , user :' + name + ' into a room #' + _this2.state.rID[i]);\n                  _context5.next = 10;\n                  return API.graphql(graphqlOperation(mutations.updateRoompage, {\n                    input: {\n                      roomid: num,\n                      players: [name]\n                    }\n                  }));\n\n                case 10:\n                  newThing = _context5.sent;\n\n                case 11:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }))();\n\n        this.props.history.push('/room');\n      } else {\n        alert('This room is full. Please select to enter another room.');\n      }\n    } //render the room button only when the room id is available\n\n  }, {\n    key: \"renderRoom\",\n    value: function renderRoom(i) {\n      var _this3 = this;\n\n      if (this.state.rID[i]) {\n        return React.createElement(\"button\", {\n          className: \"room-button\",\n          onClick: function onClick(e) {\n            _this3.handleRoomClick(e, i);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, \"Room \", this.state.rID[i], \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }), this.state.player_count[i], \"/4 \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }), this.state.status[i]);\n      } else {\n        return React.createElement(\"button\", {\n          className: \"empty-room-button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        });\n      }\n    } //after clicked, check if the first room id in the current roomID array is equal to the first room id in the database\n\n  }, {\n    key: \"handlePrevClick\",\n    value: function handlePrevClick(e) {} //after clicked, get the last room id in the current roomID array\n    //then, filter the database and get 18 room ids that are after the last room id we get previously\n    //then, set the roomID array to the new room ids and re-render the components\n\n  }, {\n    key: \"handleNextClick\",\n    value: function handleNextClick(e) {}\n  }, {\n    key: \"handleCreateClick\",\n    value: function handleCreateClick(e) {\n      e.preventDefault();\n      this.handleCreateRoom();\n      console.log('hello?');\n      this.props.history.push('/room');\n      /*\r\n      for(let i = 0; i < this.state.status.length; i++) {\r\n          if(this.state.status[i] == 'closed') {\r\n              let temp_status = this.state.status;\r\n              temp_status[i] = 'open';\r\n              let temp_player_count = this.state.player_count;\r\n              temp_player_count[i] = 1;\r\n              this.setState({\r\n                  status: temp_status,\r\n                  player_count: temp_player_count\r\n              });\r\n      \r\n          }\r\n      }\r\n      */\n\n      var last_id = this.state.rID[this.state.rID.length - 1];\n      var new_id = [].concat(_toConsumableArray(this.state.rID), [last_id]);\n      this.setState({\n        room_id: new_id,\n        player_count: 1,\n        status: 'open'\n      });\n    }\n  }, {\n    key: \"handleRandomClick\",\n    value: function handleRandomClick(e) {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"room-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"room-list-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"SWITCH\"), React.createElement(\"button\", {\n        className: \"game-rule-button\",\n        onClick: this.handleGameRuleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Game Rule\"), React.createElement(\"button\", {\n        className: \"profile-button\",\n        onClick: this.handleProfileClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"My Account\"), React.createElement(\"img\", {\n        src: img,\n        className: \"room-img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"room-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"room-col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, this.renderRoom(0), this.renderRoom(1), this.renderRoom(2)), React.createElement(\"div\", {\n        className: \"room-col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, this.renderRoom(3), this.renderRoom(4), this.renderRoom(5)), React.createElement(\"div\", {\n        className: \"room-col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, this.renderRoom(6), this.renderRoom(7), this.renderRoom(8))), React.createElement(\"button\", {\n        className: \"prev\",\n        onClick: this.handlePrevClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"Prev\"), React.createElement(\"button\", {\n        className: \"next\",\n        onClick: this.handleNextClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"Next\"), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"room-num\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"Room #: \", React.createElement(\"input\", {\n        type: \"number\",\n        className: \"room-num-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"ENTER\",\n        className: \"enter-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"create-button\",\n        onClick: this.handleCreateClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \"Create New Room\"), React.createElement(\"button\", {\n        className: \"random-button\",\n        onClick: this.handleRoomClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"Random Match\"));\n    }\n  }]);\n\n  return RoomListPage;\n}(React.Component); //retrieve all room data from database, excluding those rooms that were closed\n\n\nfunction getPlayerCount() {\n  return [1, 1, 1, 1, 1, 1, 1, 1, 1];\n}\n\nfunction getStatus() {\n  return ['playing', 'open', 'playing', 'open', 'open', 'open', 'playing', 'open', 'open'];\n}\n\nexport default withRouter(RoomListPage);","map":{"version":3,"sources":["C:\\Users\\shirl\\Documents\\GitHub\\the-switch-game\\switch\\src\\Pages\\RoomListPage.js"],"names":["React","Component","img","RoomPage","GameRulePage","ProfilePage","withRouter","Auth","Amplify","API","graphqlOperation","queries","subscriptions","mutations","RoomListPage","getRoom","storeRoom","graphql","listRoompages","result","i","data","items","length","console","log","roomid","push","setState","rID","state","getPlayersCount","playercount","obj","players","count","property","Object","prototype","hasOwnProperty","call","player_count","handleCreateRoom","min","max","random","Math","floor","currentAuthenticatedUser","getUser","name","username","createRoompage","input","getPlayerCount","status","getStatus","page","handleProfileClick","bind","handleGameRuleClick","handleRoomClick","handlePrevClick","handleNextClick","handleCreateClick","e","preventDefault","props","history","num","updateRoompage","newThing","alert","last_id","new_id","room_id","renderRoom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport img from '../img/background.png';\r\nimport './RoomListPage.css';\r\nimport RoomPage from './RoomPage';\r\nimport GameRulePage from './GameRulePage';\r\nimport ProfilePage from './ProfilePage';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Auth } from 'aws-amplify';\r\nimport Amplify, { API, graphqlOperation } from \"aws-amplify\";\r\nimport * as queries from './phaser/../../graphql/queries';\r\nimport * as subscriptions from'./phaser/../../graphql/subscriptions';\r\nimport * as mutations from '../graphql/mutations';\r\n\r\nclass RoomListPage extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            /* \r\n            ************************\r\n            READ!!!!!!\r\n            ***********************\r\n\r\n            roomID -> rID, I am using roomID in DB, and these 2 roomID mess me up\r\n\r\n            */\r\n            rID: '',\r\n            player_count: getPlayerCount(),\r\n            status: getStatus(),\r\n            page: 1\r\n        };\r\n        this.handleProfileClick = this.handleProfileClick.bind(this);\r\n        this.handleGameRuleClick = this.handleGameRuleClick.bind(this);\r\n        this.handleRoomClick = this.handleRoomClick.bind(this);\r\n        this.handlePrevClick = this.handlePrevClick.bind(this);\r\n        this.handleNextClick = this.handleNextClick.bind(this);\r\n        this.handleCreateClick=this.handleCreateClick.bind(this);\r\n    }\r\n           \r\n    async componentDidMount() {\r\n        this.getRoom();\r\n        this.getPlayersCount();\r\n        /*\r\n\r\n        this.listenOnRoom = await API.graphql(graphqlOperation(subscriptions.onCreateRoompage)\r\n        ).subscribe({\r\n          next: (roomData) =>console.log('sub test '+roomData.value.data.onCreateRoompage.roomid) \r\n          //this.createTodo(todoData.value.data.onCreateTodo)\r\n        });      \r\n  }\r\n  componentWillUnmount() {\r\n    this.listenOnRoom.unsubscribe();\r\n  }\r\n  \r\n  */\r\n}\r\n//appsync get room (query)\r\ngetRoom = async () => {\r\n    var storeRoom = [];\r\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\r\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\r\n        console.log(result.data.listRoompages.items[i].roomid);\r\n        storeRoom.push(result.data.listRoompages.items[i].roomid);\r\n        }\r\n    this.setState({rID : storeRoom });\r\n    console.log('TEST FOR QUERY ' + this.state.rID);\r\n    }\r\ngetPlayersCount = async ()=>{\r\n    var playercount = [];\r\n    const result = await API.graphql(graphqlOperation(queries.listRoompages));\r\n    for(let i=0;i<result.data.listRoompages.items.length;i++){\r\n        const obj = result.data.listRoompages.items[i].players;\r\n        var count = 0;\r\n        for (var property in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, property)) {\r\n            count++;\r\n        }\r\n    }\r\n         console.log('show the obj ' + count);\r\n        playercount.push(count);\r\n    }\r\n    this.setState({player_count:playercount});\r\n    console.log('TEST FOR playercount ' + this.state.player_count);\r\n}\r\n\r\n\r\n//appsync get the playerCount in each room \r\n// getPlayerCount = async () =>{\r\n//     var storePlayerCount = [];\r\n//     const result = await API.graphql(graphqlOperation(queries.getRoompage, {roomid : rID});\r\n// }\r\n\r\nhandleCreateRoom = async () =>{\r\n    var min=1; \r\n    var max=9999;  \r\n    var random =Math.floor(Math.random() * (+max - +min)) + +min; \r\n    console.log(\"Random Number Generated : \" + random ); \r\n    const getUser = await Auth.currentAuthenticatedUser();\r\n                const name = getUser.username;\r\n    \r\n    const result = await API.graphql(graphqlOperation(mutations.createRoompage,{\r\n        input : {\r\n            roomid : random,\r\n            players : name\r\n        }\r\n\r\n    }));\r\n}\r\n\r\n\r\n    handleProfileClick(e) {\r\n        e.preventDefault();\r\n        this.props.history.push('/my-account');\r\n    }\r\n\r\n    handleGameRuleClick(e) {\r\n        e.preventDefault();\r\n        this.props.history.push('/game-rule');\r\n    }\r\n    \r\n    //user allowed to enter the room only when the status of the room is not 'playing'\r\n    handleRoomClick(e, i) {\r\n        if(this.state.status[i] != 'playing'){\r\n            (async () => {\r\n                //get current user name\r\n                const getUser = await Auth.currentAuthenticatedUser();\r\n                const name = getUser.username;\r\n                console.log(this.state.rID[i]);\r\n                var num = this.state.rID[i];\r\n                console.log(num);\r\n                console.log('test for who click into a room , user :' + name + ' into a room #' +this.state.rID[i]);\r\n                const newThing = await API.graphql(graphqlOperation(mutations.updateRoompage, \r\n                    {\r\n                        input:{\r\n                            roomid : num,\r\n                            players : [name]\r\n                        }\r\n                    }));\r\n            })();\r\n            this.props.history.push('/room');\r\n        }\r\n        else {\r\n            alert('This room is full. Please select to enter another room.');\r\n        }\r\n    }\r\n\r\n    //render the room button only when the room id is available\r\n    renderRoom(i){\r\n        if (this.state.rID[i]){\r\n            return(\r\n                <button className=\"room-button\" onClick={(e) => {this.handleRoomClick(e,i)}}>\r\n                        Room {this.state.rID[i]} <br />\r\n                        {this.state.player_count[i]}/4 <br />\r\n                        {this.state.status[i]}\r\n                </button>\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n                <button className=\"empty-room-button\"></button>\r\n            )\r\n        }\r\n    }\r\n\r\n    //after clicked, check if the first room id in the current roomID array is equal to the first room id in the database\r\n    handlePrevClick(e) {\r\n\r\n    }\r\n\r\n    //after clicked, get the last room id in the current roomID array\r\n    //then, filter the database and get 18 room ids that are after the last room id we get previously\r\n    //then, set the roomID array to the new room ids and re-render the components\r\n    handleNextClick(e) {\r\n\r\n    }\r\n\r\n    handleCreateClick (e){\r\n        e.preventDefault();\r\n        this.handleCreateRoom();\r\n        console.log('hello?');\r\n        this.props.history.push('/room');\r\n        \r\n        /*\r\n        for(let i = 0; i < this.state.status.length; i++) {\r\n            if(this.state.status[i] == 'closed') {\r\n                let temp_status = this.state.status;\r\n                temp_status[i] = 'open';\r\n                let temp_player_count = this.state.player_count;\r\n                temp_player_count[i] = 1;\r\n                this.setState({\r\n                    status: temp_status,\r\n                    player_count: temp_player_count\r\n                });\r\n        \r\n            }\r\n        }\r\n        */\r\n        let last_id = this.state.rID[this.state.rID.length - 1];\r\n        let new_id = [...this.state.rID, last_id];\r\n        this.setState({\r\n            room_id: new_id,\r\n            player_count: 1,\r\n            status: 'open'\r\n        });\r\n    }\r\n\r\n    handleRandomClick(e) {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"room-list\">\r\n                <h1 className=\"room-list-header\">SWITCH</h1>\r\n                    <button className=\"game-rule-button\" onClick={this.handleGameRuleClick}>Game Rule</button>\r\n                    <button className=\"profile-button\" onClick={this.handleProfileClick}>My Account</button>\r\n                    <img src={img} className=\"room-img\" />\r\n                    <div className=\"room-row\">\r\n                        <div className=\"room-col\">\r\n                            {this.renderRoom(0)}\r\n                            {this.renderRoom(1)}\r\n                            {this.renderRoom(2)}\r\n                        </div>\r\n                        <div className=\"room-col\">\r\n                            {this.renderRoom(3)}\r\n                            {this.renderRoom(4)}\r\n                            {this.renderRoom(5)}\r\n                        </div>\r\n                        <div className=\"room-col\">\r\n                            {this.renderRoom(6)}\r\n                            {this.renderRoom(7)}\r\n                            {this.renderRoom(8)}\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"prev\" onClick={this.handlePrevClick}>Prev</button>\r\n                    <button className=\"next\" onClick={this.handleNextClick}>Next</button>\r\n                    <form>\r\n                        <label className=\"room-num\">Room #: <input type=\"number\" className=\"room-num-input\" /></label>\r\n                        <input type=\"submit\" value=\"ENTER\" className=\"enter-button\" />\r\n                    </form>\r\n                    <button className=\"create-button\" onClick={this.handleCreateClick}>Create New Room</button>\r\n                    <button className=\"random-button\" onClick={this.handleRoomClick}>Random Match</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//retrieve all room data from database, excluding those rooms that were closed\r\n\r\n\r\nfunction getPlayerCount(){\r\n    return [1,1,1,1,1,1,1,1,1];\r\n}\r\n\r\nfunction getStatus(){\r\n    return ['playing','open','playing','open','open','open','playing','open','open'];\r\n}\r\n\r\nexport default withRouter(RoomListPage);"]},"metadata":{},"sourceType":"module"}