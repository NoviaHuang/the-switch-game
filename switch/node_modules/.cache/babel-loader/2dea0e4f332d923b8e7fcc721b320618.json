{"ast":null,"code":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2019 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Provides methods used for setting the bounce properties of an Arcade Physics Body.\n *\n * @namespace Phaser.Physics.Arcade.Components.Bounce\n * @since 3.0.0\n */\nvar Bounce = {\n  /**\n   * Sets the bounce values of this body.\n   * \n   * Bounce is the amount of restitution, or elasticity, the body has when it collides with another object.\n   * A value of 1 means that it will retain its full velocity after the rebound. A value of 0 means it will not rebound at all.\n   *\n   * @method Phaser.Physics.Arcade.Components.Bounce#setBounce\n   * @since 3.0.0\n   *\n   * @param {number} x - The amount of horizontal bounce to apply on collision. A float, typically between 0 and 1.\n   * @param {number} [y=x] - The amount of vertical bounce to apply on collision. A float, typically between 0 and 1.\n   *\n   * @return {this} This Game Object.\n   */\n  setBounce: function setBounce(x, y) {\n    this.body.bounce.set(x, y);\n    return this;\n  },\n\n  /**\n   * Sets the horizontal bounce value for this body.\n   *\n   * @method Phaser.Physics.Arcade.Components.Bounce#setBounceX\n   * @since 3.0.0\n   *\n   * @param {number} value - The amount of horizontal bounce to apply on collision. A float, typically between 0 and 1.\n   *\n   * @return {this} This Game Object.\n   */\n  setBounceX: function setBounceX(value) {\n    this.body.bounce.x = value;\n    return this;\n  },\n\n  /**\n   * Sets the vertical bounce value for this body.\n   *\n   * @method Phaser.Physics.Arcade.Components.Bounce#setBounceY\n   * @since 3.0.0\n   *\n   * @param {number} value - The amount of vertical bounce to apply on collision. A float, typically between 0 and 1.\n   *\n   * @return {this} This Game Object.\n   */\n  setBounceY: function setBounceY(value) {\n    this.body.bounce.y = value;\n    return this;\n  },\n\n  /**\n   * Sets whether this Body collides with the world boundary.\n   * \n   * Optionally also sets the World Bounce values. If the `Body.worldBounce` is null, it's set to a new Vec2 first.\n   *\n   * @method Phaser.Physics.Arcade.Components.Bounce#setCollideWorldBounds\n   * @since 3.0.0\n   *\n   * @param {boolean} [value=true] - `true` if this body should collide with the world bounds, otherwise `false`.\n   * @param {number} [bounceX] - If given this will be replace the `worldBounce.x` value.\n   * @param {number} [bounceY] - If given this will be replace the `worldBounce.y` value.\n   *\n   * @return {this} This Game Object.\n   */\n  setCollideWorldBounds: function setCollideWorldBounds(value, bounceX, bounceY) {\n    this.body.setCollideWorldBounds(value, bounceX, bounceY);\n    return this;\n  }\n};\nmodule.exports = Bounce;","map":null,"metadata":{},"sourceType":"script"}