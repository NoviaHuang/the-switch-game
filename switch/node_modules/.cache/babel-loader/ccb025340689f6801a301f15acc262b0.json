{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport Phaser from 'phaser';\nimport { Blank } from '../objects/Blank';\nimport { Player } from '../objects/Player';\nimport { Card } from '../objects/Card';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport Amplify, { Auth } from 'aws-amplify';\nimport * as mutations from '../../../graphql/mutations';\nimport * as subscriptions from '../../../graphql/subscriptions';\nimport * as queries from '../../../graphql/queries';\nimport { ConsoleLogger } from '@aws-amplify/core';\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport aws_config from '../../../aws-exports';\nimport gql from 'graphql-tag';\nvar client = new AWSAppSyncClient({\n  url: aws_config.aws_appsync_graphqlEndpoint,\n  region: aws_config.aws_appsync_region,\n  auth: {\n    type: AUTH_TYPE.API_KEY,\n    apiKey: aws_config.aws_appsync_apiKey\n  }\n});\nexport var GameBoard =\n/*#__PURE__*/\nfunction (_Phaser$Scene) {\n  _inherits(GameBoard, _Phaser$Scene);\n\n  function GameBoard() {\n    _classCallCheck(this, GameBoard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GameBoard).call(this, {\n      key: 'GameBoard'\n    }));\n  }\n\n  _createClass(GameBoard, [{\n    key: \"create\",\n    value: function create() {\n      this.gameBoard = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]; //display board\n\n      var boardbg = this.add.image(400, 80, 'boardbg');\n      boardbg.setOrigin(0, 0).setScale(2.8, 2.8);\n      var x_pos1 = 0;\n      var y_pos1 = 0;\n\n      for (var i = 0; i < 6; i++) {\n        for (var j = 0; j < 6; j++) {\n          this.blank = new Blank(this, 405 + x_pos1, 85 + y_pos1, 'blank').data.set('card_number', 53);\n          x_pos1 += 65;\n        }\n\n        y_pos1 += 65;\n        x_pos1 = 0;\n      } //    let card_number=0;\n      //    let nums=[],\n      // \t   ranNums = [];\n      //   for(var k=0;k<52;k++){\n      //    nums.push(k);\n      // \t}\n      //    let m = nums.length,\n      // \t   n = 0;\n      //  while (m--) {\n      //    n = Math.floor(Math.random() * (m+1));\n      //    ranNums.push(nums[n]);\n      //    nums.splice(n,1);\n      //  }\n\n\n      var card_number = 0;\n      var ranNums = [3, 7, 15, 33, 25, 46, 8, 9, 28, 53, 11, 6, 34, 36, 21, 23, 41, 19, 16, 1, 47, 29, 51, 39, 2, 25, 27, 40, 30, 37, 10, 22, 10, 20, 50, 38, 26]; //display board\n\n      var x_pos = 0;\n      var y_pos = 0;\n      this.cardSet = [];\n\n      for (var i = 0; i < 6; i++) {\n        for (var j = 0; j < 6; j++) {\n          var generatecard = ranNums[card_number];\n          this.card = new Card(this, 405 + x_pos, 85 + y_pos, 'cards', generatecard).setOrigin(0, 0).setInteractive().setDataEnabled();\n          this.cardSet.push(this.card);\n          this.card.data.set('card_number', card_number);\n          x_pos += 65;\n          card_number++;\n        }\n\n        y_pos += 65;\n        x_pos = 0;\n      }\n\n      var player1 = new Player(this, 405, 85, 'chess_red', 1).setOrigin(0, 0);\n      var player2 = new Player(this, 730, 85, 'chess_blue', 2).setOrigin(0, 0);\n      this.player = [];\n      this.player.push(player1);\n      this.player.push(player2); //need user name array\n\n      this.userName = ['switch', 'noviah']; //initalize the data\n\n      this.initCardData(-1, 405, 85, 'switch', 0);\n      this.initCardData(-1, 730, 85, 'noviah', 0);\n      this.seat = 0;\n      this.CardLeft = 36;\n      this.clickedBox(ranNums);\n    } //check if the login user is in his round\n\n  }, {\n    key: \"checkUserInfo\",\n    value: function checkUserInfo(cardNum, name, x, y) {\n      var _this = this;\n\n      Auth.currentUserInfo().then(function (userInfo) {\n        var username = userInfo.username;\n\n        if (name == username) {\n          _this.updateCardData(cardNum, x, y, name, 1); //this.updateRound(seat)\n\n        } else {\n          console.log('invaild movement');\n        }\n      });\n    } //move card\n\n  }, {\n    key: \"decideMove\",\n    value: function decideMove(x, y, player) {\n      player.setX(x);\n      player.setY(y);\n    } //move the card to the side\n\n  }, {\n    key: \"handlePlayerCard\",\n    value: function handlePlayerCard(cardNum, card) {\n      if (cardNum != 53) {\n        console.log('the card x is' + card.x);\n      }\n    } //************************************************ */\n    //the thing you need\n    //*********************************************** */\n    // async round(x,y){\n    // \t(async () => { \n    // \t\tawait client.hydrated();\n    // \t\t//const getUser = await Auth.currentAuthenticatedUser();\n    // \t\tvar nameWeGot1 = 'switch';\n    // \t\tconst result1 = await client.query({\n    // \t\t\tquery: gql(queries.getQw),\n    // \t\t\tvariables: {\n    // \t\t\t\tusername: nameWeGot1\n    // \t\t\t},\n    // \t\t\tfetchPolicy: 'network-only',\n    // \t\t});\n    // \t\tconst seat=result1.data.getQw.seat\n    // \t\tconsole.log('the recent seat'+seat)\n    // \t\t if(x==this.player[seat%2].x||y==this.player[seat%2].y){\n    // \t\t\tthis.checkUserInfo(this.userName[seat%2],x,y,seat)\n    // \t\t }\n    // \t})();\n    // }\n\n  }, {\n    key: \"initCardData\",\n    value: function () {\n      var _initCardData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(card, x, y, theusername, theSeat) {\n        var cardV, xV, yV, name, thething, newThing;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cardV = card;\n                console.log(cardV);\n                xV = x;\n                console.log(\"x : \" + xV);\n                yV = y;\n                console.log(\"y : \" + yV);\n                name = theusername;\n                console.log('your name : ' + name);\n                thething = {\n                  username: name,\n                  whichCard: cardV,\n                  x: xV,\n                  y: yV,\n                  seat: theSeat\n                };\n                _context.next = 11;\n                return API.graphql(graphqlOperation(mutations.updateQw, {\n                  input: thething\n                }));\n\n              case 11:\n                newThing = _context.sent;\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function initCardData(_x, _x2, _x3, _x4, _x5) {\n        return _initCardData.apply(this, arguments);\n      }\n\n      return initCardData;\n    }()\n  }, {\n    key: \"updateCardData\",\n    value: function () {\n      var _updateCardData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(card, x, y, name, theSeat) {\n        var cardV, xV, yV, thething, newThing;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cardV = card;\n                console.log(cardV);\n                xV = x;\n                console.log(\"x : \" + xV);\n                yV = y;\n                console.log(\"y : \" + yV);\n                console.log('your name : ' + name);\n                thething = {\n                  username: name,\n                  whichCard: cardV,\n                  x: xV,\n                  y: yV,\n                  seat: theSeat\n                };\n                _context2.next = 10;\n                return API.graphql(graphqlOperation(mutations.updateQw, {\n                  input: thething\n                }));\n\n              case 10:\n                newThing = _context2.sent;\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function updateCardData(_x6, _x7, _x8, _x9, _x10) {\n        return _updateCardData.apply(this, arguments);\n      }\n\n      return updateCardData;\n    }() // async updateRound(theseat){\n    // \tconsole.log('to update'+theseat);\n    // \tconst thething = {\n    // \t\t\t\tusername : 'switch',\n    // \t\t\t\tseat: theseat+1,\n    // \t\t\t\t\t};\n    //  const newThing = await API.graphql(graphqlOperation(mutations.updateQw, {input: thething}));\n    // }\n    //click the card and make it move\n\n  }, {\n    key: \"clickedBox\",\n    value: function clickedBox(ranNums) {\n      var _this2 = this;\n\n      //var arrangepostion=0;\n      this.input.on('gameobjectdown', function (pointer, gameObject) {\n        for (var i = 0; i < 36; i++) {\n          if (_this2.gameBoard[i] == i) {\n            if (gameObject.x == _this2.player[_this2.seat].x || gameObject.y == _this2.player[_this2.seat].y) {\n              if (gameObject.data.get('card_number') == i) {\n                _this2.checkUserInfo(i, _this2.userName[_this2.seat], gameObject.x, gameObject.y);\n\n                _this2.CardLeft--; //break;\n              } else if (gameObject.data.get('card_number') == 53) {\n                _this2.checkUserInfo(-1, _this2.userName[_this2.seat], gameObject.x, gameObject.y); //break;\n\n              }\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(time, delta) {\n      var _this3 = this;\n\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var nameWeGot1, result1, nameWeGot2, result2;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return client.hydrated();\n\n              case 2:\n                nameWeGot1 = _this3.userName[0];\n                _context3.next = 5;\n                return client.query({\n                  query: gql(queries.getQw),\n                  variables: {\n                    username: nameWeGot1\n                  },\n                  fetchPolicy: 'network-only'\n                });\n\n              case 5:\n                result1 = _context3.sent;\n                nameWeGot2 = _this3.userName[1];\n                _context3.next = 9;\n                return client.query({\n                  query: gql(queries.getQw),\n                  variables: {\n                    username: nameWeGot2\n                  },\n                  fetchPolicy: 'network-only'\n                });\n\n              case 9:\n                result2 = _context3.sent;\n\n                if (result1.data.getQw.seat == 1) {\n                  _this3.decideMove(result1.data.getQw.x, result1.data.getQw.y, _this3.player[0]);\n\n                  console.log('update the player1');\n                  _this3.seat = 1;\n\n                  if (result1.data.getQw.whichCard != -1) {\n                    _this3.cardSet[result1.data.getQw.whichCard].setX(20);\n\n                    _this3.cardSet[result1.data.getQw.whichCard].setY(85);\n                  }\n\n                  _this3.updateCardData(-1, result1.data.getQw.x, result1.data.getQw.y, nameWeGot1, 0);\n                } else if (result2.data.getQw.seat == 1) {\n                  _this3.decideMove(result2.data.getQw.x, result2.data.getQw.y, _this3.player[1]);\n\n                  console.log('update the player2');\n                  _this3.seat = 0;\n\n                  if (result2.data.getQw.whichCard != -1) {\n                    console.log('move the card');\n\n                    _this3.cardSet[result2.data.getQw.whichCard].setX(900);\n\n                    _this3.cardSet[result2.data.getQw.whichCard].setY(85);\n                  }\n\n                  _this3.updateCardData(-1, result2.data.getQw.x, result2.data.getQw.y, nameWeGot2, 0);\n                }\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n\n      if (this.CardLeft == 0) {\n        console.log('game over');\n      }\n    }\n  }]);\n\n  return GameBoard;\n}(Phaser.Scene);","map":{"version":3,"sources":["C:\\Users\\shirl\\Documents\\GitHub\\the-switch-game\\switch\\src\\Pages\\phaser\\scenes\\GameBoard.js"],"names":["Phaser","Blank","Player","Card","API","graphqlOperation","Amplify","Auth","mutations","subscriptions","queries","ConsoleLogger","AWSAppSyncClient","AUTH_TYPE","aws_config","gql","client","url","aws_appsync_graphqlEndpoint","region","aws_appsync_region","auth","type","API_KEY","apiKey","aws_appsync_apiKey","GameBoard","key","gameBoard","boardbg","add","image","setOrigin","setScale","x_pos1","y_pos1","i","j","blank","data","set","card_number","ranNums","x_pos","y_pos","cardSet","generatecard","card","setInteractive","setDataEnabled","push","player1","player2","player","userName","initCardData","seat","CardLeft","clickedBox","cardNum","name","x","y","currentUserInfo","then","userInfo","username","updateCardData","console","log","setX","setY","theusername","theSeat","cardV","xV","yV","thething","whichCard","graphql","updateQw","input","newThing","on","pointer","gameObject","get","checkUserInfo","time","delta","hydrated","nameWeGot1","query","getQw","variables","fetchPolicy","result1","nameWeGot2","result2","decideMove","Scene"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nimport {Blank} from '../objects/Blank';\r\nimport {Player} from '../objects/Player';\r\nimport {Card} from '../objects/Card';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport Amplify, { Auth } from 'aws-amplify';\r\nimport * as mutations from '../../../graphql/mutations';\r\nimport * as subscriptions from '../../../graphql/subscriptions'\r\nimport * as queries from '../../../graphql/queries'\r\n\r\nimport { ConsoleLogger } from '@aws-amplify/core';\r\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\r\nimport aws_config from '../../../aws-exports';\r\nimport gql from 'graphql-tag';\r\n\r\nconst client = new AWSAppSyncClient({\r\n  url: aws_config.aws_appsync_graphqlEndpoint,\r\n  region: aws_config.aws_appsync_region,\r\n  auth: {\r\n    type: AUTH_TYPE.API_KEY,\r\n    apiKey: aws_config.aws_appsync_apiKey,\r\n  }\r\n});\r\n\r\nexport class GameBoard extends Phaser.Scene {\r\n\tconstructor() {\r\n\t\tsuper({\r\n\t\t\tkey: 'GameBoard',\r\n\t\t});\r\n\t\t\r\n\r\n\t}\r\n\t\r\n\r\n\r\n\tcreate() {\r\n\r\n\t\tthis.gameBoard = [0,1,2,3,4,5,6,7,8,9,10,\r\n\t\t\t11,12,13,14,15,16,17,18,19,20,21,22,\r\n\t\t\t23,24,25,26,27,28,29,30,31,32,33,34,35,36];\r\n\t\t\r\n        //display board\r\n\t\tlet boardbg = this.add.image(400, 80, 'boardbg');\r\n\t\tboardbg.setOrigin(0, 0).setScale(2.8,2.8);\r\n\t\tlet x_pos1=0;\r\n\t\tlet y_pos1=0;\r\n\t\tfor(var i=0;i<6;i++){\r\n\t\t\tfor(var j=0 ;j<6;j++){\r\n\t\t\t   this.blank=new Blank(this,405+x_pos1,85+y_pos1,'blank').data.set('card_number', 53);\r\n\t\t\t\tx_pos1+=65;\r\n\t\t\t }\r\n\t\t\t   y_pos1+=65;\r\n\t\t\t   x_pos1=0;\r\n\t\t\t }\r\n\t\t\t \r\n\r\n\t\t//    let card_number=0;\r\n\t\t//    let nums=[],\r\n\t\t// \t   ranNums = [];\r\n\t\t//   for(var k=0;k<52;k++){\r\n\t\t//    nums.push(k);\r\n\t\t// \t}\r\n\t\t//    let m = nums.length,\r\n\t\t// \t   n = 0;\r\n\t  //  while (m--) {\r\n\t\t//    n = Math.floor(Math.random() * (m+1));\r\n\t\t//    ranNums.push(nums[n]);\r\n\t\t//    nums.splice(n,1);\r\n\t\t//  }\r\n\t\t \r\n\t\tlet card_number=0;\r\n\t\tlet ranNums=[3,7,15,33,25,46,8,9,28,53,11,6,34,36,21,23,41,19,16,1,47,29,51,39,2,25,27,40,30,\r\n\t\t              37,10,22,10,20,50,38,26]\r\n\t   //display board\r\n\t\t\tlet x_pos=0;\r\n\t\t\tlet y_pos=0; \r\n\t\t\tthis.cardSet=[] \r\n\t\t  for(var i=0;i<6;i++){\r\n\t\t\tfor(var j=0 ;j<6;j++){\r\n\t\t\t   var generatecard=ranNums[card_number]\r\n\t\t\t\t this.card=new Card(this,405+x_pos,85+y_pos,'cards',generatecard).setOrigin(0, 0).setInteractive().setDataEnabled()\r\n\t\t\t\t this.cardSet.push(this.card)\r\n\t\t\t   this.card.data.set('card_number', card_number);\r\n\t\t\t\tx_pos+=65;\r\n\t\t\t\tcard_number++;\r\n\t\t\t }\r\n\t\t\t   y_pos+=65;\r\n\t\t\t   x_pos=0;\r\n\t\t\t }\r\n\t\t\t \r\n\r\n\r\n\t\t\t let player1=new Player(this,405,85,'chess_red',1).setOrigin(0,0)\r\n\t\t\t let player2=new Player(this,730,85,'chess_blue',2).setOrigin(0,0)\r\n\r\n\r\n\r\n\t\t\t this.player=[]\r\n\t\t\t this.player.push(player1)\r\n\t\t\t this.player.push(player2)\r\n\t\t\t\t\r\n\t\t//need user name array\r\n\t\tthis.userName=['switch','noviah']\r\n\r\n\t\t//initalize the data\r\n\t\tthis.initCardData(-1,405,85,'switch',0)\r\n\t\tthis.initCardData(-1,730,85,'noviah',0)\r\n\r\n\t\tthis.seat=0;\r\n\r\n\t\tthis.CardLeft=36\r\n\t\t\t\r\n\t\tthis.clickedBox(ranNums)\r\n\t\t   \r\n\t}\r\n\r\n\t//check if the login user is in his round\r\n\tcheckUserInfo(cardNum,name,x,y) {\r\n    Auth.currentUserInfo().then((userInfo) => {\r\n\t\t\tconst { username } = userInfo;\r\n      if(name==username){\r\n\t\t\t\tthis.updateCardData(cardNum,x,y,name,1)\r\n\t\t\t\t//this.updateRound(seat)\r\n\t\t\t}else{\r\n\t\t\t\tconsole.log('invaild movement')\t\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\t\t)\r\n\t}\r\n\t\r\n\t\t\r\n\r\n\r\n\t//move card\r\n\tdecideMove(x,y,player){\r\n\t\tplayer.setX(x)\r\n\t\tplayer.setY(y)\r\n\t}\r\n\r\n\t//move the card to the side\r\n\thandlePlayerCard(cardNum,card){\r\n\t\tif(cardNum!=53){\r\n\t\t\tconsole.log('the card x is'+card.x)\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n//************************************************ */\r\n//the thing you need\r\n//*********************************************** */\r\n\r\n// async round(x,y){\r\n// \t(async () => { \r\n// \t\tawait client.hydrated();\r\n// \t\t//const getUser = await Auth.currentAuthenticatedUser();\r\n\t\t\t\t\t\t\r\n// \t\tvar nameWeGot1 = 'switch';\r\n// \t\tconst result1 = await client.query({\r\n// \t\t\tquery: gql(queries.getQw),\r\n// \t\t\tvariables: {\r\n// \t\t\t\tusername: nameWeGot1\r\n// \t\t\t},\r\n// \t\t\tfetchPolicy: 'network-only',\r\n// \t\t});\r\n// \t\tconst seat=result1.data.getQw.seat\r\n// \t\tconsole.log('the recent seat'+seat)\r\n// \t\t if(x==this.player[seat%2].x||y==this.player[seat%2].y){\r\n// \t\t\tthis.checkUserInfo(this.userName[seat%2],x,y,seat)\r\n// \t\t }\r\n// \t})();\r\n// }\r\n\r\nasync initCardData(card,x,y,theusername,theSeat){\r\n\tconst cardV = card;\r\n\tconsole.log(cardV)\r\n\tconst xV =x;\r\n\tconsole.log(\"x : \"+xV)\r\n\tconst yV = y;\r\n\tconsole.log(\"y : \"+yV);\r\n\tconst name = theusername;\r\n\tconsole.log('your name : ' +name);\r\n\tconst thething = {\r\n\t\t\t\tusername : name,\r\n\t\t\t\twhichCard : cardV,\r\n\t\t\t\t\t\tx : xV,\r\n\t\t\t\t\t\ty : yV,\r\n\t\t\t\t\t\tseat: theSeat\r\n\t\t\t\t\t};\r\n const newThing = await API.graphql(graphqlOperation(mutations.updateQw, {input: thething}));\r\n}\r\n\r\n\r\n\t\r\n\t\r\n\tasync updateCardData(card,x,y,name,theSeat){\r\n\t\tconst cardV = card;\r\n\t\tconsole.log(cardV)\r\n\t\tconst xV =x;\r\n\t\tconsole.log(\"x : \"+xV)\r\n\t\tconst yV = y;\r\n\t\tconsole.log(\"y : \"+yV);\r\n\t\tconsole.log('your name : ' +name);\r\n\t\tconst thething = {\r\n\t\t\t\t\tusername : name,\r\n\t\t\t\t\twhichCard : cardV,\r\n\t\t\t\t\t\t\tx : xV,\r\n\t\t\t\t\t\t\ty : yV,\r\n\t\t\t\t\t\t\tseat: theSeat\r\n\t\t\t\t\t\t};\r\n\t const newThing = await API.graphql(graphqlOperation(mutations.updateQw, {input: thething}));\r\n\t}\r\n\r\n\t// async updateRound(theseat){\r\n\t// \tconsole.log('to update'+theseat);\r\n\t// \tconst thething = {\r\n\t// \t\t\t\tusername : 'switch',\r\n\t// \t\t\t\tseat: theseat+1,\r\n\t// \t\t\t\t\t};\r\n\t//  const newThing = await API.graphql(graphqlOperation(mutations.updateQw, {input: thething}));\r\n\t// }\r\n\t\r\n\t\r\n\t\r\n\r\n\r\n\r\n\t//click the card and make it move\r\n\tclickedBox(ranNums){\r\n\t\t//var arrangepostion=0;\r\n\t\tthis.input.on('gameobjectdown', (pointer, gameObject) => {\r\n\t\t\tfor(var i=0;i<36;i++){\r\n\t\t\t\tif(this.gameBoard[i] == i ){\r\n\t\t\t\t\tif(gameObject.x==this.player[this.seat].x||gameObject.y==this.player[this.seat].y){\r\n\t\t\t\t\t\t\tif(gameObject.data.get('card_number') == i){\r\n\t\t\t\t\t\t\t\tthis.checkUserInfo(i,this.userName[this.seat],gameObject.x,gameObject.y)\r\n\t\t\t\t\t\t\t\tthis.CardLeft--;\r\n\t\t\t\t\t\t\t\t//break;\r\n\t\t\t\t\t\t}else if(gameObject.data.get('card_number') == 53){\r\n\t\t\t\t\t\t\tthis.checkUserInfo(-1,this.userName[this.seat],gameObject.x,gameObject.y)\r\n\t\t\t\t\t\t\t\t//break;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\r\n\t\t\t}\t\r\n\t\r\n\t}\r\n\r\n\t\t\t\r\n\t});\r\n\r\n}\r\n\t\r\n\tupdate(time, delta) {\r\n\t\t(async () => { \r\n \r\n\t\t\tawait client.hydrated();\r\n\t\t\t\t\t\t\t\r\n\t\t\tvar nameWeGot1 = this.userName[0];\r\n\t\t\tconst result1 = await client.query({\r\n\t\t\t\tquery: gql(queries.getQw),\r\n\t\t\t\tvariables: {\r\n\t\t\t\t\tusername: nameWeGot1\r\n\t\t\t\t},\r\n\t\t\t\tfetchPolicy: 'network-only',\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar nameWeGot2 = this.userName[1];\r\n\t\t\tconst result2 = await client.query({\r\n\t\t\t\tquery: gql(queries.getQw),\r\n\t\t\t\tvariables: {\r\n\t\t\t\t\tusername: nameWeGot2\r\n\t\t\t\t},\r\n\t\t\t\tfetchPolicy: 'network-only',\r\n\t\t\t});\r\n\t\t\tif(result1.data.getQw.seat==1){\r\n\t\t\t\t this.decideMove(result1.data.getQw.x,result1.data.getQw.y,this.player[0])\r\n\t\t\t\t console.log('update the player1')\r\n\t\t\t\t this.seat=1\r\n\t\t\t\t \t if(result1.data.getQw.whichCard!=-1){\r\n\t\t\t\t\t\tthis.cardSet[result1.data.getQw.whichCard].setX(20)\r\n\t\t\t\t\t\tthis.cardSet[result1.data.getQw.whichCard].setY(85)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.updateCardData(-1,result1.data.getQw.x,result1.data.getQw.y,nameWeGot1,0)\r\n\t\t\t\t }else if(result2.data.getQw.seat==1){\r\n\t\t\t\tthis.decideMove(result2.data.getQw.x,result2.data.getQw.y,this.player[1])\r\n\t\t\t\tconsole.log('update the player2')\r\n\t\t\t\tthis.seat=0\r\n\t\t\t\t\tif(result2.data.getQw.whichCard!=-1){\r\n\t\t\t\t\tconsole.log('move the card')\r\n\t\t\t\t\tthis.cardSet[result2.data.getQw.whichCard].setX(900)\r\n\t\t\t\t\tthis.cardSet[result2.data.getQw.whichCard].setY(85)\r\n\t\t\t }\r\n\t\t\t this.updateCardData(-1,result2.data.getQw.x,result2.data.getQw.y,nameWeGot2,0)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t})();\r\n\t\tif(this.CardLeft==0){\r\n\t\t\tconsole.log('game over')\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}